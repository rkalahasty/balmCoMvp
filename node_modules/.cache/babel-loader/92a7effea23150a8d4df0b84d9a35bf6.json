{"ast":null,"code":"\"use strict\";\n/**\n * btoa() as defined by the HTML and Infra specs, which mostly just references\n * RFC 4648.\n */\n\nfunction btoa(s) {\n  if (arguments.length === 0) {\n    throw new TypeError(\"1 argument required, but only 0 present.\");\n  }\n\n  let i; // String conversion as required by Web IDL.\n\n  s = `${s}`; // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n  // data contains any character whose code point is greater than U+00FF.\"\n\n  for (i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 255) {\n      return null;\n    }\n  }\n\n  let out = \"\";\n\n  for (i = 0; i < s.length; i += 3) {\n    const groupsOfSix = [undefined, undefined, undefined, undefined];\n    groupsOfSix[0] = s.charCodeAt(i) >> 2;\n    groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n\n    if (s.length > i + 1) {\n      groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n      groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n    }\n\n    if (s.length > i + 2) {\n      groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n      groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n    }\n\n    for (let j = 0; j < groupsOfSix.length; j++) {\n      if (typeof groupsOfSix[j] === \"undefined\") {\n        out += \"=\";\n      } else {\n        out += btoaLookup(groupsOfSix[j]);\n      }\n    }\n  }\n\n  return out;\n}\n/**\n * Lookup table for btoa(), which converts a six-bit number into the\n * corresponding ASCII character.\n */\n\n\nconst keystr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nfunction btoaLookup(index) {\n  if (index >= 0 && index < 64) {\n    return keystr[index];\n  } // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n\n\n  return undefined;\n}\n\nmodule.exports = btoa;","map":{"version":3,"names":["btoa","s","arguments","length","TypeError","i","charCodeAt","out","groupsOfSix","undefined","j","btoaLookup","keystr","index","module","exports"],"sources":["C:/Users/17033/balmco/node_modules/abab/lib/btoa.js"],"sourcesContent":["\"use strict\";\n\n/**\n * btoa() as defined by the HTML and Infra specs, which mostly just references\n * RFC 4648.\n */\nfunction btoa(s) {\n  if (arguments.length === 0) {\n    throw new TypeError(\"1 argument required, but only 0 present.\");\n  }\n\n  let i;\n  // String conversion as required by Web IDL.\n  s = `${s}`;\n  // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n  // data contains any character whose code point is greater than U+00FF.\"\n  for (i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 255) {\n      return null;\n    }\n  }\n  let out = \"\";\n  for (i = 0; i < s.length; i += 3) {\n    const groupsOfSix = [undefined, undefined, undefined, undefined];\n    groupsOfSix[0] = s.charCodeAt(i) >> 2;\n    groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n    if (s.length > i + 1) {\n      groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n      groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n    }\n    if (s.length > i + 2) {\n      groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n      groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n    }\n    for (let j = 0; j < groupsOfSix.length; j++) {\n      if (typeof groupsOfSix[j] === \"undefined\") {\n        out += \"=\";\n      } else {\n        out += btoaLookup(groupsOfSix[j]);\n      }\n    }\n  }\n  return out;\n}\n\n/**\n * Lookup table for btoa(), which converts a six-bit number into the\n * corresponding ASCII character.\n */\nconst keystr =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nfunction btoaLookup(index) {\n  if (index >= 0 && index < 64) {\n    return keystr[index];\n  }\n\n  // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n  return undefined;\n}\n\nmodule.exports = btoa;\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;AACA,SAASA,IAAT,CAAcC,CAAd,EAAiB;EACf,IAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;IAC1B,MAAM,IAAIC,SAAJ,CAAc,0CAAd,CAAN;EACD;;EAED,IAAIC,CAAJ,CALe,CAMf;;EACAJ,CAAC,GAAI,GAAEA,CAAE,EAAT,CAPe,CAQf;EACA;;EACA,KAAKI,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGJ,CAAC,CAACE,MAAlB,EAA0BE,CAAC,EAA3B,EAA+B;IAC7B,IAAIJ,CAAC,CAACK,UAAF,CAAaD,CAAb,IAAkB,GAAtB,EAA2B;MACzB,OAAO,IAAP;IACD;EACF;;EACD,IAAIE,GAAG,GAAG,EAAV;;EACA,KAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGJ,CAAC,CAACE,MAAlB,EAA0BE,CAAC,IAAI,CAA/B,EAAkC;IAChC,MAAMG,WAAW,GAAG,CAACC,SAAD,EAAYA,SAAZ,EAAuBA,SAAvB,EAAkCA,SAAlC,CAApB;IACAD,WAAW,CAAC,CAAD,CAAX,GAAiBP,CAAC,CAACK,UAAF,CAAaD,CAAb,KAAmB,CAApC;IACAG,WAAW,CAAC,CAAD,CAAX,GAAiB,CAACP,CAAC,CAACK,UAAF,CAAaD,CAAb,IAAkB,IAAnB,KAA4B,CAA7C;;IACA,IAAIJ,CAAC,CAACE,MAAF,GAAWE,CAAC,GAAG,CAAnB,EAAsB;MACpBG,WAAW,CAAC,CAAD,CAAX,IAAkBP,CAAC,CAACK,UAAF,CAAaD,CAAC,GAAG,CAAjB,KAAuB,CAAzC;MACAG,WAAW,CAAC,CAAD,CAAX,GAAiB,CAACP,CAAC,CAACK,UAAF,CAAaD,CAAC,GAAG,CAAjB,IAAsB,IAAvB,KAAgC,CAAjD;IACD;;IACD,IAAIJ,CAAC,CAACE,MAAF,GAAWE,CAAC,GAAG,CAAnB,EAAsB;MACpBG,WAAW,CAAC,CAAD,CAAX,IAAkBP,CAAC,CAACK,UAAF,CAAaD,CAAC,GAAG,CAAjB,KAAuB,CAAzC;MACAG,WAAW,CAAC,CAAD,CAAX,GAAiBP,CAAC,CAACK,UAAF,CAAaD,CAAC,GAAG,CAAjB,IAAsB,IAAvC;IACD;;IACD,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACL,MAAhC,EAAwCO,CAAC,EAAzC,EAA6C;MAC3C,IAAI,OAAOF,WAAW,CAACE,CAAD,CAAlB,KAA0B,WAA9B,EAA2C;QACzCH,GAAG,IAAI,GAAP;MACD,CAFD,MAEO;QACLA,GAAG,IAAII,UAAU,CAACH,WAAW,CAACE,CAAD,CAAZ,CAAjB;MACD;IACF;EACF;;EACD,OAAOH,GAAP;AACD;AAED;AACA;AACA;AACA;;;AACA,MAAMK,MAAM,GACV,kEADF;;AAGA,SAASD,UAAT,CAAoBE,KAApB,EAA2B;EACzB,IAAIA,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,EAA1B,EAA8B;IAC5B,OAAOD,MAAM,CAACC,KAAD,CAAb;EACD,CAHwB,CAKzB;;;EACA,OAAOJ,SAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBf,IAAjB"},"metadata":{},"sourceType":"script"}