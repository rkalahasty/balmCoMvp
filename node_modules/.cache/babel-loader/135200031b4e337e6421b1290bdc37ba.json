{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst {\n  serializeURL\n} = require(\"whatwg-url\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\n\nconst {\n  formOwner,\n  isListed,\n  isSubmittable,\n  isSubmitButton\n} = require(\"../helpers/form-controls\");\n\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\n\nconst notImplemented = require(\"../../browser/not-implemented\");\n\nconst {\n  parseURLToResultingURLRecord\n} = require(\"../helpers/document-base-url\");\n\nconst encTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nconst methods = new Set([\"get\", \"post\", \"dialog\"]);\nconst constraintValidationPositiveResult = Symbol(\"positive\");\nconst constraintValidationNegativeResult = Symbol(\"negative\");\n\nclass HTMLFormElementImpl extends HTMLElementImpl {\n  _descendantAdded(parent, child) {\n    const form = this;\n\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(form);\n      }\n    }\n\n    super._descendantAdded(parent, child);\n  }\n\n  _descendantRemoved(parent, child) {\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(null);\n      }\n    }\n\n    super._descendantRemoved(parent, child);\n  }\n\n  _getElementNodes() {\n    return domSymbolTree.treeToArray(this.getRootNode({}), {\n      filter: node => {\n        if (!isListed(node) || node._localName === \"input\" && node.type === \"image\") {\n          return false;\n        }\n\n        return formOwner(node) === this;\n      }\n    });\n  } // https://html.spec.whatwg.org/multipage/forms.html#dom-form-elements\n\n\n  get elements() {\n    // TODO: Return a HTMLFormControlsCollection\n    return HTMLCollection.createImpl(this._globalObject, [], {\n      element: this.getRootNode({}),\n      query: () => this._getElementNodes()\n    });\n  }\n\n  get length() {\n    return this.elements.length;\n  }\n\n  _doSubmit() {\n    if (!this.isConnected) {\n      return;\n    }\n\n    this.submit();\n  }\n\n  submit() {\n    if (!fireAnEvent(\"submit\", this, undefined, {\n      bubbles: true,\n      cancelable: true\n    })) {\n      return;\n    }\n\n    notImplemented(\"HTMLFormElement.prototype.submit\", this._ownerDocument._defaultView);\n  }\n\n  requestSubmit() {\n    let submitter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n    if (submitter !== undefined) {\n      if (!isSubmitButton(submitter)) {\n        throw new TypeError(\"The specified element is not a submit button\");\n      }\n\n      if (submitter.form !== this) {\n        throw DOMException.create(this._globalObject, [\"The specified element is not owned by this form element\", \"NotFoundError\"]);\n      }\n    }\n\n    if (!fireAnEvent(\"submit\", this, undefined, {\n      bubbles: true,\n      cancelable: true\n    })) {\n      return;\n    }\n\n    notImplemented(\"HTMLFormElement.prototype.requestSubmit\", this._ownerDocument._defaultView);\n  }\n\n  _doReset() {\n    if (!this.isConnected) {\n      return;\n    }\n\n    this.reset();\n  }\n\n  reset() {\n    if (!fireAnEvent(\"reset\", this, undefined, {\n      bubbles: true,\n      cancelable: true\n    })) {\n      return;\n    }\n\n    for (const el of this.elements) {\n      if (typeof el._formReset === \"function\") {\n        el._formReset();\n      }\n    }\n  }\n\n  get method() {\n    let method = this.getAttributeNS(null, \"method\");\n\n    if (method) {\n      method = method.toLowerCase();\n    }\n\n    if (methods.has(method)) {\n      return method;\n    }\n\n    return \"get\";\n  }\n\n  set method(V) {\n    this.setAttributeNS(null, \"method\", V);\n  }\n\n  get enctype() {\n    let type = this.getAttributeNS(null, \"enctype\");\n\n    if (type) {\n      type = type.toLowerCase();\n    }\n\n    if (encTypes.has(type)) {\n      return type;\n    }\n\n    return \"application/x-www-form-urlencoded\";\n  }\n\n  set enctype(V) {\n    this.setAttributeNS(null, \"enctype\", V);\n  }\n\n  get action() {\n    const attributeValue = this.getAttributeNS(null, \"action\");\n\n    if (attributeValue === null || attributeValue === \"\") {\n      return this._ownerDocument.URL;\n    }\n\n    const urlRecord = parseURLToResultingURLRecord(attributeValue, this._ownerDocument);\n\n    if (urlRecord === null) {\n      return attributeValue;\n    }\n\n    return serializeURL(urlRecord);\n  }\n\n  set action(V) {\n    this.setAttributeNS(null, \"action\", V);\n  } // If the checkValidity() method is invoked, the user agent must statically validate the\n  // constraints of the form element, and return true if the constraint validation returned\n  // a positive result, and false if it returned a negative result.\n\n\n  checkValidity() {\n    return this._staticallyValidateConstraints().result === constraintValidationPositiveResult;\n  } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#interactively-validate-the-constraints\n\n\n  reportValidity() {\n    return this.checkValidity();\n  } // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#statically-validate-the-constraints\n\n\n  _staticallyValidateConstraints() {\n    const controls = [];\n\n    for (const el of this.elements) {\n      if (el.form === this && isSubmittable(el)) {\n        controls.push(el);\n      }\n    }\n\n    const invalidControls = [];\n\n    for (const control of controls) {\n      if (control._isCandidateForConstraintValidation() && !control._satisfiesConstraints()) {\n        invalidControls.push(control);\n      }\n    }\n\n    if (invalidControls.length === 0) {\n      return {\n        result: constraintValidationPositiveResult\n      };\n    }\n\n    const unhandledInvalidControls = [];\n\n    for (const invalidControl of invalidControls) {\n      const notCancelled = fireAnEvent(\"invalid\", invalidControl, undefined, {\n        cancelable: true\n      });\n\n      if (notCancelled) {\n        unhandledInvalidControls.push(invalidControl);\n      }\n    }\n\n    return {\n      result: constraintValidationNegativeResult,\n      unhandledInvalidControls\n    };\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLFormElementImpl\n};","map":{"version":3,"names":["DOMException","require","serializeURL","HTMLElementImpl","implementation","domSymbolTree","fireAnEvent","formOwner","isListed","isSubmittable","isSubmitButton","HTMLCollection","notImplemented","parseURLToResultingURLRecord","encTypes","Set","methods","constraintValidationPositiveResult","Symbol","constraintValidationNegativeResult","HTMLFormElementImpl","_descendantAdded","parent","child","form","el","treeIterator","_changedFormOwner","_descendantRemoved","_getElementNodes","treeToArray","getRootNode","filter","node","_localName","type","elements","createImpl","_globalObject","element","query","length","_doSubmit","isConnected","submit","undefined","bubbles","cancelable","_ownerDocument","_defaultView","requestSubmit","submitter","TypeError","create","_doReset","reset","_formReset","method","getAttributeNS","toLowerCase","has","V","setAttributeNS","enctype","action","attributeValue","URL","urlRecord","checkValidity","_staticallyValidateConstraints","result","reportValidity","controls","push","invalidControls","control","_isCandidateForConstraintValidation","_satisfiesConstraints","unhandledInvalidControls","invalidControl","notCancelled","module","exports"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/nodes/HTMLFormElement-impl.js"],"sourcesContent":["\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst { serializeURL } = require(\"whatwg-url\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { fireAnEvent } = require(\"../helpers/events\");\nconst { formOwner, isListed, isSubmittable, isSubmitButton } = require(\"../helpers/form-controls\");\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\nconst notImplemented = require(\"../../browser/not-implemented\");\nconst { parseURLToResultingURLRecord } = require(\"../helpers/document-base-url\");\n\nconst encTypes = new Set([\n  \"application/x-www-form-urlencoded\",\n  \"multipart/form-data\",\n  \"text/plain\"\n]);\n\nconst methods = new Set([\n  \"get\",\n  \"post\",\n  \"dialog\"\n]);\n\nconst constraintValidationPositiveResult = Symbol(\"positive\");\nconst constraintValidationNegativeResult = Symbol(\"negative\");\n\nclass HTMLFormElementImpl extends HTMLElementImpl {\n  _descendantAdded(parent, child) {\n    const form = this;\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(form);\n      }\n    }\n\n    super._descendantAdded(parent, child);\n  }\n\n  _descendantRemoved(parent, child) {\n    for (const el of domSymbolTree.treeIterator(child)) {\n      if (typeof el._changedFormOwner === \"function\") {\n        el._changedFormOwner(null);\n      }\n    }\n\n    super._descendantRemoved(parent, child);\n  }\n\n  _getElementNodes() {\n    return domSymbolTree.treeToArray(this.getRootNode({}), {\n      filter: node => {\n        if (!isListed(node) || (node._localName === \"input\" && node.type === \"image\")) {\n          return false;\n        }\n\n        return formOwner(node) === this;\n      }\n    });\n  }\n\n  // https://html.spec.whatwg.org/multipage/forms.html#dom-form-elements\n  get elements() {\n    // TODO: Return a HTMLFormControlsCollection\n    return HTMLCollection.createImpl(this._globalObject, [], {\n      element: this.getRootNode({}),\n      query: () => this._getElementNodes()\n    });\n  }\n\n  get length() {\n    return this.elements.length;\n  }\n\n  _doSubmit() {\n    if (!this.isConnected) {\n      return;\n    }\n\n    this.submit();\n  }\n\n  submit() {\n    if (!fireAnEvent(\"submit\", this, undefined, { bubbles: true, cancelable: true })) {\n      return;\n    }\n\n    notImplemented(\"HTMLFormElement.prototype.submit\", this._ownerDocument._defaultView);\n  }\n\n  requestSubmit(submitter = undefined) {\n    if (submitter !== undefined) {\n      if (!isSubmitButton(submitter)) {\n        throw new TypeError(\"The specified element is not a submit button\");\n      }\n      if (submitter.form !== this) {\n        throw DOMException.create(this._globalObject, [\n          \"The specified element is not owned by this form element\",\n          \"NotFoundError\"\n        ]);\n      }\n    }\n\n    if (!fireAnEvent(\"submit\", this, undefined, { bubbles: true, cancelable: true })) {\n      return;\n    }\n\n    notImplemented(\"HTMLFormElement.prototype.requestSubmit\", this._ownerDocument._defaultView);\n  }\n\n  _doReset() {\n    if (!this.isConnected) {\n      return;\n    }\n\n    this.reset();\n  }\n\n  reset() {\n    if (!fireAnEvent(\"reset\", this, undefined, { bubbles: true, cancelable: true })) {\n      return;\n    }\n\n    for (const el of this.elements) {\n      if (typeof el._formReset === \"function\") {\n        el._formReset();\n      }\n    }\n  }\n\n  get method() {\n    let method = this.getAttributeNS(null, \"method\");\n    if (method) {\n      method = method.toLowerCase();\n    }\n\n    if (methods.has(method)) {\n      return method;\n    }\n    return \"get\";\n  }\n\n  set method(V) {\n    this.setAttributeNS(null, \"method\", V);\n  }\n\n  get enctype() {\n    let type = this.getAttributeNS(null, \"enctype\");\n    if (type) {\n      type = type.toLowerCase();\n    }\n\n    if (encTypes.has(type)) {\n      return type;\n    }\n    return \"application/x-www-form-urlencoded\";\n  }\n\n  set enctype(V) {\n    this.setAttributeNS(null, \"enctype\", V);\n  }\n\n  get action() {\n    const attributeValue = this.getAttributeNS(null, \"action\");\n    if (attributeValue === null || attributeValue === \"\") {\n      return this._ownerDocument.URL;\n    }\n    const urlRecord = parseURLToResultingURLRecord(attributeValue, this._ownerDocument);\n    if (urlRecord === null) {\n      return attributeValue;\n    }\n    return serializeURL(urlRecord);\n  }\n\n  set action(V) {\n    this.setAttributeNS(null, \"action\", V);\n  }\n\n  // If the checkValidity() method is invoked, the user agent must statically validate the\n  // constraints of the form element, and return true if the constraint validation returned\n  // a positive result, and false if it returned a negative result.\n  checkValidity() {\n    return this._staticallyValidateConstraints().result === constraintValidationPositiveResult;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#interactively-validate-the-constraints\n  reportValidity() {\n    return this.checkValidity();\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#statically-validate-the-constraints\n  _staticallyValidateConstraints() {\n    const controls = [];\n    for (const el of this.elements) {\n      if (el.form === this && isSubmittable(el)) {\n        controls.push(el);\n      }\n    }\n\n    const invalidControls = [];\n\n    for (const control of controls) {\n      if (control._isCandidateForConstraintValidation() && !control._satisfiesConstraints()) {\n        invalidControls.push(control);\n      }\n    }\n\n    if (invalidControls.length === 0) {\n      return { result: constraintValidationPositiveResult };\n    }\n\n    const unhandledInvalidControls = [];\n    for (const invalidControl of invalidControls) {\n      const notCancelled = fireAnEvent(\"invalid\", invalidControl, undefined, { cancelable: true });\n      if (notCancelled) {\n        unhandledInvalidControls.push(invalidControl);\n      }\n    }\n\n    return { result: constraintValidationNegativeResult, unhandledInvalidControls };\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLFormElementImpl\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}