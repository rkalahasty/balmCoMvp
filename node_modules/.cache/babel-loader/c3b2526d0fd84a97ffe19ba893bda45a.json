{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nconst ValidityState = require(\"../generated/ValidityState\");\n\nconst {\n  mixin\n} = require(\"../../utils\");\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst {\n  cloningSteps\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  isDisabled,\n  getLabelsForLabelable,\n  formOwner\n} = require(\"../helpers/form-controls\");\n\nconst {\n  childTextContent\n} = require(\"../helpers/text\");\n\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\n\nclass HTMLTextAreaElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._selectionStart = this._selectionEnd = 0;\n    this._selectionDirection = \"none\";\n    this._rawValue = \"\";\n    this._dirtyValue = false;\n    this._customValidityErrorMessage = \"\";\n    this._labels = null;\n  }\n\n  _formReset() {\n    this._rawValue = childTextContent(this);\n    this._dirtyValue = false;\n  }\n\n  _getAPIValue() {\n    return this._rawValue.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#textarea-wrapping-transformation\n\n\n  _getValue() {\n    const apiValue = this._getAPIValue();\n\n    const wrap = this.getAttributeNS(null, \"wrap\");\n    return wrap === \"hard\" ? textareaWrappingTransformation(apiValue, this.cols) : apiValue;\n  }\n\n  _childTextContentChangeSteps() {\n    super._childTextContentChangeSteps();\n\n    if (this._dirtyValue === false) {\n      this._rawValue = childTextContent(this);\n    }\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get defaultValue() {\n    return childTextContent(this);\n  }\n\n  set defaultValue(val) {\n    this.textContent = val;\n  }\n\n  get value() {\n    return this._getAPIValue();\n  }\n\n  set value(val) {\n    // https://html.spec.whatwg.org/multipage/form-elements.html#dom-textarea-value\n    const oldAPIValue = this._getAPIValue();\n\n    this._rawValue = val;\n    this._dirtyValue = true;\n\n    if (oldAPIValue !== this._getAPIValue()) {\n      this._selectionStart = this._selectionEnd = this._getValueLength();\n      this._selectionDirection = \"none\";\n    }\n  }\n\n  get textLength() {\n    return this.value.length; // code unit length (16 bit)\n  }\n\n  get type() {\n    return \"textarea\";\n  }\n\n  _dispatchSelectEvent() {\n    fireAnEvent(\"select\", this, undefined, {\n      bubbles: true,\n      cancelable: true\n    });\n  }\n\n  _getValueLength() {\n    return typeof this.value === \"string\" ? this.value.length : 0;\n  }\n\n  select() {\n    this._selectionStart = 0;\n    this._selectionEnd = this._getValueLength();\n    this._selectionDirection = \"none\";\n\n    this._dispatchSelectEvent();\n  }\n\n  get selectionStart() {\n    return this._selectionStart;\n  }\n\n  set selectionStart(start) {\n    this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);\n  }\n\n  get selectionEnd() {\n    return this._selectionEnd;\n  }\n\n  set selectionEnd(end) {\n    this.setSelectionRange(this._selectionStart, end, this._selectionDirection);\n  }\n\n  get selectionDirection() {\n    return this._selectionDirection;\n  }\n\n  set selectionDirection(dir) {\n    this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);\n  }\n\n  setSelectionRange(start, end, dir) {\n    this._selectionEnd = Math.min(end, this._getValueLength());\n    this._selectionStart = Math.min(start, this._selectionEnd);\n    this._selectionDirection = dir === \"forward\" || dir === \"backward\" ? dir : \"none\";\n\n    this._dispatchSelectEvent();\n  }\n\n  setRangeText(repl, start, end) {\n    let selectionMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"preserve\";\n\n    if (arguments.length < 2) {\n      start = this._selectionStart;\n      end = this._selectionEnd;\n    } else if (start > end) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    start = Math.min(start, this._getValueLength());\n    end = Math.min(end, this._getValueLength());\n    const val = this.value;\n    let selStart = this._selectionStart;\n    let selEnd = this._selectionEnd;\n    this.value = val.slice(0, start) + repl + val.slice(end);\n    const newEnd = start + this.value.length;\n\n    if (selectionMode === \"select\") {\n      this.setSelectionRange(start, newEnd);\n    } else if (selectionMode === \"start\") {\n      this.setSelectionRange(start, start);\n    } else if (selectionMode === \"end\") {\n      this.setSelectionRange(newEnd, newEnd);\n    } else {\n      // preserve\n      const delta = repl.length - (end - start);\n\n      if (selStart > end) {\n        selStart += delta;\n      } else if (selStart > start) {\n        selStart = start;\n      }\n\n      if (selEnd > end) {\n        selEnd += delta;\n      } else if (selEnd > start) {\n        selEnd = newEnd;\n      }\n\n      this.setSelectionRange(selStart, selEnd);\n    }\n  }\n\n  get cols() {\n    if (!this.hasAttributeNS(null, \"cols\")) {\n      return 20;\n    }\n\n    return parseInt(this.getAttributeNS(null, \"cols\"));\n  }\n\n  set cols(value) {\n    if (value <= 0) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    this.setAttributeNS(null, \"cols\", String(value));\n  }\n\n  get rows() {\n    if (!this.hasAttributeNS(null, \"rows\")) {\n      return 2;\n    }\n\n    return parseInt(this.getAttributeNS(null, \"rows\"));\n  }\n\n  set rows(value) {\n    if (value <= 0) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    this.setAttributeNS(null, \"rows\", String(value));\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.hasAttributeNS(null, \"readonly\");\n  }\n\n  get _mutable() {\n    return !isDisabled(this) && !this.hasAttributeNS(null, \"readonly\");\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#attr-textarea-required\n\n\n  get validity() {\n    if (!this._validity) {\n      const state = {\n        valueMissing: () => this.hasAttributeNS(null, \"required\") && this._mutable && this.value === \"\"\n      };\n      this._validity = ValidityState.createImpl(this._globalObject, [], {\n        element: this,\n        state\n      });\n    }\n\n    return this._validity;\n  }\n\n  [cloningSteps](copy, node) {\n    copy._dirtyValue = node._dirtyValue;\n    copy._rawValue = node._rawValue;\n  }\n\n}\n\nmixin(HTMLTextAreaElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLTextAreaElementImpl\n};\n\nfunction textareaWrappingTransformation(text, cols) {\n  let lineStart = 0;\n  let lineEnd = text.indexOf(\"\\n\");\n\n  if (lineEnd === -1) {\n    lineEnd = text.length;\n  }\n\n  while (lineStart < text.length) {\n    const lineLength = lineEnd - lineStart;\n\n    if (lineLength > cols) {\n      // split the line\n      lineEnd = lineStart + cols;\n      text = text.slice(0, lineEnd) + \"\\n\" + text.slice(lineEnd);\n    } // move to next line\n\n\n    lineStart = lineEnd + 1; // step over the newline\n\n    lineEnd = text.indexOf(\"\\n\", lineStart);\n\n    if (lineEnd === -1) {\n      lineEnd = text.length;\n    }\n  }\n\n  return text;\n}","map":{"version":3,"names":["HTMLElementImpl","require","implementation","DefaultConstraintValidationImpl","ValidityState","mixin","DOMException","cloningSteps","isDisabled","getLabelsForLabelable","formOwner","childTextContent","fireAnEvent","HTMLTextAreaElementImpl","constructor","globalObject","args","privateData","_selectionStart","_selectionEnd","_selectionDirection","_rawValue","_dirtyValue","_customValidityErrorMessage","_labels","_formReset","_getAPIValue","replace","_getValue","apiValue","wrap","getAttributeNS","textareaWrappingTransformation","cols","_childTextContentChangeSteps","labels","form","defaultValue","val","textContent","value","oldAPIValue","_getValueLength","textLength","length","type","_dispatchSelectEvent","undefined","bubbles","cancelable","select","selectionStart","start","setSelectionRange","Math","max","selectionEnd","end","selectionDirection","dir","min","setRangeText","repl","selectionMode","arguments","create","_globalObject","selStart","selEnd","slice","newEnd","delta","hasAttributeNS","parseInt","setAttributeNS","String","rows","_barredFromConstraintValidationSpecialization","_mutable","validity","_validity","state","valueMissing","createImpl","element","copy","node","prototype","module","exports","text","lineStart","lineEnd","indexOf","lineLength"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTextAreaElement-impl.js"],"sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst DefaultConstraintValidationImpl =\n  require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\nconst ValidityState = require(\"../generated/ValidityState\");\nconst { mixin } = require(\"../../utils\");\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst { cloningSteps } = require(\"../helpers/internal-constants\");\nconst { isDisabled, getLabelsForLabelable, formOwner } = require(\"../helpers/form-controls\");\nconst { childTextContent } = require(\"../helpers/text\");\nconst { fireAnEvent } = require(\"../helpers/events\");\n\nclass HTMLTextAreaElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    this._selectionStart = this._selectionEnd = 0;\n    this._selectionDirection = \"none\";\n    this._rawValue = \"\";\n    this._dirtyValue = false;\n\n    this._customValidityErrorMessage = \"\";\n\n    this._labels = null;\n  }\n\n  _formReset() {\n    this._rawValue = childTextContent(this);\n    this._dirtyValue = false;\n  }\n\n  _getAPIValue() {\n    return this._rawValue.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#textarea-wrapping-transformation\n  _getValue() {\n    const apiValue = this._getAPIValue();\n    const wrap = this.getAttributeNS(null, \"wrap\");\n    return wrap === \"hard\" ?\n      textareaWrappingTransformation(apiValue, this.cols) :\n      apiValue;\n  }\n\n  _childTextContentChangeSteps() {\n    super._childTextContentChangeSteps();\n\n    if (this._dirtyValue === false) {\n      this._rawValue = childTextContent(this);\n    }\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get defaultValue() {\n    return childTextContent(this);\n  }\n\n  set defaultValue(val) {\n    this.textContent = val;\n  }\n\n  get value() {\n    return this._getAPIValue();\n  }\n\n  set value(val) {\n    // https://html.spec.whatwg.org/multipage/form-elements.html#dom-textarea-value\n    const oldAPIValue = this._getAPIValue();\n    this._rawValue = val;\n    this._dirtyValue = true;\n\n    if (oldAPIValue !== this._getAPIValue()) {\n      this._selectionStart = this._selectionEnd = this._getValueLength();\n      this._selectionDirection = \"none\";\n    }\n  }\n\n  get textLength() {\n    return this.value.length; // code unit length (16 bit)\n  }\n\n  get type() {\n    return \"textarea\";\n  }\n\n  _dispatchSelectEvent() {\n    fireAnEvent(\"select\", this, undefined, { bubbles: true, cancelable: true });\n  }\n\n  _getValueLength() {\n    return typeof this.value === \"string\" ? this.value.length : 0;\n  }\n\n  select() {\n    this._selectionStart = 0;\n    this._selectionEnd = this._getValueLength();\n    this._selectionDirection = \"none\";\n    this._dispatchSelectEvent();\n  }\n\n  get selectionStart() {\n    return this._selectionStart;\n  }\n\n  set selectionStart(start) {\n    this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);\n  }\n\n  get selectionEnd() {\n    return this._selectionEnd;\n  }\n\n  set selectionEnd(end) {\n    this.setSelectionRange(this._selectionStart, end, this._selectionDirection);\n  }\n\n  get selectionDirection() {\n    return this._selectionDirection;\n  }\n\n  set selectionDirection(dir) {\n    this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);\n  }\n\n  setSelectionRange(start, end, dir) {\n    this._selectionEnd = Math.min(end, this._getValueLength());\n    this._selectionStart = Math.min(start, this._selectionEnd);\n    this._selectionDirection = dir === \"forward\" || dir === \"backward\" ? dir : \"none\";\n    this._dispatchSelectEvent();\n  }\n\n  setRangeText(repl, start, end, selectionMode = \"preserve\") {\n    if (arguments.length < 2) {\n      start = this._selectionStart;\n      end = this._selectionEnd;\n    } else if (start > end) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    start = Math.min(start, this._getValueLength());\n    end = Math.min(end, this._getValueLength());\n\n    const val = this.value;\n    let selStart = this._selectionStart;\n    let selEnd = this._selectionEnd;\n\n    this.value = val.slice(0, start) + repl + val.slice(end);\n\n    const newEnd = start + this.value.length;\n\n    if (selectionMode === \"select\") {\n      this.setSelectionRange(start, newEnd);\n    } else if (selectionMode === \"start\") {\n      this.setSelectionRange(start, start);\n    } else if (selectionMode === \"end\") {\n      this.setSelectionRange(newEnd, newEnd);\n    } else { // preserve\n      const delta = repl.length - (end - start);\n\n      if (selStart > end) {\n        selStart += delta;\n      } else if (selStart > start) {\n        selStart = start;\n      }\n\n      if (selEnd > end) {\n        selEnd += delta;\n      } else if (selEnd > start) {\n        selEnd = newEnd;\n      }\n\n      this.setSelectionRange(selStart, selEnd);\n    }\n  }\n\n  get cols() {\n    if (!this.hasAttributeNS(null, \"cols\")) {\n      return 20;\n    }\n    return parseInt(this.getAttributeNS(null, \"cols\"));\n  }\n\n  set cols(value) {\n    if (value <= 0) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n    this.setAttributeNS(null, \"cols\", String(value));\n  }\n\n  get rows() {\n    if (!this.hasAttributeNS(null, \"rows\")) {\n      return 2;\n    }\n    return parseInt(this.getAttributeNS(null, \"rows\"));\n  }\n\n  set rows(value) {\n    if (value <= 0) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n    this.setAttributeNS(null, \"rows\", String(value));\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.hasAttributeNS(null, \"readonly\");\n  }\n\n  get _mutable() {\n    return !isDisabled(this) && !this.hasAttributeNS(null, \"readonly\");\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#attr-textarea-required\n  get validity() {\n    if (!this._validity) {\n      const state = {\n        valueMissing: () => this.hasAttributeNS(null, \"required\") && this._mutable && this.value === \"\"\n      };\n\n      this._validity = ValidityState.createImpl(this._globalObject, [], {\n        element: this,\n        state\n      });\n    }\n    return this._validity;\n  }\n\n  [cloningSteps](copy, node) {\n    copy._dirtyValue = node._dirtyValue;\n    copy._rawValue = node._rawValue;\n  }\n}\n\nmixin(HTMLTextAreaElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLTextAreaElementImpl\n};\n\nfunction textareaWrappingTransformation(text, cols) {\n  let lineStart = 0;\n  let lineEnd = text.indexOf(\"\\n\");\n  if (lineEnd === -1) {\n    lineEnd = text.length;\n  }\n\n  while (lineStart < text.length) {\n    const lineLength = lineEnd - lineStart;\n    if (lineLength > cols) {\n      // split the line\n      lineEnd = lineStart + cols;\n      text = text.slice(0, lineEnd) + \"\\n\" + text.slice(lineEnd);\n    }\n    // move to next line\n    lineStart = lineEnd + 1; // step over the newline\n    lineEnd = text.indexOf(\"\\n\", lineStart);\n    if (lineEnd === -1) {\n      lineEnd = text.length;\n    }\n  }\n\n  return text;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}