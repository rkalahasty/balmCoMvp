{"ast":null,"code":"//.CommonJS\nvar CSSOM = {\n  CSSValue: require('./CSSValue').CSSValue\n}; ///CommonJS\n\n/**\n * @constructor\n * @see http://msdn.microsoft.com/en-us/library/ms537634(v=vs.85).aspx\n *\n */\n\nCSSOM.CSSValueExpression = function CSSValueExpression(token, idx) {\n  this._token = token;\n  this._idx = idx;\n};\n\nCSSOM.CSSValueExpression.prototype = new CSSOM.CSSValue();\nCSSOM.CSSValueExpression.prototype.constructor = CSSOM.CSSValueExpression;\n/**\n * parse css expression() value\n *\n * @return {Object}\n *         - error:\n *         or\n *         - idx:\n *         - expression:\n *\n * Example:\n *\n * .selector {\n *\t\tzoom: expression(documentElement.clientWidth > 1000 ? '1000px' : 'auto');\n * }\n */\n\nCSSOM.CSSValueExpression.prototype.parse = function () {\n  var token = this._token,\n      idx = this._idx;\n  var character = '',\n      expression = '',\n      error = '',\n      info,\n      paren = [];\n\n  for (;; ++idx) {\n    character = token.charAt(idx); // end of token\n\n    if (character === '') {\n      error = 'css expression error: unfinished expression!';\n      break;\n    }\n\n    switch (character) {\n      case '(':\n        paren.push(character);\n        expression += character;\n        break;\n\n      case ')':\n        paren.pop(character);\n        expression += character;\n        break;\n\n      case '/':\n        if (info = this._parseJSComment(token, idx)) {\n          // comment?\n          if (info.error) {\n            error = 'css expression error: unfinished comment in expression!';\n          } else {\n            idx = info.idx; // ignore the comment\n          }\n        } else if (info = this._parseJSRexExp(token, idx)) {\n          // regexp\n          idx = info.idx;\n          expression += info.text;\n        } else {\n          // other\n          expression += character;\n        }\n\n        break;\n\n      case \"'\":\n      case '\"':\n        info = this._parseJSString(token, idx, character);\n\n        if (info) {\n          // string\n          idx = info.idx;\n          expression += info.text;\n        } else {\n          expression += character;\n        }\n\n        break;\n\n      default:\n        expression += character;\n        break;\n    }\n\n    if (error) {\n      break;\n    } // end of expression\n\n\n    if (paren.length === 0) {\n      break;\n    }\n  }\n\n  var ret;\n\n  if (error) {\n    ret = {\n      error: error\n    };\n  } else {\n    ret = {\n      idx: idx,\n      expression: expression\n    };\n  }\n\n  return ret;\n};\n/**\n *\n * @return {Object|false}\n *          - idx:\n *          - text:\n *          or\n *          - error:\n *          or\n *          false\n *\n */\n\n\nCSSOM.CSSValueExpression.prototype._parseJSComment = function (token, idx) {\n  var nextChar = token.charAt(idx + 1),\n      text;\n\n  if (nextChar === '/' || nextChar === '*') {\n    var startIdx = idx,\n        endIdx,\n        commentEndChar;\n\n    if (nextChar === '/') {\n      // line comment\n      commentEndChar = '\\n';\n    } else if (nextChar === '*') {\n      // block comment\n      commentEndChar = '*/';\n    }\n\n    endIdx = token.indexOf(commentEndChar, startIdx + 1 + 1);\n\n    if (endIdx !== -1) {\n      endIdx = endIdx + commentEndChar.length - 1;\n      text = token.substring(idx, endIdx + 1);\n      return {\n        idx: endIdx,\n        text: text\n      };\n    } else {\n      var error = 'css expression error: unfinished comment in expression!';\n      return {\n        error: error\n      };\n    }\n  } else {\n    return false;\n  }\n};\n/**\n *\n * @return {Object|false}\n *\t\t\t\t\t- idx:\n *\t\t\t\t\t- text:\n *\t\t\t\t\tor \n *\t\t\t\t\tfalse\n *\n */\n\n\nCSSOM.CSSValueExpression.prototype._parseJSString = function (token, idx, sep) {\n  var endIdx = this._findMatchedIdx(token, idx, sep),\n      text;\n\n  if (endIdx === -1) {\n    return false;\n  } else {\n    text = token.substring(idx, endIdx + sep.length);\n    return {\n      idx: endIdx,\n      text: text\n    };\n  }\n};\n/**\n * parse regexp in css expression\n *\n * @return {Object|false}\n *\t\t\t\t- idx:\n *\t\t\t\t- regExp:\n *\t\t\t\tor \n *\t\t\t\tfalse\n */\n\n/*\n\nall legal RegExp\n \n/a/\n(/a/)\n[/a/]\n[12, /a/]\n\n!/a/\n\n+/a/\n-/a/\n* /a/\n/ /a/\n%/a/\n\n===/a/\n!==/a/\n==/a/\n!=/a/\n>/a/\n>=/a/\n</a/\n<=/a/\n\n&/a/\n|/a/\n^/a/\n~/a/\n<</a/\n>>/a/\n>>>/a/\n\n&&/a/\n||/a/\n?/a/\n=/a/\n,/a/\n\n\t\tdelete /a/\n\t\t\t\tin /a/\ninstanceof /a/\n\t\t\t\tnew /a/\n\t\ttypeof /a/\n\t\t\tvoid /a/\n\n*/\n\n\nCSSOM.CSSValueExpression.prototype._parseJSRexExp = function (token, idx) {\n  var before = token.substring(0, idx).replace(/\\s+$/, \"\"),\n      legalRegx = [/^$/, /\\($/, /\\[$/, /\\!$/, /\\+$/, /\\-$/, /\\*$/, /\\/\\s+/, /\\%$/, /\\=$/, /\\>$/, /<$/, /\\&$/, /\\|$/, /\\^$/, /\\~$/, /\\?$/, /\\,$/, /delete$/, /in$/, /instanceof$/, /new$/, /typeof$/, /void$/];\n  var isLegal = legalRegx.some(function (reg) {\n    return reg.test(before);\n  });\n\n  if (!isLegal) {\n    return false;\n  } else {\n    var sep = '/'; // same logic as string\n\n    return this._parseJSString(token, idx, sep);\n  }\n};\n/**\n *\n * find next sep(same line) index in `token`\n *\n * @return {Number}\n *\n */\n\n\nCSSOM.CSSValueExpression.prototype._findMatchedIdx = function (token, idx, sep) {\n  var startIdx = idx,\n      endIdx;\n  var NOT_FOUND = -1;\n\n  while (true) {\n    endIdx = token.indexOf(sep, startIdx + 1);\n\n    if (endIdx === -1) {\n      // not found\n      endIdx = NOT_FOUND;\n      break;\n    } else {\n      var text = token.substring(idx + 1, endIdx),\n          matched = text.match(/\\\\+$/);\n\n      if (!matched || matched[0] % 2 === 0) {\n        // not escaped\n        break;\n      } else {\n        startIdx = endIdx;\n      }\n    }\n  } // boundary must be in the same line(js sting or regexp)\n\n\n  var nextNewLineIdx = token.indexOf('\\n', idx + 1);\n\n  if (nextNewLineIdx < endIdx) {\n    endIdx = NOT_FOUND;\n  }\n\n  return endIdx;\n}; //.CommonJS\n\n\nexports.CSSValueExpression = CSSOM.CSSValueExpression; ///CommonJS","map":{"version":3,"names":["CSSOM","CSSValue","require","CSSValueExpression","token","idx","_token","_idx","prototype","constructor","parse","character","expression","error","info","paren","charAt","push","pop","_parseJSComment","_parseJSRexExp","text","_parseJSString","length","ret","nextChar","startIdx","endIdx","commentEndChar","indexOf","substring","sep","_findMatchedIdx","before","replace","legalRegx","isLegal","some","reg","test","NOT_FOUND","matched","match","nextNewLineIdx","exports"],"sources":["C:/Users/17033/balmco/node_modules/cssstyle/node_modules/cssom/lib/CSSValueExpression.js"],"sourcesContent":["//.CommonJS\nvar CSSOM = {\n\tCSSValue: require('./CSSValue').CSSValue\n};\n///CommonJS\n\n\n/**\n * @constructor\n * @see http://msdn.microsoft.com/en-us/library/ms537634(v=vs.85).aspx\n *\n */\nCSSOM.CSSValueExpression = function CSSValueExpression(token, idx) {\n\tthis._token = token;\n\tthis._idx = idx;\n};\n\nCSSOM.CSSValueExpression.prototype = new CSSOM.CSSValue();\nCSSOM.CSSValueExpression.prototype.constructor = CSSOM.CSSValueExpression;\n\n/**\n * parse css expression() value\n *\n * @return {Object}\n *         - error:\n *         or\n *         - idx:\n *         - expression:\n *\n * Example:\n *\n * .selector {\n *\t\tzoom: expression(documentElement.clientWidth > 1000 ? '1000px' : 'auto');\n * }\n */\nCSSOM.CSSValueExpression.prototype.parse = function() {\n\tvar token = this._token,\n\t\t\tidx = this._idx;\n\n\tvar character = '',\n\t\t\texpression = '',\n\t\t\terror = '',\n\t\t\tinfo,\n\t\t\tparen = [];\n\n\n\tfor (; ; ++idx) {\n\t\tcharacter = token.charAt(idx);\n\n\t\t// end of token\n\t\tif (character === '') {\n\t\t\terror = 'css expression error: unfinished expression!';\n\t\t\tbreak;\n\t\t}\n\n\t\tswitch(character) {\n\t\t\tcase '(':\n\t\t\t\tparen.push(character);\n\t\t\t\texpression += character;\n\t\t\t\tbreak;\n\n\t\t\tcase ')':\n\t\t\t\tparen.pop(character);\n\t\t\t\texpression += character;\n\t\t\t\tbreak;\n\n\t\t\tcase '/':\n\t\t\t\tif ((info = this._parseJSComment(token, idx))) { // comment?\n\t\t\t\t\tif (info.error) {\n\t\t\t\t\t\terror = 'css expression error: unfinished comment in expression!';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tidx = info.idx;\n\t\t\t\t\t\t// ignore the comment\n\t\t\t\t\t}\n\t\t\t\t} else if ((info = this._parseJSRexExp(token, idx))) { // regexp\n\t\t\t\t\tidx = info.idx;\n\t\t\t\t\texpression += info.text;\n\t\t\t\t} else { // other\n\t\t\t\t\texpression += character;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"'\":\n\t\t\tcase '\"':\n\t\t\t\tinfo = this._parseJSString(token, idx, character);\n\t\t\t\tif (info) { // string\n\t\t\t\t\tidx = info.idx;\n\t\t\t\t\texpression += info.text;\n\t\t\t\t} else {\n\t\t\t\t\texpression += character;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\texpression += character;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (error) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// end of expression\n\t\tif (paren.length === 0) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tvar ret;\n\tif (error) {\n\t\tret = {\n\t\t\terror: error\n\t\t};\n\t} else {\n\t\tret = {\n\t\t\tidx: idx,\n\t\t\texpression: expression\n\t\t};\n\t}\n\n\treturn ret;\n};\n\n\n/**\n *\n * @return {Object|false}\n *          - idx:\n *          - text:\n *          or\n *          - error:\n *          or\n *          false\n *\n */\nCSSOM.CSSValueExpression.prototype._parseJSComment = function(token, idx) {\n\tvar nextChar = token.charAt(idx + 1),\n\t\t\ttext;\n\n\tif (nextChar === '/' || nextChar === '*') {\n\t\tvar startIdx = idx,\n\t\t\t\tendIdx,\n\t\t\t\tcommentEndChar;\n\n\t\tif (nextChar === '/') { // line comment\n\t\t\tcommentEndChar = '\\n';\n\t\t} else if (nextChar === '*') { // block comment\n\t\t\tcommentEndChar = '*/';\n\t\t}\n\n\t\tendIdx = token.indexOf(commentEndChar, startIdx + 1 + 1);\n\t\tif (endIdx !== -1) {\n\t\t\tendIdx = endIdx + commentEndChar.length - 1;\n\t\t\ttext = token.substring(idx, endIdx + 1);\n\t\t\treturn {\n\t\t\t\tidx: endIdx,\n\t\t\t\ttext: text\n\t\t\t};\n\t\t} else {\n\t\t\tvar error = 'css expression error: unfinished comment in expression!';\n\t\t\treturn {\n\t\t\t\terror: error\n\t\t\t};\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n};\n\n\n/**\n *\n * @return {Object|false}\n *\t\t\t\t\t- idx:\n *\t\t\t\t\t- text:\n *\t\t\t\t\tor \n *\t\t\t\t\tfalse\n *\n */\nCSSOM.CSSValueExpression.prototype._parseJSString = function(token, idx, sep) {\n\tvar endIdx = this._findMatchedIdx(token, idx, sep),\n\t\t\ttext;\n\n\tif (endIdx === -1) {\n\t\treturn false;\n\t} else {\n\t\ttext = token.substring(idx, endIdx + sep.length);\n\n\t\treturn {\n\t\t\tidx: endIdx,\n\t\t\ttext: text\n\t\t};\n\t}\n};\n\n\n/**\n * parse regexp in css expression\n *\n * @return {Object|false}\n *\t\t\t\t- idx:\n *\t\t\t\t- regExp:\n *\t\t\t\tor \n *\t\t\t\tfalse\n */\n\n/*\n\nall legal RegExp\n \n/a/\n(/a/)\n[/a/]\n[12, /a/]\n\n!/a/\n\n+/a/\n-/a/\n* /a/\n/ /a/\n%/a/\n\n===/a/\n!==/a/\n==/a/\n!=/a/\n>/a/\n>=/a/\n</a/\n<=/a/\n\n&/a/\n|/a/\n^/a/\n~/a/\n<</a/\n>>/a/\n>>>/a/\n\n&&/a/\n||/a/\n?/a/\n=/a/\n,/a/\n\n\t\tdelete /a/\n\t\t\t\tin /a/\ninstanceof /a/\n\t\t\t\tnew /a/\n\t\ttypeof /a/\n\t\t\tvoid /a/\n\n*/\nCSSOM.CSSValueExpression.prototype._parseJSRexExp = function(token, idx) {\n\tvar before = token.substring(0, idx).replace(/\\s+$/, \"\"),\n\t\t\tlegalRegx = [\n\t\t\t\t/^$/,\n\t\t\t\t/\\($/,\n\t\t\t\t/\\[$/,\n\t\t\t\t/\\!$/,\n\t\t\t\t/\\+$/,\n\t\t\t\t/\\-$/,\n\t\t\t\t/\\*$/,\n\t\t\t\t/\\/\\s+/,\n\t\t\t\t/\\%$/,\n\t\t\t\t/\\=$/,\n\t\t\t\t/\\>$/,\n\t\t\t\t/<$/,\n\t\t\t\t/\\&$/,\n\t\t\t\t/\\|$/,\n\t\t\t\t/\\^$/,\n\t\t\t\t/\\~$/,\n\t\t\t\t/\\?$/,\n\t\t\t\t/\\,$/,\n\t\t\t\t/delete$/,\n\t\t\t\t/in$/,\n\t\t\t\t/instanceof$/,\n\t\t\t\t/new$/,\n\t\t\t\t/typeof$/,\n\t\t\t\t/void$/\n\t\t\t];\n\n\tvar isLegal = legalRegx.some(function(reg) {\n\t\treturn reg.test(before);\n\t});\n\n\tif (!isLegal) {\n\t\treturn false;\n\t} else {\n\t\tvar sep = '/';\n\n\t\t// same logic as string\n\t\treturn this._parseJSString(token, idx, sep);\n\t}\n};\n\n\n/**\n *\n * find next sep(same line) index in `token`\n *\n * @return {Number}\n *\n */\nCSSOM.CSSValueExpression.prototype._findMatchedIdx = function(token, idx, sep) {\n\tvar startIdx = idx,\n\t\t\tendIdx;\n\n\tvar NOT_FOUND = -1;\n\n\twhile(true) {\n\t\tendIdx = token.indexOf(sep, startIdx + 1);\n\n\t\tif (endIdx === -1) { // not found\n\t\t\tendIdx = NOT_FOUND;\n\t\t\tbreak;\n\t\t} else {\n\t\t\tvar text = token.substring(idx + 1, endIdx),\n\t\t\t\t\tmatched = text.match(/\\\\+$/);\n\t\t\tif (!matched || matched[0] % 2 === 0) { // not escaped\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tstartIdx = endIdx;\n\t\t\t}\n\t\t}\n\t}\n\n\t// boundary must be in the same line(js sting or regexp)\n\tvar nextNewLineIdx = token.indexOf('\\n', idx + 1);\n\tif (nextNewLineIdx < endIdx) {\n\t\tendIdx = NOT_FOUND;\n\t}\n\n\n\treturn endIdx;\n};\n\n\n\n\n//.CommonJS\nexports.CSSValueExpression = CSSOM.CSSValueExpression;\n///CommonJS\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}