{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst {\n  stripAndCollapseASCIIWhitespace\n} = require(\"../helpers/strings\");\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  HTML_NS,\n  SVG_NS\n} = require(\"../helpers/namespaces\");\n\nconst {\n  closest\n} = require(\"../helpers/traversal\");\n\nconst {\n  formOwner\n} = require(\"../helpers/form-controls\");\n\nclass HTMLOptionElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData); // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n\n    this._selectedness = false;\n    this._dirtyness = false;\n  }\n\n  _removeOtherSelectedness() {\n    // Remove the selectedness flag from all other options in this select\n    const select = this._selectNode;\n\n    if (select && !select.hasAttributeNS(null, \"multiple\")) {\n      for (const option of select.options) {\n        if (option !== this) {\n          option._selectedness = false;\n        }\n      }\n    }\n  }\n\n  _askForAReset() {\n    const select = this._selectNode;\n\n    if (select) {\n      select._askedForAReset();\n    }\n  }\n\n  _attrModified(name, value, oldValue) {\n    if (!this._dirtyness && name === \"selected\") {\n      this._selectedness = this.hasAttributeNS(null, \"selected\");\n\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n\n      this._askForAReset();\n    }\n\n    super._attrModified(name, value, oldValue);\n  }\n\n  get _selectNode() {\n    let select = domSymbolTree.parent(this);\n\n    if (!select) {\n      return null;\n    }\n\n    if (select.nodeName.toUpperCase() !== \"SELECT\") {\n      select = domSymbolTree.parent(select);\n\n      if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n        return null;\n      }\n    }\n\n    return select;\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get text() {\n    return stripAndCollapseASCIIWhitespace(childTextContentExcludingDescendantsOfScript(this));\n  }\n\n  set text(value) {\n    this.textContent = value;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-value\n\n\n  _getValue() {\n    if (this.hasAttributeNS(null, \"value\")) {\n      return this.getAttributeNS(null, \"value\");\n    }\n\n    return this.text;\n  }\n\n  get value() {\n    return this._getValue();\n  }\n\n  set value(value) {\n    this.setAttributeNS(null, \"value\", value);\n  }\n\n  get index() {\n    const select = closest(this, \"select\");\n\n    if (select === null) {\n      return 0;\n    }\n\n    return select.options.indexOf(this);\n  }\n\n  get selected() {\n    return this._selectedness;\n  }\n\n  set selected(s) {\n    this._dirtyness = true;\n    this._selectedness = Boolean(s);\n\n    if (this._selectedness) {\n      this._removeOtherSelectedness();\n    }\n\n    this._askForAReset();\n\n    this._modified();\n  }\n\n  get label() {\n    if (this.hasAttributeNS(null, \"label\")) {\n      return this.getAttributeNS(null, \"label\");\n    }\n\n    return this.text;\n  }\n\n  set label(value) {\n    this.setAttributeNS(null, \"label\", value);\n  }\n\n}\n\nfunction childTextContentExcludingDescendantsOfScript(root) {\n  let text = \"\";\n\n  for (const child of domSymbolTree.childrenIterator(root)) {\n    if (child._localName === \"script\" && (child._namespaceURI === HTML_NS || child._namespaceURI === SVG_NS)) {\n      continue;\n    }\n\n    if (child.nodeType === NODE_TYPE.TEXT_NODE || child.nodeType === NODE_TYPE.CDATA_SECTION_NODE) {\n      text += child.nodeValue;\n    } else {\n      text += childTextContentExcludingDescendantsOfScript(child);\n    }\n  }\n\n  return text;\n}\n\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};","map":{"version":3,"names":["HTMLElementImpl","require","implementation","NODE_TYPE","stripAndCollapseASCIIWhitespace","domSymbolTree","HTML_NS","SVG_NS","closest","formOwner","HTMLOptionElementImpl","constructor","globalObject","args","privateData","_selectedness","_dirtyness","_removeOtherSelectedness","select","_selectNode","hasAttributeNS","option","options","_askForAReset","_askedForAReset","_attrModified","name","value","oldValue","parent","nodeName","toUpperCase","form","text","childTextContentExcludingDescendantsOfScript","textContent","_getValue","getAttributeNS","setAttributeNS","index","indexOf","selected","s","Boolean","_modified","label","root","child","childrenIterator","_localName","_namespaceURI","nodeType","TEXT_NODE","CDATA_SECTION_NODE","nodeValue","module","exports"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOptionElement-impl.js"],"sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst NODE_TYPE = require(\"../node-type\");\nconst { stripAndCollapseASCIIWhitespace } = require(\"../helpers/strings\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { HTML_NS, SVG_NS } = require(\"../helpers/namespaces\");\nconst { closest } = require(\"../helpers/traversal\");\nconst { formOwner } = require(\"../helpers/form-controls\");\n\nclass HTMLOptionElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n    this._selectedness = false;\n    this._dirtyness = false;\n  }\n\n  _removeOtherSelectedness() {\n    // Remove the selectedness flag from all other options in this select\n    const select = this._selectNode;\n\n    if (select && !select.hasAttributeNS(null, \"multiple\")) {\n      for (const option of select.options) {\n        if (option !== this) {\n          option._selectedness = false;\n        }\n      }\n    }\n  }\n\n  _askForAReset() {\n    const select = this._selectNode;\n    if (select) {\n      select._askedForAReset();\n    }\n  }\n\n  _attrModified(name, value, oldValue) {\n    if (!this._dirtyness && name === \"selected\") {\n      this._selectedness = this.hasAttributeNS(null, \"selected\");\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n      this._askForAReset();\n    }\n    super._attrModified(name, value, oldValue);\n  }\n\n  get _selectNode() {\n    let select = domSymbolTree.parent(this);\n    if (!select) {\n      return null;\n    }\n\n    if (select.nodeName.toUpperCase() !== \"SELECT\") {\n      select = domSymbolTree.parent(select);\n      if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n        return null;\n      }\n    }\n    return select;\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get text() {\n    return stripAndCollapseASCIIWhitespace(childTextContentExcludingDescendantsOfScript(this));\n  }\n  set text(value) {\n    this.textContent = value;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-value\n  _getValue() {\n    if (this.hasAttributeNS(null, \"value\")) {\n      return this.getAttributeNS(null, \"value\");\n    }\n\n    return this.text;\n  }\n\n  get value() {\n    return this._getValue();\n  }\n  set value(value) {\n    this.setAttributeNS(null, \"value\", value);\n  }\n\n  get index() {\n    const select = closest(this, \"select\");\n    if (select === null) {\n      return 0;\n    }\n\n    return select.options.indexOf(this);\n  }\n\n  get selected() {\n    return this._selectedness;\n  }\n  set selected(s) {\n    this._dirtyness = true;\n    this._selectedness = Boolean(s);\n    if (this._selectedness) {\n      this._removeOtherSelectedness();\n    }\n    this._askForAReset();\n    this._modified();\n  }\n\n  get label() {\n    if (this.hasAttributeNS(null, \"label\")) {\n      return this.getAttributeNS(null, \"label\");\n    }\n\n    return this.text;\n  }\n  set label(value) {\n    this.setAttributeNS(null, \"label\", value);\n  }\n}\n\nfunction childTextContentExcludingDescendantsOfScript(root) {\n  let text = \"\";\n  for (const child of domSymbolTree.childrenIterator(root)) {\n    if (child._localName === \"script\" && (child._namespaceURI === HTML_NS || child._namespaceURI === SVG_NS)) {\n      continue;\n    }\n\n    if (child.nodeType === NODE_TYPE.TEXT_NODE || child.nodeType === NODE_TYPE.CDATA_SECTION_NODE) {\n      text += child.nodeValue;\n    } else {\n      text += childTextContentExcludingDescendantsOfScript(child);\n    }\n  }\n  return text;\n}\n\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAAP,CAA8BC,cAAtD;;AACA,MAAMC,SAAS,GAAGF,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAM;EAAEG;AAAF,IAAsCH,OAAO,CAAC,oBAAD,CAAnD;;AACA,MAAM;EAAEI;AAAF,IAAoBJ,OAAO,CAAC,+BAAD,CAAjC;;AACA,MAAM;EAAEK,OAAF;EAAWC;AAAX,IAAsBN,OAAO,CAAC,uBAAD,CAAnC;;AACA,MAAM;EAAEO;AAAF,IAAcP,OAAO,CAAC,sBAAD,CAA3B;;AACA,MAAM;EAAEQ;AAAF,IAAgBR,OAAO,CAAC,0BAAD,CAA7B;;AAEA,MAAMS,qBAAN,SAAoCV,eAApC,CAAoD;EAClDW,WAAW,CAACC,YAAD,EAAeC,IAAf,EAAqBC,WAArB,EAAkC;IAC3C,MAAMF,YAAN,EAAoBC,IAApB,EAA0BC,WAA1B,EAD2C,CAG3C;IACA;;IACA,KAAKC,aAAL,GAAqB,KAArB;IACA,KAAKC,UAAL,GAAkB,KAAlB;EACD;;EAEDC,wBAAwB,GAAG;IACzB;IACA,MAAMC,MAAM,GAAG,KAAKC,WAApB;;IAEA,IAAID,MAAM,IAAI,CAACA,MAAM,CAACE,cAAP,CAAsB,IAAtB,EAA4B,UAA5B,CAAf,EAAwD;MACtD,KAAK,MAAMC,MAAX,IAAqBH,MAAM,CAACI,OAA5B,EAAqC;QACnC,IAAID,MAAM,KAAK,IAAf,EAAqB;UACnBA,MAAM,CAACN,aAAP,GAAuB,KAAvB;QACD;MACF;IACF;EACF;;EAEDQ,aAAa,GAAG;IACd,MAAML,MAAM,GAAG,KAAKC,WAApB;;IACA,IAAID,MAAJ,EAAY;MACVA,MAAM,CAACM,eAAP;IACD;EACF;;EAEDC,aAAa,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,EAAwB;IACnC,IAAI,CAAC,KAAKZ,UAAN,IAAoBU,IAAI,KAAK,UAAjC,EAA6C;MAC3C,KAAKX,aAAL,GAAqB,KAAKK,cAAL,CAAoB,IAApB,EAA0B,UAA1B,CAArB;;MACA,IAAI,KAAKL,aAAT,EAAwB;QACtB,KAAKE,wBAAL;MACD;;MACD,KAAKM,aAAL;IACD;;IACD,MAAME,aAAN,CAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,QAAjC;EACD;;EAEc,IAAXT,WAAW,GAAG;IAChB,IAAID,MAAM,GAAGb,aAAa,CAACwB,MAAd,CAAqB,IAArB,CAAb;;IACA,IAAI,CAACX,MAAL,EAAa;MACX,OAAO,IAAP;IACD;;IAED,IAAIA,MAAM,CAACY,QAAP,CAAgBC,WAAhB,OAAkC,QAAtC,EAAgD;MAC9Cb,MAAM,GAAGb,aAAa,CAACwB,MAAd,CAAqBX,MAArB,CAAT;;MACA,IAAI,CAACA,MAAD,IAAWA,MAAM,CAACY,QAAP,CAAgBC,WAAhB,OAAkC,QAAjD,EAA2D;QACzD,OAAO,IAAP;MACD;IACF;;IACD,OAAOb,MAAP;EACD;;EAEO,IAAJc,IAAI,GAAG;IACT,OAAOvB,SAAS,CAAC,IAAD,CAAhB;EACD;;EAEO,IAAJwB,IAAI,GAAG;IACT,OAAO7B,+BAA+B,CAAC8B,4CAA4C,CAAC,IAAD,CAA7C,CAAtC;EACD;;EACO,IAAJD,IAAI,CAACN,KAAD,EAAQ;IACd,KAAKQ,WAAL,GAAmBR,KAAnB;EACD,CAjEiD,CAmElD;;;EACAS,SAAS,GAAG;IACV,IAAI,KAAKhB,cAAL,CAAoB,IAApB,EAA0B,OAA1B,CAAJ,EAAwC;MACtC,OAAO,KAAKiB,cAAL,CAAoB,IAApB,EAA0B,OAA1B,CAAP;IACD;;IAED,OAAO,KAAKJ,IAAZ;EACD;;EAEQ,IAALN,KAAK,GAAG;IACV,OAAO,KAAKS,SAAL,EAAP;EACD;;EACQ,IAALT,KAAK,CAACA,KAAD,EAAQ;IACf,KAAKW,cAAL,CAAoB,IAApB,EAA0B,OAA1B,EAAmCX,KAAnC;EACD;;EAEQ,IAALY,KAAK,GAAG;IACV,MAAMrB,MAAM,GAAGV,OAAO,CAAC,IAAD,EAAO,QAAP,CAAtB;;IACA,IAAIU,MAAM,KAAK,IAAf,EAAqB;MACnB,OAAO,CAAP;IACD;;IAED,OAAOA,MAAM,CAACI,OAAP,CAAekB,OAAf,CAAuB,IAAvB,CAAP;EACD;;EAEW,IAARC,QAAQ,GAAG;IACb,OAAO,KAAK1B,aAAZ;EACD;;EACW,IAAR0B,QAAQ,CAACC,CAAD,EAAI;IACd,KAAK1B,UAAL,GAAkB,IAAlB;IACA,KAAKD,aAAL,GAAqB4B,OAAO,CAACD,CAAD,CAA5B;;IACA,IAAI,KAAK3B,aAAT,EAAwB;MACtB,KAAKE,wBAAL;IACD;;IACD,KAAKM,aAAL;;IACA,KAAKqB,SAAL;EACD;;EAEQ,IAALC,KAAK,GAAG;IACV,IAAI,KAAKzB,cAAL,CAAoB,IAApB,EAA0B,OAA1B,CAAJ,EAAwC;MACtC,OAAO,KAAKiB,cAAL,CAAoB,IAApB,EAA0B,OAA1B,CAAP;IACD;;IAED,OAAO,KAAKJ,IAAZ;EACD;;EACQ,IAALY,KAAK,CAAClB,KAAD,EAAQ;IACf,KAAKW,cAAL,CAAoB,IAApB,EAA0B,OAA1B,EAAmCX,KAAnC;EACD;;AAlHiD;;AAqHpD,SAASO,4CAAT,CAAsDY,IAAtD,EAA4D;EAC1D,IAAIb,IAAI,GAAG,EAAX;;EACA,KAAK,MAAMc,KAAX,IAAoB1C,aAAa,CAAC2C,gBAAd,CAA+BF,IAA/B,CAApB,EAA0D;IACxD,IAAIC,KAAK,CAACE,UAAN,KAAqB,QAArB,KAAkCF,KAAK,CAACG,aAAN,KAAwB5C,OAAxB,IAAmCyC,KAAK,CAACG,aAAN,KAAwB3C,MAA7F,CAAJ,EAA0G;MACxG;IACD;;IAED,IAAIwC,KAAK,CAACI,QAAN,KAAmBhD,SAAS,CAACiD,SAA7B,IAA0CL,KAAK,CAACI,QAAN,KAAmBhD,SAAS,CAACkD,kBAA3E,EAA+F;MAC7FpB,IAAI,IAAIc,KAAK,CAACO,SAAd;IACD,CAFD,MAEO;MACLrB,IAAI,IAAIC,4CAA4C,CAACa,KAAD,CAApD;IACD;EACF;;EACD,OAAOd,IAAP;AACD;;AAEDsB,MAAM,CAACC,OAAP,GAAiB;EACftD,cAAc,EAAEQ;AADD,CAAjB"},"metadata":{},"sourceType":"script"}