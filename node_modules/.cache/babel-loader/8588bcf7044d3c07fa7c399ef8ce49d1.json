{"ast":null,"code":"\"use strict\";\n\nconst SlotableMixinImpl = require(\"./Slotable-impl\").implementation;\n\nconst CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst {\n  mixin\n} = require(\"../../utils\"); // https://dom.spec.whatwg.org/#text\n\n\nclass TextImpl extends CharacterDataImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, {\n      data: args[0],\n      ownerDocument: idlUtils.implForWrapper(globalObject._document),\n      ...privateData\n    });\n\n    this._initSlotableMixin();\n\n    this.nodeType = NODE_TYPE.TEXT_NODE;\n  } // https://dom.spec.whatwg.org/#dom-text-splittext\n  // https://dom.spec.whatwg.org/#concept-text-split\n\n\n  splitText(offset) {\n    const {\n      length\n    } = this;\n\n    if (offset > length) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    const count = length - offset;\n    const newData = this.substringData(offset, count);\n\n    const newNode = this._ownerDocument.createTextNode(newData);\n\n    const parent = domSymbolTree.parent(this);\n\n    if (parent !== null) {\n      parent._insert(newNode, this.nextSibling);\n\n      for (const range of this._referencedRanges) {\n        const {\n          _start,\n          _end\n        } = range;\n\n        if (_start.node === this && _start.offset > offset) {\n          range._setLiveRangeStart(newNode, _start.offset - offset);\n        }\n\n        if (_end.node === this && _end.offset > offset) {\n          range._setLiveRangeEnd(newNode, _end.offset - offset);\n        }\n      }\n\n      const nodeIndex = domSymbolTree.index(this);\n\n      for (const range of parent._referencedRanges) {\n        const {\n          _start,\n          _end\n        } = range;\n\n        if (_start.node === parent && _start.offset === nodeIndex + 1) {\n          range._setLiveRangeStart(parent, _start.offset + 1);\n        }\n\n        if (_end.node === parent && _end.offset === nodeIndex + 1) {\n          range._setLiveRangeEnd(parent, _end.offset + 1);\n        }\n      }\n    }\n\n    this.replaceData(offset, count, \"\");\n    return newNode;\n  } // https://dom.spec.whatwg.org/#dom-text-wholetext\n\n\n  get wholeText() {\n    let wholeText = this.textContent;\n    let next;\n    let current = this;\n\n    while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText = next.textContent + wholeText;\n      current = next;\n    }\n\n    current = this;\n\n    while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText += next.textContent;\n      current = next;\n    }\n\n    return wholeText;\n  }\n\n}\n\nmixin(TextImpl.prototype, SlotableMixinImpl.prototype);\nmodule.exports = {\n  implementation: TextImpl\n};","map":{"version":3,"names":["SlotableMixinImpl","require","implementation","CharacterDataImpl","idlUtils","domSymbolTree","DOMException","NODE_TYPE","mixin","TextImpl","constructor","globalObject","args","privateData","data","ownerDocument","implForWrapper","_document","_initSlotableMixin","nodeType","TEXT_NODE","splitText","offset","length","create","_globalObject","count","newData","substringData","newNode","_ownerDocument","createTextNode","parent","_insert","nextSibling","range","_referencedRanges","_start","_end","node","_setLiveRangeStart","_setLiveRangeEnd","nodeIndex","index","replaceData","wholeText","textContent","next","current","previousSibling","prototype","module","exports"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/nodes/Text-impl.js"],"sourcesContent":["\"use strict\";\nconst SlotableMixinImpl = require(\"./Slotable-impl\").implementation;\nconst CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\nconst idlUtils = require(\"../generated/utils\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst NODE_TYPE = require(\"../node-type\");\nconst { mixin } = require(\"../../utils\");\n\n// https://dom.spec.whatwg.org/#text\nclass TextImpl extends CharacterDataImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, {\n      data: args[0],\n      ownerDocument: idlUtils.implForWrapper(globalObject._document),\n      ...privateData\n    });\n\n    this._initSlotableMixin();\n\n    this.nodeType = NODE_TYPE.TEXT_NODE;\n  }\n\n  // https://dom.spec.whatwg.org/#dom-text-splittext\n  // https://dom.spec.whatwg.org/#concept-text-split\n  splitText(offset) {\n    const { length } = this;\n\n    if (offset > length) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    const count = length - offset;\n    const newData = this.substringData(offset, count);\n\n    const newNode = this._ownerDocument.createTextNode(newData);\n\n    const parent = domSymbolTree.parent(this);\n\n    if (parent !== null) {\n      parent._insert(newNode, this.nextSibling);\n\n      for (const range of this._referencedRanges) {\n        const { _start, _end } = range;\n\n        if (_start.node === this && _start.offset > offset) {\n          range._setLiveRangeStart(newNode, _start.offset - offset);\n        }\n\n        if (_end.node === this && _end.offset > offset) {\n          range._setLiveRangeEnd(newNode, _end.offset - offset);\n        }\n      }\n\n      const nodeIndex = domSymbolTree.index(this);\n      for (const range of parent._referencedRanges) {\n        const { _start, _end } = range;\n\n        if (_start.node === parent && _start.offset === nodeIndex + 1) {\n          range._setLiveRangeStart(parent, _start.offset + 1);\n        }\n\n        if (_end.node === parent && _end.offset === nodeIndex + 1) {\n          range._setLiveRangeEnd(parent, _end.offset + 1);\n        }\n      }\n    }\n\n    this.replaceData(offset, count, \"\");\n\n    return newNode;\n  }\n\n  // https://dom.spec.whatwg.org/#dom-text-wholetext\n  get wholeText() {\n    let wholeText = this.textContent;\n    let next;\n    let current = this;\n    while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText = next.textContent + wholeText;\n      current = next;\n    }\n    current = this;\n    while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText += next.textContent;\n      current = next;\n    }\n    return wholeText;\n  }\n}\n\nmixin(TextImpl.prototype, SlotableMixinImpl.prototype);\n\nmodule.exports = {\n  implementation: TextImpl\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}