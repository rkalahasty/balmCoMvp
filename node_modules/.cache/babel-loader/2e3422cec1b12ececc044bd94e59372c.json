{"ast":null,"code":"\"use strict\";\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst UIEventInit = require(\"../generated/UIEventInit\");\n\nconst EventImpl = require(\"./Event-impl\").implementation; // Until webidl2js gains support for checking for Window, this would have to do.\n\n\nfunction isWindow(val) {\n  if (typeof val !== \"object\") {\n    return false;\n  }\n\n  const wrapper = idlUtils.wrapperForImpl(val);\n\n  if (typeof wrapper === \"object\") {\n    return wrapper === wrapper._globalProxy;\n  } // `val` may be either impl or wrapper currently, because webidl2js currently unwraps Window objects (and their global\n  // proxies) to their underlying EventTargetImpl during conversion, which is not what we want. But at the same time,\n  // some internal usage call this constructor with the actual global proxy.\n\n\n  return isWindow(idlUtils.implForWrapper(val));\n}\n\nclass UIEventImpl extends EventImpl {\n  constructor(globalObject, args, privateData) {\n    const eventInitDict = args[1]; // undefined check included so that we can omit the property in internal usage.\n\n    if (eventInitDict && eventInitDict.view !== null && eventInitDict.view !== undefined) {\n      if (!isWindow(eventInitDict.view)) {\n        throw new TypeError(`Failed to construct '${new.target.name.replace(/Impl$/, \"\")}': member view is not of ` + \"type Window.\");\n      }\n    }\n\n    super(globalObject, args, privateData);\n  }\n\n  initUIEvent(type, bubbles, cancelable, view, detail) {\n    if (view !== null) {\n      if (!isWindow(view)) {\n        throw new TypeError(`Failed to execute 'initUIEvent' on '${this.constructor.name.replace(/Impl$/, \"\")}': ` + \"parameter 4 is not of type 'Window'.\");\n      }\n    }\n\n    if (this._dispatchFlag) {\n      return;\n    }\n\n    this.initEvent(type, bubbles, cancelable);\n    this.view = view;\n    this.detail = detail;\n  }\n\n}\n\nUIEventImpl.defaultInit = UIEventInit.convert(undefined);\nmodule.exports = {\n  implementation: UIEventImpl\n};","map":{"version":3,"names":["idlUtils","require","UIEventInit","EventImpl","implementation","isWindow","val","wrapper","wrapperForImpl","_globalProxy","implForWrapper","UIEventImpl","constructor","globalObject","args","privateData","eventInitDict","view","undefined","TypeError","new","target","name","replace","initUIEvent","type","bubbles","cancelable","detail","_dispatchFlag","initEvent","defaultInit","convert","module","exports"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/events/UIEvent-impl.js"],"sourcesContent":["\"use strict\";\n\nconst idlUtils = require(\"../generated/utils\");\nconst UIEventInit = require(\"../generated/UIEventInit\");\nconst EventImpl = require(\"./Event-impl\").implementation;\n\n// Until webidl2js gains support for checking for Window, this would have to do.\nfunction isWindow(val) {\n  if (typeof val !== \"object\") {\n    return false;\n  }\n  const wrapper = idlUtils.wrapperForImpl(val);\n  if (typeof wrapper === \"object\") {\n    return wrapper === wrapper._globalProxy;\n  }\n\n  // `val` may be either impl or wrapper currently, because webidl2js currently unwraps Window objects (and their global\n  // proxies) to their underlying EventTargetImpl during conversion, which is not what we want. But at the same time,\n  // some internal usage call this constructor with the actual global proxy.\n  return isWindow(idlUtils.implForWrapper(val));\n}\n\nclass UIEventImpl extends EventImpl {\n  constructor(globalObject, args, privateData) {\n    const eventInitDict = args[1];\n\n    // undefined check included so that we can omit the property in internal usage.\n    if (eventInitDict && eventInitDict.view !== null && eventInitDict.view !== undefined) {\n      if (!isWindow(eventInitDict.view)) {\n        throw new TypeError(`Failed to construct '${new.target.name.replace(/Impl$/, \"\")}': member view is not of ` +\n                            \"type Window.\");\n      }\n    }\n\n    super(globalObject, args, privateData);\n  }\n\n  initUIEvent(type, bubbles, cancelable, view, detail) {\n    if (view !== null) {\n      if (!isWindow(view)) {\n        throw new TypeError(`Failed to execute 'initUIEvent' on '${this.constructor.name.replace(/Impl$/, \"\")}': ` +\n                            \"parameter 4 is not of type 'Window'.\");\n      }\n    }\n\n    if (this._dispatchFlag) {\n      return;\n    }\n\n    this.initEvent(type, bubbles, cancelable);\n    this.view = view;\n    this.detail = detail;\n  }\n}\nUIEventImpl.defaultInit = UIEventInit.convert(undefined);\n\nmodule.exports = {\n  implementation: UIEventImpl\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,0BAAD,CAA3B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,cAAD,CAAP,CAAwBG,cAA1C,C,CAEA;;;AACA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;EACrB,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;IAC3B,OAAO,KAAP;EACD;;EACD,MAAMC,OAAO,GAAGP,QAAQ,CAACQ,cAAT,CAAwBF,GAAxB,CAAhB;;EACA,IAAI,OAAOC,OAAP,KAAmB,QAAvB,EAAiC;IAC/B,OAAOA,OAAO,KAAKA,OAAO,CAACE,YAA3B;EACD,CAPoB,CASrB;EACA;EACA;;;EACA,OAAOJ,QAAQ,CAACL,QAAQ,CAACU,cAAT,CAAwBJ,GAAxB,CAAD,CAAf;AACD;;AAED,MAAMK,WAAN,SAA0BR,SAA1B,CAAoC;EAClCS,WAAW,CAACC,YAAD,EAAeC,IAAf,EAAqBC,WAArB,EAAkC;IAC3C,MAAMC,aAAa,GAAGF,IAAI,CAAC,CAAD,CAA1B,CAD2C,CAG3C;;IACA,IAAIE,aAAa,IAAIA,aAAa,CAACC,IAAd,KAAuB,IAAxC,IAAgDD,aAAa,CAACC,IAAd,KAAuBC,SAA3E,EAAsF;MACpF,IAAI,CAACb,QAAQ,CAACW,aAAa,CAACC,IAAf,CAAb,EAAmC;QACjC,MAAM,IAAIE,SAAJ,CAAe,wBAAuBC,GAAG,CAACC,MAAJ,CAAWC,IAAX,CAAgBC,OAAhB,CAAwB,OAAxB,EAAiC,EAAjC,CAAqC,2BAA7D,GACA,cADd,CAAN;MAED;IACF;;IAED,MAAMV,YAAN,EAAoBC,IAApB,EAA0BC,WAA1B;EACD;;EAEDS,WAAW,CAACC,IAAD,EAAOC,OAAP,EAAgBC,UAAhB,EAA4BV,IAA5B,EAAkCW,MAAlC,EAA0C;IACnD,IAAIX,IAAI,KAAK,IAAb,EAAmB;MACjB,IAAI,CAACZ,QAAQ,CAACY,IAAD,CAAb,EAAqB;QACnB,MAAM,IAAIE,SAAJ,CAAe,uCAAsC,KAAKP,WAAL,CAAiBU,IAAjB,CAAsBC,OAAtB,CAA8B,OAA9B,EAAuC,EAAvC,CAA2C,KAAlF,GACA,sCADd,CAAN;MAED;IACF;;IAED,IAAI,KAAKM,aAAT,EAAwB;MACtB;IACD;;IAED,KAAKC,SAAL,CAAeL,IAAf,EAAqBC,OAArB,EAA8BC,UAA9B;IACA,KAAKV,IAAL,GAAYA,IAAZ;IACA,KAAKW,MAAL,GAAcA,MAAd;EACD;;AA9BiC;;AAgCpCjB,WAAW,CAACoB,WAAZ,GAA0B7B,WAAW,CAAC8B,OAAZ,CAAoBd,SAApB,CAA1B;AAEAe,MAAM,CAACC,OAAP,GAAiB;EACf9B,cAAc,EAAEO;AADD,CAAjB"},"metadata":{},"sourceType":"script"}