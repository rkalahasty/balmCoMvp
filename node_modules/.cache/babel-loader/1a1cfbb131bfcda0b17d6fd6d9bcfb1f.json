{"ast":null,"code":"\"use strict\";\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  nodeRoot,\n  isFollowing,\n  isInclusiveAncestor\n} = require(\"../helpers/node\"); // Returns 0 if equal, +1 for after and -1 for before\n// https://dom.spec.whatwg.org/#concept-range-bp-after\n\n\nfunction compareBoundaryPointsPosition(bpA, bpB) {\n  const {\n    node: nodeA,\n    offset: offsetA\n  } = bpA;\n  const {\n    node: nodeB,\n    offset: offsetB\n  } = bpB;\n\n  if (nodeRoot(nodeA) !== nodeRoot(nodeB)) {\n    throw new Error(`Internal Error: Boundary points should have the same root!`);\n  }\n\n  if (nodeA === nodeB) {\n    if (offsetA === offsetB) {\n      return 0;\n    } else if (offsetA < offsetB) {\n      return -1;\n    }\n\n    return 1;\n  }\n\n  if (isFollowing(nodeA, nodeB)) {\n    return compareBoundaryPointsPosition(bpB, bpA) === -1 ? 1 : -1;\n  }\n\n  if (isInclusiveAncestor(nodeA, nodeB)) {\n    let child = nodeB;\n\n    while (domSymbolTree.parent(child) !== nodeA) {\n      child = domSymbolTree.parent(child);\n    }\n\n    if (domSymbolTree.index(child) < offsetA) {\n      return 1;\n    }\n  }\n\n  return -1;\n}\n\nmodule.exports = {\n  compareBoundaryPointsPosition\n};","map":{"version":3,"names":["domSymbolTree","require","nodeRoot","isFollowing","isInclusiveAncestor","compareBoundaryPointsPosition","bpA","bpB","node","nodeA","offset","offsetA","nodeB","offsetB","Error","child","parent","index","module","exports"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/range/boundary-point.js"],"sourcesContent":["\"use strict\";\n\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { nodeRoot, isFollowing, isInclusiveAncestor } = require(\"../helpers/node\");\n\n// Returns 0 if equal, +1 for after and -1 for before\n// https://dom.spec.whatwg.org/#concept-range-bp-after\nfunction compareBoundaryPointsPosition(bpA, bpB) {\n  const { node: nodeA, offset: offsetA } = bpA;\n  const { node: nodeB, offset: offsetB } = bpB;\n\n  if (nodeRoot(nodeA) !== nodeRoot(nodeB)) {\n    throw new Error(`Internal Error: Boundary points should have the same root!`);\n  }\n\n  if (nodeA === nodeB) {\n    if (offsetA === offsetB) {\n      return 0;\n    } else if (offsetA < offsetB) {\n      return -1;\n    }\n\n    return 1;\n  }\n\n  if (isFollowing(nodeA, nodeB)) {\n    return compareBoundaryPointsPosition(bpB, bpA) === -1 ? 1 : -1;\n  }\n\n  if (isInclusiveAncestor(nodeA, nodeB)) {\n    let child = nodeB;\n\n    while (domSymbolTree.parent(child) !== nodeA) {\n      child = domSymbolTree.parent(child);\n    }\n\n    if (domSymbolTree.index(child) < offsetA) {\n      return 1;\n    }\n  }\n\n  return -1;\n}\n\nmodule.exports = {\n  compareBoundaryPointsPosition\n};\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAoBC,OAAO,CAAC,+BAAD,CAAjC;;AACA,MAAM;EAAEC,QAAF;EAAYC,WAAZ;EAAyBC;AAAzB,IAAiDH,OAAO,CAAC,iBAAD,CAA9D,C,CAEA;AACA;;;AACA,SAASI,6BAAT,CAAuCC,GAAvC,EAA4CC,GAA5C,EAAiD;EAC/C,MAAM;IAAEC,IAAI,EAAEC,KAAR;IAAeC,MAAM,EAAEC;EAAvB,IAAmCL,GAAzC;EACA,MAAM;IAAEE,IAAI,EAAEI,KAAR;IAAeF,MAAM,EAAEG;EAAvB,IAAmCN,GAAzC;;EAEA,IAAIL,QAAQ,CAACO,KAAD,CAAR,KAAoBP,QAAQ,CAACU,KAAD,CAAhC,EAAyC;IACvC,MAAM,IAAIE,KAAJ,CAAW,4DAAX,CAAN;EACD;;EAED,IAAIL,KAAK,KAAKG,KAAd,EAAqB;IACnB,IAAID,OAAO,KAAKE,OAAhB,EAAyB;MACvB,OAAO,CAAP;IACD,CAFD,MAEO,IAAIF,OAAO,GAAGE,OAAd,EAAuB;MAC5B,OAAO,CAAC,CAAR;IACD;;IAED,OAAO,CAAP;EACD;;EAED,IAAIV,WAAW,CAACM,KAAD,EAAQG,KAAR,CAAf,EAA+B;IAC7B,OAAOP,6BAA6B,CAACE,GAAD,EAAMD,GAAN,CAA7B,KAA4C,CAAC,CAA7C,GAAiD,CAAjD,GAAqD,CAAC,CAA7D;EACD;;EAED,IAAIF,mBAAmB,CAACK,KAAD,EAAQG,KAAR,CAAvB,EAAuC;IACrC,IAAIG,KAAK,GAAGH,KAAZ;;IAEA,OAAOZ,aAAa,CAACgB,MAAd,CAAqBD,KAArB,MAAgCN,KAAvC,EAA8C;MAC5CM,KAAK,GAAGf,aAAa,CAACgB,MAAd,CAAqBD,KAArB,CAAR;IACD;;IAED,IAAIf,aAAa,CAACiB,KAAd,CAAoBF,KAApB,IAA6BJ,OAAjC,EAA0C;MACxC,OAAO,CAAP;IACD;EACF;;EAED,OAAO,CAAC,CAAR;AACD;;AAEDO,MAAM,CAACC,OAAP,GAAiB;EACfd;AADe,CAAjB"},"metadata":{},"sourceType":"script"}