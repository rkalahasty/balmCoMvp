{"ast":null,"code":"\"use strict\";\n\nconst whatwgEncoding = require(\"whatwg-encoding\"); // https://html.spec.whatwg.org/#encoding-sniffing-algorithm\n\n\nmodule.exports = function (buffer) {\n  let {\n    transportLayerEncodingLabel,\n    defaultEncoding = \"windows-1252\"\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let encoding = whatwgEncoding.getBOMEncoding(buffer); // see https://github.com/whatwg/html/issues/1910\n\n  if (encoding === null && transportLayerEncodingLabel !== undefined) {\n    encoding = whatwgEncoding.labelToName(transportLayerEncodingLabel);\n  }\n\n  if (encoding === null) {\n    encoding = prescanMetaCharset(buffer);\n  }\n\n  if (encoding === null) {\n    encoding = defaultEncoding;\n  }\n\n  return encoding;\n}; // https://html.spec.whatwg.org/multipage/syntax.html#prescan-a-byte-stream-to-determine-its-encoding\n\n\nfunction prescanMetaCharset(buffer) {\n  const l = Math.min(buffer.length, 1024);\n\n  for (let i = 0; i < l; i++) {\n    let c = buffer[i];\n\n    if (c === 0x3C) {\n      // \"<\"\n      const c1 = buffer[i + 1];\n      const c2 = buffer[i + 2];\n      const c3 = buffer[i + 3];\n      const c4 = buffer[i + 4];\n      const c5 = buffer[i + 5]; // !-- (comment start)\n\n      if (c1 === 0x21 && c2 === 0x2D && c3 === 0x2D) {\n        i += 4;\n\n        for (; i < l; i++) {\n          c = buffer[i];\n          const cMinus1 = buffer[i - 1];\n          const cMinus2 = buffer[i - 2]; // --> (comment end)\n\n          if (c === 0x3E && cMinus1 === 0x2D && cMinus2 === 0x2D) {\n            break;\n          }\n        }\n      } else if ((c1 === 0x4D || c1 === 0x6D) && (c2 === 0x45 || c2 === 0x65) && (c3 === 0x54 || c3 === 0x74) && (c4 === 0x41 || c4 === 0x61) && (isSpaceCharacter(c5) || c5 === 0x2F)) {\n        // \"meta\" + space or /\n        i += 6;\n        const attributeList = new Set();\n        let gotPragma = false;\n        let needPragma = null;\n        let charset = null;\n        let attrRes;\n\n        do {\n          attrRes = getAttribute(buffer, i, l);\n\n          if (attrRes.attr && !attributeList.has(attrRes.attr.name)) {\n            attributeList.add(attrRes.attr.name);\n\n            if (attrRes.attr.name === \"http-equiv\") {\n              gotPragma = attrRes.attr.value === \"content-type\";\n            } else if (attrRes.attr.name === \"content\" && !charset) {\n              charset = extractCharacterEncodingFromMeta(attrRes.attr.value);\n\n              if (charset !== null) {\n                needPragma = true;\n              }\n            } else if (attrRes.attr.name === \"charset\") {\n              charset = whatwgEncoding.labelToName(attrRes.attr.value);\n              needPragma = false;\n            }\n          }\n\n          i = attrRes.i;\n        } while (attrRes.attr);\n\n        if (needPragma === null) {\n          continue;\n        }\n\n        if (needPragma === true && gotPragma === false) {\n          continue;\n        }\n\n        if (charset === null) {\n          continue;\n        }\n\n        if (charset === \"UTF-16LE\" || charset === \"UTF-16BE\") {\n          charset = \"UTF-8\";\n        }\n\n        if (charset === \"x-user-defined\") {\n          charset = \"windows-1252\";\n        }\n\n        return charset;\n      } else if (c1 >= 0x41 && c1 <= 0x5A || c1 >= 0x61 && c1 <= 0x7A) {\n        // a-z or A-Z\n        for (i += 2; i < l; i++) {\n          c = buffer[i]; // space or >\n\n          if (isSpaceCharacter(c) || c === 0x3E) {\n            break;\n          }\n        }\n\n        let attrRes;\n\n        do {\n          attrRes = getAttribute(buffer, i, l);\n          i = attrRes.i;\n        } while (attrRes.attr);\n      } else if (c1 === 0x21 || c1 === 0x2F || c1 === 0x3F) {\n        // ! or / or ?\n        for (i += 2; i < l; i++) {\n          c = buffer[i]; // >\n\n          if (c === 0x3E) {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  return null;\n} // https://html.spec.whatwg.org/multipage/syntax.html#concept-get-attributes-when-sniffing\n\n\nfunction getAttribute(buffer, i, l) {\n  for (; i < l; i++) {\n    let c = buffer[i]; // space or /\n\n    if (isSpaceCharacter(c) || c === 0x2F) {\n      continue;\n    } // \">\"\n\n\n    if (c === 0x3E) {\n      break;\n    }\n\n    let name = \"\";\n    let value = \"\";\n\n    nameLoop: for (; i < l; i++) {\n      c = buffer[i]; // \"=\"\n\n      if (c === 0x3D && name !== \"\") {\n        i++;\n        break;\n      } // space\n\n\n      if (isSpaceCharacter(c)) {\n        for (i++; i < l; i++) {\n          c = buffer[i]; // space\n\n          if (isSpaceCharacter(c)) {\n            continue;\n          } // not \"=\"\n\n\n          if (c !== 0x3D) {\n            return {\n              attr: {\n                name,\n                value\n              },\n              i\n            };\n          }\n\n          i++;\n          break nameLoop;\n        }\n\n        break;\n      } // / or >\n\n\n      if (c === 0x2F || c === 0x3E) {\n        return {\n          attr: {\n            name,\n            value\n          },\n          i\n        };\n      } // A-Z\n\n\n      if (c >= 0x41 && c <= 0x5A) {\n        name += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        name += String.fromCharCode(c);\n      }\n    }\n\n    c = buffer[i]; // space\n\n    if (isSpaceCharacter(c)) {\n      for (i++; i < l; i++) {\n        c = buffer[i]; // space\n\n        if (isSpaceCharacter(c)) {\n          continue;\n        } else {\n          break;\n        }\n      }\n    } // \" or '\n\n\n    if (c === 0x22 || c === 0x27) {\n      const quote = c;\n\n      for (i++; i < l; i++) {\n        c = buffer[i];\n\n        if (c === quote) {\n          i++;\n          return {\n            attr: {\n              name,\n              value\n            },\n            i\n          };\n        } // A-Z\n\n\n        if (c >= 0x41 && c <= 0x5A) {\n          value += String.fromCharCode(c + 0x20); // lowercase\n        } else {\n          value += String.fromCharCode(c);\n        }\n      }\n    } // >\n\n\n    if (c === 0x3E) {\n      return {\n        attr: {\n          name,\n          value\n        },\n        i\n      };\n    } // A-Z\n\n\n    if (c >= 0x41 && c <= 0x5A) {\n      value += String.fromCharCode(c + 0x20); // lowercase\n    } else {\n      value += String.fromCharCode(c);\n    }\n\n    for (i++; i < l; i++) {\n      c = buffer[i]; // space or >\n\n      if (isSpaceCharacter(c) || c === 0x3E) {\n        return {\n          attr: {\n            name,\n            value\n          },\n          i\n        };\n      } // A-Z\n\n\n      if (c >= 0x41 && c <= 0x5A) {\n        value += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        value += String.fromCharCode(c);\n      }\n    }\n  }\n\n  return {\n    i\n  };\n}\n\nfunction extractCharacterEncodingFromMeta(string) {\n  let position = 0;\n\n  while (true) {\n    const indexOfCharset = string.substring(position).search(/charset/i);\n\n    if (indexOfCharset === -1) {\n      return null;\n    }\n\n    let subPosition = position + indexOfCharset + \"charset\".length;\n\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n\n    if (string[subPosition] !== \"=\") {\n      position = subPosition - 1;\n      continue;\n    }\n\n    ++subPosition;\n\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n\n    position = subPosition;\n    break;\n  }\n\n  if (string[position] === \"\\\"\" || string[position] === \"'\") {\n    const nextIndex = string.indexOf(string[position], position + 1);\n\n    if (nextIndex !== -1) {\n      return whatwgEncoding.labelToName(string.substring(position + 1, nextIndex));\n    } // It is an unmatched quotation mark\n\n\n    return null;\n  }\n\n  if (string.length === position + 1) {\n    return null;\n  }\n\n  const indexOfASCIIWhitespaceOrSemicolon = string.substring(position + 1).search(/\\x09|\\x0A|\\x0C|\\x0D|\\x20|;/);\n  const end = indexOfASCIIWhitespaceOrSemicolon === -1 ? string.length : position + indexOfASCIIWhitespaceOrSemicolon + 1;\n  return whatwgEncoding.labelToName(string.substring(position, end));\n}\n\nfunction isSpaceCharacter(c) {\n  return c === 0x09 || c === 0x0A || c === 0x0C || c === 0x0D || c === 0x20;\n}","map":{"version":3,"names":["whatwgEncoding","require","module","exports","buffer","transportLayerEncodingLabel","defaultEncoding","encoding","getBOMEncoding","undefined","labelToName","prescanMetaCharset","l","Math","min","length","i","c","c1","c2","c3","c4","c5","cMinus1","cMinus2","isSpaceCharacter","attributeList","Set","gotPragma","needPragma","charset","attrRes","getAttribute","attr","has","name","add","value","extractCharacterEncodingFromMeta","nameLoop","String","fromCharCode","quote","string","position","indexOfCharset","substring","search","subPosition","charCodeAt","nextIndex","indexOf","indexOfASCIIWhitespaceOrSemicolon","end"],"sources":["C:/Users/17033/balmco/node_modules/html-encoding-sniffer/lib/html-encoding-sniffer.js"],"sourcesContent":["\"use strict\";\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\n// https://html.spec.whatwg.org/#encoding-sniffing-algorithm\nmodule.exports = (buffer, { transportLayerEncodingLabel, defaultEncoding = \"windows-1252\" } = {}) => {\n  let encoding = whatwgEncoding.getBOMEncoding(buffer); // see https://github.com/whatwg/html/issues/1910\n\n  if (encoding === null && transportLayerEncodingLabel !== undefined) {\n    encoding = whatwgEncoding.labelToName(transportLayerEncodingLabel);\n  }\n\n  if (encoding === null) {\n    encoding = prescanMetaCharset(buffer);\n  }\n\n  if (encoding === null) {\n    encoding = defaultEncoding;\n  }\n\n  return encoding;\n};\n\n// https://html.spec.whatwg.org/multipage/syntax.html#prescan-a-byte-stream-to-determine-its-encoding\nfunction prescanMetaCharset(buffer) {\n  const l = Math.min(buffer.length, 1024);\n  for (let i = 0; i < l; i++) {\n    let c = buffer[i];\n    if (c === 0x3C) {\n      // \"<\"\n      const c1 = buffer[i + 1];\n      const c2 = buffer[i + 2];\n      const c3 = buffer[i + 3];\n      const c4 = buffer[i + 4];\n      const c5 = buffer[i + 5];\n      // !-- (comment start)\n      if (c1 === 0x21 && c2 === 0x2D && c3 === 0x2D) {\n        i += 4;\n        for (; i < l; i++) {\n          c = buffer[i];\n          const cMinus1 = buffer[i - 1];\n          const cMinus2 = buffer[i - 2];\n          // --> (comment end)\n          if (c === 0x3E && cMinus1 === 0x2D && cMinus2 === 0x2D) {\n            break;\n          }\n        }\n      } else if ((c1 === 0x4D || c1 === 0x6D) &&\n         (c2 === 0x45 || c2 === 0x65) &&\n         (c3 === 0x54 || c3 === 0x74) &&\n         (c4 === 0x41 || c4 === 0x61) &&\n         (isSpaceCharacter(c5) || c5 === 0x2F)) {\n        // \"meta\" + space or /\n        i += 6;\n        const attributeList = new Set();\n        let gotPragma = false;\n        let needPragma = null;\n        let charset = null;\n\n        let attrRes;\n        do {\n          attrRes = getAttribute(buffer, i, l);\n          if (attrRes.attr && !attributeList.has(attrRes.attr.name)) {\n            attributeList.add(attrRes.attr.name);\n            if (attrRes.attr.name === \"http-equiv\") {\n              gotPragma = attrRes.attr.value === \"content-type\";\n            } else if (attrRes.attr.name === \"content\" && !charset) {\n              charset = extractCharacterEncodingFromMeta(attrRes.attr.value);\n              if (charset !== null) {\n                needPragma = true;\n              }\n            } else if (attrRes.attr.name === \"charset\") {\n              charset = whatwgEncoding.labelToName(attrRes.attr.value);\n              needPragma = false;\n            }\n          }\n          i = attrRes.i;\n        } while (attrRes.attr);\n\n        if (needPragma === null) {\n          continue;\n        }\n        if (needPragma === true && gotPragma === false) {\n          continue;\n        }\n        if (charset === null) {\n          continue;\n        }\n\n        if (charset === \"UTF-16LE\" || charset === \"UTF-16BE\") {\n          charset = \"UTF-8\";\n        }\n        if (charset === \"x-user-defined\") {\n          charset = \"windows-1252\";\n        }\n\n        return charset;\n      } else if ((c1 >= 0x41 && c1 <= 0x5A) || (c1 >= 0x61 && c1 <= 0x7A)) {\n        // a-z or A-Z\n        for (i += 2; i < l; i++) {\n          c = buffer[i];\n          // space or >\n          if (isSpaceCharacter(c) || c === 0x3E) {\n            break;\n          }\n        }\n        let attrRes;\n        do {\n          attrRes = getAttribute(buffer, i, l);\n          i = attrRes.i;\n        } while (attrRes.attr);\n      } else if (c1 === 0x21 || c1 === 0x2F || c1 === 0x3F) {\n        // ! or / or ?\n        for (i += 2; i < l; i++) {\n          c = buffer[i];\n          // >\n          if (c === 0x3E) {\n            break;\n          }\n        }\n      }\n    }\n  }\n  return null;\n}\n\n// https://html.spec.whatwg.org/multipage/syntax.html#concept-get-attributes-when-sniffing\nfunction getAttribute(buffer, i, l) {\n  for (; i < l; i++) {\n    let c = buffer[i];\n    // space or /\n    if (isSpaceCharacter(c) || c === 0x2F) {\n      continue;\n    }\n    // \">\"\n    if (c === 0x3E) {\n      break;\n    }\n    let name = \"\";\n    let value = \"\";\n    nameLoop:for (; i < l; i++) {\n      c = buffer[i];\n      // \"=\"\n      if (c === 0x3D && name !== \"\") {\n        i++;\n        break;\n      }\n      // space\n      if (isSpaceCharacter(c)) {\n        for (i++; i < l; i++) {\n          c = buffer[i];\n          // space\n          if (isSpaceCharacter(c)) {\n            continue;\n          }\n          // not \"=\"\n          if (c !== 0x3D) {\n            return { attr: { name, value }, i };\n          }\n\n          i++;\n          break nameLoop;\n        }\n        break;\n      }\n      // / or >\n      if (c === 0x2F || c === 0x3E) {\n        return { attr: { name, value }, i };\n      }\n      // A-Z\n      if (c >= 0x41 && c <= 0x5A) {\n        name += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        name += String.fromCharCode(c);\n      }\n    }\n    c = buffer[i];\n    // space\n    if (isSpaceCharacter(c)) {\n      for (i++; i < l; i++) {\n        c = buffer[i];\n        // space\n        if (isSpaceCharacter(c)) {\n          continue;\n        } else {\n          break;\n        }\n      }\n    }\n    // \" or '\n    if (c === 0x22 || c === 0x27) {\n      const quote = c;\n      for (i++; i < l; i++) {\n        c = buffer[i];\n\n        if (c === quote) {\n          i++;\n          return { attr: { name, value }, i };\n        }\n\n        // A-Z\n        if (c >= 0x41 && c <= 0x5A) {\n          value += String.fromCharCode(c + 0x20); // lowercase\n        } else {\n          value += String.fromCharCode(c);\n        }\n      }\n    }\n\n    // >\n    if (c === 0x3E) {\n      return { attr: { name, value }, i };\n    }\n\n    // A-Z\n    if (c >= 0x41 && c <= 0x5A) {\n      value += String.fromCharCode(c + 0x20); // lowercase\n    } else {\n      value += String.fromCharCode(c);\n    }\n\n    for (i++; i < l; i++) {\n      c = buffer[i];\n\n      // space or >\n      if (isSpaceCharacter(c) || c === 0x3E) {\n        return { attr: { name, value }, i };\n      }\n\n      // A-Z\n      if (c >= 0x41 && c <= 0x5A) {\n        value += String.fromCharCode(c + 0x20); // lowercase\n      } else {\n        value += String.fromCharCode(c);\n      }\n    }\n  }\n  return { i };\n}\n\nfunction extractCharacterEncodingFromMeta(string) {\n  let position = 0;\n\n  while (true) {\n    const indexOfCharset = string.substring(position).search(/charset/i);\n\n    if (indexOfCharset === -1) {\n      return null;\n    }\n    let subPosition = position + indexOfCharset + \"charset\".length;\n\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n\n    if (string[subPosition] !== \"=\") {\n      position = subPosition - 1;\n      continue;\n    }\n\n    ++subPosition;\n\n    while (isSpaceCharacter(string[subPosition].charCodeAt(0))) {\n      ++subPosition;\n    }\n\n    position = subPosition;\n    break;\n  }\n\n  if (string[position] === \"\\\"\" || string[position] === \"'\") {\n    const nextIndex = string.indexOf(string[position], position + 1);\n\n    if (nextIndex !== -1) {\n      return whatwgEncoding.labelToName(string.substring(position + 1, nextIndex));\n    }\n\n    // It is an unmatched quotation mark\n    return null;\n  }\n\n  if (string.length === position + 1) {\n    return null;\n  }\n\n  const indexOfASCIIWhitespaceOrSemicolon = string.substring(position + 1).search(/\\x09|\\x0A|\\x0C|\\x0D|\\x20|;/);\n  const end = indexOfASCIIWhitespaceOrSemicolon === -1 ?\n    string.length :\n    position + indexOfASCIIWhitespaceOrSemicolon + 1;\n\n  return whatwgEncoding.labelToName(string.substring(position, end));\n}\n\nfunction isSpaceCharacter(c) {\n  return c === 0x09 || c === 0x0A || c === 0x0C || c === 0x0D || c === 0x20;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}