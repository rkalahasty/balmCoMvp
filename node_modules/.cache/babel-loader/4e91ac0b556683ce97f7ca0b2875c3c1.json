{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst FileList = require(\"../generated/FileList\");\n\nconst Decimal = require(\"decimal.js\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nconst ValidityState = require(\"../generated/ValidityState\");\n\nconst {\n  mixin\n} = require(\"../../utils\");\n\nconst {\n  domSymbolTree,\n  cloningSteps\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  getLabelsForLabelable,\n  formOwner\n} = require(\"../helpers/form-controls\");\n\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\n\nconst {\n  isDisabled,\n  isValidEmailAddress,\n  isValidAbsoluteURL,\n  sanitizeValueByType\n} = require(\"../helpers/form-controls\");\n\nconst {\n  asciiCaseInsensitiveMatch,\n  asciiLowercase,\n  parseFloatingPointNumber,\n  splitOnCommas\n} = require(\"../helpers/strings\");\n\nconst {\n  isDate\n} = require(\"../helpers/dates-and-times\");\n\nconst {\n  convertStringToNumberByType,\n  convertStringToDateByType,\n  serializeDateByType,\n  convertNumberToStringByType\n} = require(\"../helpers/number-and-date-inputs\");\n\nconst filesSymbol = Symbol(\"files\"); // https://html.spec.whatwg.org/multipage/input.html#attr-input-type\n\nconst inputAllowedTypes = new Set([\"hidden\", \"text\", \"search\", \"tel\", \"url\", \"email\", \"password\", \"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"number\", \"range\", \"color\", \"checkbox\", \"radio\", \"file\", \"submit\", \"image\", \"reset\", \"button\"]); // https://html.spec.whatwg.org/multipage/input.html#concept-input-apply\n\nconst variableLengthSelectionAllowedTypes = new Set([\"text\", \"search\", \"url\", \"tel\", \"password\"]);\nconst numericTypes = new Set([\"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"number\", \"range\"]);\nconst applicableTypesForIDLMember = {\n  valueAsDate: new Set([\"date\", \"month\", \"week\", \"time\"]),\n  valueAsNumber: numericTypes,\n  select: new Set([\"text\", \"search\", \"url\", \"tel\", \"email\", \"password\", \"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"number\", \"color\", \"file\"]),\n  selectionStart: variableLengthSelectionAllowedTypes,\n  selectionEnd: variableLengthSelectionAllowedTypes,\n  selectionDirection: variableLengthSelectionAllowedTypes,\n  setRangeText: variableLengthSelectionAllowedTypes,\n  setSelectionRange: variableLengthSelectionAllowedTypes,\n  stepDown: numericTypes,\n  stepUp: numericTypes\n};\nconst lengthPatternSizeTypes = new Set([\"text\", \"search\", \"url\", \"tel\", \"email\", \"password\"]);\nconst readonlyTypes = new Set([...lengthPatternSizeTypes, \"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"number\"]);\nconst applicableTypesForContentAttribute = {\n  list: new Set([\"text\", \"search\", \"url\", \"tel\", \"email\", ...numericTypes, \"color\"]),\n  max: numericTypes,\n  maxlength: lengthPatternSizeTypes,\n  min: numericTypes,\n  minlength: lengthPatternSizeTypes,\n  multiple: new Set([\"email\", \"file\"]),\n  pattern: lengthPatternSizeTypes,\n  readonly: readonlyTypes,\n  required: new Set([...readonlyTypes, \"checkbox\", \"radio\", \"file\"]),\n  step: numericTypes\n};\nconst valueAttributeDefaultMode = new Set([\"hidden\", \"submit\", \"image\", \"reset\", \"button\"]);\nconst valueAttributeDefaultOnMode = new Set([\"checkbox\", \"radio\"]);\n\nfunction valueAttributeMode(type) {\n  if (valueAttributeDefaultMode.has(type)) {\n    return \"default\";\n  }\n\n  if (valueAttributeDefaultOnMode.has(type)) {\n    return \"default/on\";\n  }\n\n  if (type === \"file\") {\n    return \"filename\";\n  }\n\n  return \"value\";\n}\n\nfunction getTypeFromAttribute(typeAttribute) {\n  if (typeof typeAttribute !== \"string\") {\n    return \"text\";\n  }\n\n  const type = asciiLowercase(typeAttribute);\n  return inputAllowedTypes.has(type) ? type : \"text\";\n}\n\nclass HTMLInputElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._selectionStart = this._selectionEnd = 0;\n    this._selectionDirection = \"none\";\n    this._value = \"\";\n    this._dirtyValue = false;\n    this._checkedness = false;\n    this._dirtyCheckedness = false;\n    this._preCheckedRadioState = null;\n    this._legacyActivationBehaviorPreviousIndeterminateState = false;\n    this.indeterminate = false;\n    this._customValidityErrorMessage = \"\";\n    this._labels = null;\n    this._hasActivationBehavior = true;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-value-string-number\n\n\n  get _convertStringToNumber() {\n    return convertStringToNumberByType[this.type];\n  }\n\n  get _convertNumberToString() {\n    return convertNumberToStringByType[this.type];\n  }\n\n  get _convertDateToString() {\n    return serializeDateByType[this.type];\n  }\n\n  get _convertStringToDate() {\n    return convertStringToDateByType[this.type];\n  }\n\n  _isStepAligned(v) {\n    return new Decimal(v).minus(this._stepBase).modulo(this._allowedValueStep).isZero();\n  } // Returns a Decimal.\n\n\n  _stepAlign(v, roundUp) {\n    const allowedValueStep = this._allowedValueStep;\n    const stepBase = this._stepBase;\n    return new Decimal(v).minus(stepBase).toNearest(allowedValueStep, roundUp ? Decimal.ROUND_UP : Decimal.ROUND_DOWN).add(stepBase);\n  } // For <input>, https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#concept-fe-value\n  // is a simple value that is gotten and set, not computed.\n\n\n  _getValue() {\n    return this._value;\n  }\n\n  _legacyPreActivationBehavior() {\n    if (this.type === \"checkbox\") {\n      this.checked = !this.checked;\n      this._legacyActivationBehaviorPreviousIndeterminateState = this.indeterminate;\n      this.indeterminate = false;\n    } else if (this.type === \"radio\") {\n      this._preCheckedRadioState = this.checked;\n      this.checked = true;\n    }\n  }\n\n  _legacyCanceledActivationBehavior() {\n    if (this.type === \"checkbox\") {\n      this.checked = !this.checked;\n      this.indeterminate = this._legacyActivationBehaviorPreviousIndeterminateState;\n    } else if (this.type === \"radio\") {\n      if (this._preCheckedRadioState !== null) {\n        this.checked = this._preCheckedRadioState;\n        this._preCheckedRadioState = null;\n      }\n    }\n  }\n\n  _activationBehavior() {\n    if (!this._mutable && this.type !== \"checkbox\" && this.type !== \"radio\") {\n      return;\n    }\n\n    const {\n      form\n    } = this;\n\n    if (this.type === \"checkbox\" || this.type === \"radio\" && !this._preCheckedRadioState) {\n      if (this.isConnected) {\n        fireAnEvent(\"input\", this, undefined, {\n          bubbles: true\n        });\n        fireAnEvent(\"change\", this, undefined, {\n          bubbles: true\n        });\n      }\n    } else if (form && this.type === \"submit\") {\n      form._doSubmit();\n    } else if (form && this.type === \"reset\") {\n      form._doReset();\n    }\n  }\n\n  _attrModified(name, value, oldVal) {\n    const wrapper = idlUtils.wrapperForImpl(this);\n\n    if (!this._dirtyValue && name === \"value\") {\n      this._value = sanitizeValueByType(this, wrapper.defaultValue);\n    }\n\n    if (!this._dirtyCheckedness && name === \"checked\") {\n      this._checkedness = wrapper.defaultChecked;\n\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n\n    if (name === \"name\" || name === \"type\") {\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n\n    if (name === \"type\") {\n      const prevType = getTypeFromAttribute(oldVal);\n      const curType = getTypeFromAttribute(value); // When an input element's type attribute changes stateâ€¦\n\n      if (prevType !== curType) {\n        const prevValueMode = valueAttributeMode(prevType);\n        const curValueMode = valueAttributeMode(curType);\n\n        if (prevValueMode === \"value\" && this._value !== \"\" && (curValueMode === \"default\" || curValueMode === \"default/on\")) {\n          this.setAttributeNS(null, \"value\", this._value);\n        } else if (prevValueMode !== \"value\" && curValueMode === \"value\") {\n          this._value = this.getAttributeNS(null, \"value\") || \"\";\n          this._dirtyValue = false;\n        } else if (prevValueMode !== \"filename\" && curValueMode === \"filename\") {\n          this._value = \"\";\n        }\n\n        this._signalATypeChange();\n\n        this._value = sanitizeValueByType(this, this._value);\n\n        const previouslySelectable = this._idlMemberApplies(\"setRangeText\", prevType);\n\n        const nowSelectable = this._idlMemberApplies(\"setRangeText\", curType);\n\n        if (!previouslySelectable && nowSelectable) {\n          this._selectionStart = 0;\n          this._selectionEnd = 0;\n          this._selectionDirection = \"none\";\n        }\n      }\n    }\n\n    super._attrModified(name, value, oldVal);\n  } // https://html.spec.whatwg.org/multipage/input.html#signal-a-type-change\n\n\n  _signalATypeChange() {\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  _formReset() {\n    const wrapper = idlUtils.wrapperForImpl(this);\n    this._value = sanitizeValueByType(this, wrapper.defaultValue);\n    this._dirtyValue = false;\n    this._checkedness = wrapper.defaultChecked;\n    this._dirtyCheckedness = false;\n\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  _changedFormOwner() {\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  get _otherRadioGroupElements() {\n    const wrapper = idlUtils.wrapperForImpl(this);\n    const root = this._radioButtonGroupRoot;\n\n    if (!root) {\n      return [];\n    }\n\n    const result = [];\n    const descendants = domSymbolTree.treeIterator(root);\n\n    for (const candidate of descendants) {\n      if (candidate._radioButtonGroupRoot !== root) {\n        continue;\n      }\n\n      const candidateWrapper = idlUtils.wrapperForImpl(candidate);\n\n      if (!candidateWrapper.name || candidateWrapper.name !== wrapper.name) {\n        continue;\n      }\n\n      if (candidate !== this) {\n        result.push(candidate);\n      }\n    }\n\n    return result;\n  }\n\n  _removeOtherRadioCheckedness() {\n    for (const radioGroupElement of this._otherRadioGroupElements) {\n      radioGroupElement._checkedness = false;\n    }\n  }\n\n  get _radioButtonGroupRoot() {\n    const wrapper = idlUtils.wrapperForImpl(this);\n\n    if (this.type !== \"radio\" || !wrapper.name) {\n      return null;\n    }\n\n    let e = domSymbolTree.parent(this);\n\n    while (e) {\n      // root node of this home sub tree\n      // or the form element we belong to\n      if (!domSymbolTree.parent(e) || e.nodeName.toUpperCase() === \"FORM\") {\n        return e;\n      }\n\n      e = domSymbolTree.parent(e);\n    }\n\n    return null;\n  }\n\n  _someInRadioGroup(name) {\n    if (this[name]) {\n      return true;\n    }\n\n    return this._otherRadioGroupElements.some(radioGroupElement => radioGroupElement[name]);\n  }\n\n  get _mutable() {\n    return !isDisabled(this) && !this._hasAttributeAndApplies(\"readonly\");\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get checked() {\n    return this._checkedness;\n  }\n\n  set checked(checked) {\n    this._checkedness = Boolean(checked);\n    this._dirtyCheckedness = true;\n\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  get value() {\n    switch (valueAttributeMode(this.type)) {\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value\n      case \"value\":\n        return this._getValue();\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default\n\n      case \"default\":\n        {\n          const attr = this.getAttributeNS(null, \"value\");\n          return attr !== null ? attr : \"\";\n        }\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n\n      case \"default/on\":\n        {\n          const attr = this.getAttributeNS(null, \"value\");\n          return attr !== null ? attr : \"on\";\n        }\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename\n\n      case \"filename\":\n        return this.files.length ? \"C:\\\\fakepath\\\\\" + this.files[0].name : \"\";\n\n      default:\n        throw new Error(\"jsdom internal error: unknown value attribute mode\");\n    }\n  }\n\n  set value(val) {\n    switch (valueAttributeMode(this.type)) {\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value\n      case \"value\":\n        {\n          const oldValue = this._value;\n          this._value = sanitizeValueByType(this, val);\n          this._dirtyValue = true;\n\n          if (oldValue !== this._value) {\n            this._selectionStart = this._selectionEnd = this._getValueLength();\n            this._selectionDirection = \"none\";\n          }\n\n          break;\n        }\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n\n      case \"default\":\n      case \"default/on\":\n        this.setAttributeNS(null, \"value\", val);\n        break;\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename\n\n      case \"filename\":\n        if (val === \"\") {\n          this.files.length = 0;\n        } else {\n          throw DOMException.create(this._globalObject, [\"This input element accepts a filename, which may only be programmatically set to the empty string.\", \"InvalidStateError\"]);\n        }\n\n        break;\n\n      default:\n        throw new Error(\"jsdom internal error: unknown value attribute mode\");\n    }\n  } // https://html.spec.whatwg.org/multipage/input.html#dom-input-valueasdate\n\n\n  get valueAsDate() {\n    if (!this._idlMemberApplies(\"valueAsDate\")) {\n      return null;\n    }\n\n    const window = this._ownerDocument._defaultView;\n\n    const convertedValue = this._convertStringToDate(this._value);\n\n    if (convertedValue instanceof Date) {\n      return new window.Date(convertedValue.getTime());\n    }\n\n    return null;\n  }\n\n  set valueAsDate(v) {\n    if (!this._idlMemberApplies(\"valueAsDate\")) {\n      throw DOMException.create(this._globalObject, [\"Failed to set the 'valueAsDate' property on 'HTMLInputElement': This input element does not support Date \" + \"values.\", \"InvalidStateError\"]);\n    }\n\n    if (v !== null && !isDate(v)) {\n      throw new TypeError(\"Failed to set the 'valueAsDate' property on 'HTMLInputElement': The provided value is \" + \"not a Date.\");\n    }\n\n    if (v === null || isNaN(v)) {\n      this._value = \"\";\n    }\n\n    this._value = this._convertDateToString(v);\n  } // https://html.spec.whatwg.org/multipage/input.html#dom-input-valueasnumber\n\n\n  get valueAsNumber() {\n    if (!this._idlMemberApplies(\"valueAsNumber\")) {\n      return NaN;\n    }\n\n    const parsedValue = this._convertStringToNumber(this._value);\n\n    return parsedValue !== null ? parsedValue : NaN;\n  }\n\n  set valueAsNumber(v) {\n    if (!isFinite(v)) {\n      throw new TypeError(\"Failed to set infinite value as Number\");\n    }\n\n    if (!this._idlMemberApplies(\"valueAsNumber\")) {\n      throw DOMException.create(this._globalObject, [\"Failed to set the 'valueAsNumber' property on 'HTMLInputElement': This input element does not support \" + \"Number values.\", \"InvalidStateError\"]);\n    }\n\n    this._value = this._convertNumberToString(v);\n  } // https://html.spec.whatwg.org/multipage/input.html#dom-input-stepup\n\n\n  _stepUpdate(n, isUp) {\n    const methodName = isUp ? \"stepUp\" : \"stepDown\";\n\n    if (!this._idlMemberApplies(methodName)) {\n      throw DOMException.create(this._globalObject, [`Failed to invoke '${methodName}' method on 'HTMLInputElement': ` + \"This input element does not support Number values.\", \"InvalidStateError\"]);\n    }\n\n    const allowedValueStep = this._allowedValueStep;\n\n    if (allowedValueStep === null) {\n      throw DOMException.create(this._globalObject, [`Failed to invoke '${methodName}' method on 'HTMLInputElement': ` + \"This input element does not support value step.\", \"InvalidStateError\"]);\n    }\n\n    const min = this._minimum;\n    const max = this._maximum;\n\n    if (min !== null && max !== null) {\n      if (min > max) {\n        return;\n      }\n\n      const candidateStepValue = this._stepAlign(Decimal.add(min, allowedValueStep),\n      /* roundUp = */\n      false);\n\n      if (candidateStepValue.lt(min) || candidateStepValue.gt(max)) {\n        return;\n      }\n    }\n\n    let value = 0;\n\n    try {\n      value = this.valueAsNumber;\n\n      if (isNaN(value)) {\n        // Empty value is parsed as NaN.\n        value = 0;\n      }\n    } catch (error) {// Step 5. Default value is 0.\n    }\n\n    value = new Decimal(value);\n    const valueBeforeStepping = value;\n\n    if (!this._isStepAligned(value)) {\n      value = this._stepAlign(value,\n      /* roundUp = */\n      isUp);\n    } else {\n      let delta = Decimal.mul(n, allowedValueStep);\n\n      if (!isUp) {\n        delta = delta.neg();\n      }\n\n      value = value.add(delta);\n    }\n\n    if (min !== null && value.lt(min)) {\n      value = this._stepAlign(min,\n      /* roundUp = */\n      true);\n    }\n\n    if (max !== null && value.gt(max)) {\n      value = this._stepAlign(max,\n      /* roundUp = */\n      false);\n    }\n\n    if (isUp ? value.lt(valueBeforeStepping) : value.gt(valueBeforeStepping)) {\n      return;\n    }\n\n    this._value = this._convertNumberToString(value.toNumber());\n  }\n\n  stepDown() {\n    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return this._stepUpdate(n, false);\n  }\n\n  stepUp() {\n    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return this._stepUpdate(n, true);\n  }\n\n  get files() {\n    if (this.type === \"file\") {\n      this[filesSymbol] = this[filesSymbol] || FileList.createImpl(this._globalObject);\n    } else {\n      this[filesSymbol] = null;\n    }\n\n    return this[filesSymbol];\n  }\n\n  set files(value) {\n    if (this.type === \"file\" && value !== null) {\n      this[filesSymbol] = value;\n    }\n  }\n\n  get type() {\n    const typeAttribute = this.getAttributeNS(null, \"type\");\n    return getTypeFromAttribute(typeAttribute);\n  }\n\n  set type(type) {\n    this.setAttributeNS(null, \"type\", type);\n  }\n\n  _dispatchSelectEvent() {\n    fireAnEvent(\"select\", this, undefined, {\n      bubbles: true,\n      cancelable: true\n    });\n  }\n\n  _getValueLength() {\n    return typeof this.value === \"string\" ? this.value.length : 0;\n  }\n\n  select() {\n    if (!this._idlMemberApplies(\"select\")) {\n      return;\n    }\n\n    this._selectionStart = 0;\n    this._selectionEnd = this._getValueLength();\n    this._selectionDirection = \"none\";\n\n    this._dispatchSelectEvent();\n  }\n\n  get selectionStart() {\n    if (!this._idlMemberApplies(\"selectionStart\")) {\n      return null;\n    }\n\n    return this._selectionStart;\n  }\n\n  set selectionStart(start) {\n    if (!this._idlMemberApplies(\"selectionStart\")) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n\n    this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);\n  }\n\n  get selectionEnd() {\n    if (!this._idlMemberApplies(\"selectionEnd\")) {\n      return null;\n    }\n\n    return this._selectionEnd;\n  }\n\n  set selectionEnd(end) {\n    if (!this._idlMemberApplies(\"selectionEnd\")) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n\n    this.setSelectionRange(this._selectionStart, end, this._selectionDirection);\n  }\n\n  get selectionDirection() {\n    if (!this._idlMemberApplies(\"selectionDirection\")) {\n      return null;\n    }\n\n    return this._selectionDirection;\n  }\n\n  set selectionDirection(dir) {\n    if (!this._idlMemberApplies(\"selectionDirection\")) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n\n    this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);\n  }\n\n  setSelectionRange(start, end, dir) {\n    if (!this._idlMemberApplies(\"setSelectionRange\")) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n\n    this._selectionEnd = Math.min(end, this._getValueLength());\n    this._selectionStart = Math.min(start, this._selectionEnd);\n    this._selectionDirection = dir === \"forward\" || dir === \"backward\" ? dir : \"none\";\n\n    this._dispatchSelectEvent();\n  }\n\n  setRangeText(repl, start, end) {\n    let selectionMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"preserve\";\n\n    if (!this._idlMemberApplies(\"setRangeText\")) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n\n    if (arguments.length < 2) {\n      start = this._selectionStart;\n      end = this._selectionEnd;\n    } else if (start > end) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    start = Math.min(start, this._getValueLength());\n    end = Math.min(end, this._getValueLength());\n    const val = this.value;\n    let selStart = this._selectionStart;\n    let selEnd = this._selectionEnd;\n    this.value = val.slice(0, start) + repl + val.slice(end);\n    const newEnd = start + this.value.length;\n\n    if (selectionMode === \"select\") {\n      this.setSelectionRange(start, newEnd);\n    } else if (selectionMode === \"start\") {\n      this.setSelectionRange(start, start);\n    } else if (selectionMode === \"end\") {\n      this.setSelectionRange(newEnd, newEnd);\n    } else {\n      // preserve\n      const delta = repl.length - (end - start);\n\n      if (selStart > end) {\n        selStart += delta;\n      } else if (selStart > start) {\n        selStart = start;\n      }\n\n      if (selEnd > end) {\n        selEnd += delta;\n      } else if (selEnd > start) {\n        selEnd = newEnd;\n      }\n\n      this.setSelectionRange(selStart, selEnd);\n    }\n  } // https://html.spec.whatwg.org/multipage/input.html#the-list-attribute\n\n\n  get list() {\n    const id = this._getAttributeIfApplies(\"list\");\n\n    if (!id) {\n      return null;\n    }\n\n    const el = this.getRootNode({}).getElementById(id);\n\n    if (el && el.localName === \"datalist\") {\n      return el;\n    }\n\n    return null;\n  } // Reflected IDL attribute does not care about whether the content attribute applies.\n\n\n  get maxLength() {\n    if (!this.hasAttributeNS(null, \"maxlength\")) {\n      return 524288; // stole this from chrome\n    }\n\n    return parseInt(this.getAttributeNS(null, \"maxlength\"));\n  }\n\n  set maxLength(value) {\n    if (value < 0) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    this.setAttributeNS(null, \"maxlength\", String(value));\n  }\n\n  get minLength() {\n    if (!this.hasAttributeNS(null, \"minlength\")) {\n      return 0;\n    }\n\n    return parseInt(this.getAttributeNS(null, \"minlength\"));\n  }\n\n  set minLength(value) {\n    if (value < 0) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    this.setAttributeNS(null, \"minlength\", String(value));\n  }\n\n  get size() {\n    if (!this.hasAttributeNS(null, \"size\")) {\n      return 20;\n    }\n\n    return parseInt(this.getAttributeNS(null, \"size\"));\n  }\n\n  set size(value) {\n    if (value <= 0) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    this.setAttributeNS(null, \"size\", String(value));\n  } // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes\n\n\n  get _minimum() {\n    let min = this._defaultMinimum;\n\n    const attr = this._getAttributeIfApplies(\"min\");\n\n    if (attr !== null && this._convertStringToNumber !== undefined) {\n      const parsed = this._convertStringToNumber(attr);\n\n      if (parsed !== null) {\n        min = parsed;\n      }\n    }\n\n    return min;\n  }\n\n  get _maximum() {\n    let max = this._defaultMaximum;\n\n    const attr = this._getAttributeIfApplies(\"max\");\n\n    if (attr !== null && this._convertStringToNumber !== undefined) {\n      const parsed = this._convertStringToNumber(attr);\n\n      if (parsed !== null) {\n        max = parsed;\n      }\n    }\n\n    return max;\n  }\n\n  get _defaultMinimum() {\n    if (this.type === \"range\") {\n      return 0;\n    }\n\n    return null;\n  }\n\n  get _defaultMaximum() {\n    if (this.type === \"range\") {\n      return 100;\n    }\n\n    return null;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step\n\n\n  get _allowedValueStep() {\n    if (!this._contentAttributeApplies(\"step\")) {\n      return null;\n    }\n\n    const attr = this.getAttributeNS(null, \"step\");\n\n    if (attr === null) {\n      return this._defaultStep * this._stepScaleFactor;\n    }\n\n    if (asciiCaseInsensitiveMatch(attr, \"any\")) {\n      return null;\n    }\n\n    const parsedStep = parseFloatingPointNumber(attr);\n\n    if (parsedStep === null || parsedStep <= 0) {\n      return this._defaultStep * this._stepScaleFactor;\n    }\n\n    return parsedStep * this._stepScaleFactor;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-scale\n\n\n  get _stepScaleFactor() {\n    const dayInMilliseconds = 24 * 60 * 60 * 1000;\n\n    switch (this.type) {\n      case \"week\":\n        return 7 * dayInMilliseconds;\n\n      case \"date\":\n        return dayInMilliseconds;\n\n      case \"datetime-local\":\n      case \"datetime\":\n      case \"time\":\n        return 1000;\n    }\n\n    return 1;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default\n\n\n  get _defaultStep() {\n    if (this.type === \"datetime-local\" || this.type === \"datetime\" || this.type === \"time\") {\n      return 60;\n    }\n\n    return 1;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-min-zero\n\n\n  get _stepBase() {\n    if (this._hasAttributeAndApplies(\"min\")) {\n      const min = this._convertStringToNumber(this.getAttributeNS(null, \"min\"));\n\n      if (min !== null) {\n        return min;\n      }\n    }\n\n    if (this.hasAttributeNS(null, \"value\")) {\n      const value = this._convertStringToNumber(this.getAttributeNS(null, \"value\"));\n\n      if (value !== null) {\n        return value;\n      }\n    }\n\n    if (this._defaultStepBase !== null) {\n      return this._defaultStepBase;\n    }\n\n    return 0;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default-base\n\n\n  get _defaultStepBase() {\n    if (this.type === \"week\") {\n      // The start of week 1970-W01\n      return -259200000;\n    }\n\n    return null;\n  } // https://html.spec.whatwg.org/multipage/input.html#common-input-element-attributes\n  // When an attribute doesn't apply to an input element, user agents must ignore the attribute.\n\n\n  _contentAttributeApplies(attribute) {\n    return applicableTypesForContentAttribute[attribute].has(this.type);\n  }\n\n  _hasAttributeAndApplies(attribute) {\n    return this._contentAttributeApplies(attribute) && this.hasAttributeNS(null, attribute);\n  }\n\n  _getAttributeIfApplies(attribute) {\n    if (this._contentAttributeApplies(attribute)) {\n      return this.getAttributeNS(null, attribute);\n    }\n\n    return null;\n  }\n\n  _idlMemberApplies(member) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.type;\n    return applicableTypesForIDLMember[member].has(type);\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    // https://html.spec.whatwg.org/multipage/input.html#hidden-state-(type=hidden)\n    // https://html.spec.whatwg.org/multipage/input.html#reset-button-state-(type=reset)\n    // https://html.spec.whatwg.org/multipage/input.html#button-state-(type=button)\n    const willNotValidateTypes = new Set([\"hidden\", \"reset\", \"button\"]); // https://html.spec.whatwg.org/multipage/input.html#attr-input-readonly\n\n    const readOnly = this._hasAttributeAndApplies(\"readonly\"); // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-disabled\n\n\n    return willNotValidateTypes.has(this.type) || readOnly;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-required\n\n\n  get _required() {\n    return this._hasAttributeAndApplies(\"required\");\n  } // https://html.spec.whatwg.org/multipage/input.html#has-a-periodic-domain\n\n\n  get _hasAPeriodicDomain() {\n    return this.type === \"time\";\n  } // https://html.spec.whatwg.org/multipage/input.html#has-a-reversed-range\n\n\n  get _hasAReversedRange() {\n    return this._hasAPeriodicDomain && this._maximum < this._minimum;\n  }\n\n  get validity() {\n    if (!this._validity) {\n      // Constraint validation: When an element has a reversed range, and the result of applying\n      // the algorithm to convert a string to a number to the string given by the element's value\n      // is a number, and the number obtained from that algorithm is more than the maximum and less\n      // than the minimum, the element is simultaneously suffering from an underflow and suffering\n      // from an overflow.\n      const reversedRangeSufferingOverUnderflow = () => {\n        const parsedValue = this._convertStringToNumber(this._value);\n\n        return parsedValue !== null && parsedValue > this._maximum && parsedValue < this._minimum;\n      };\n\n      const state = {\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-missing\n        valueMissing: () => {\n          // https://html.spec.whatwg.org/multipage/input.html#the-required-attribute\n          // Constraint validation: If the element is required, and its value IDL attribute applies\n          // and is in the mode value, and the element is mutable, and the element's value is the\n          // empty string, then the element is suffering from being missing.\n          //\n          // Note: As of today, the value IDL attribute always applies.\n          if (this._required && valueAttributeMode(this.type) === \"value\" && this._mutable && this._value === \"\") {\n            return true;\n          }\n\n          switch (this.type) {\n            // https://html.spec.whatwg.org/multipage/input.html#checkbox-state-(type=checkbox)\n            // Constraint validation: If the element is required and its checkedness is\n            // false, then the element is suffering from being missing.\n            case \"checkbox\":\n              if (this._required && !this._checkedness) {\n                return true;\n              }\n\n              break;\n            // https://html.spec.whatwg.org/multipage/input.html#radio-button-state-(type=radio)\n            // Constraint validation: If an element in the radio button group is required,\n            // and all of the input elements in the radio button group have a checkedness\n            // that is false, then the element is suffering from being missing.\n\n            case \"radio\":\n              if (this._someInRadioGroup(\"_required\") && !this._someInRadioGroup(\"checked\")) {\n                return true;\n              }\n\n              break;\n            // https://html.spec.whatwg.org/multipage/input.html#file-upload-state-(type=file)\n            // Constraint validation: If the element is required and the list of selected files is\n            // empty, then the element is suffering from being missing.\n\n            case \"file\":\n              if (this._required && this.files.length === 0) {\n                return true;\n              }\n\n              break;\n          }\n\n          return false;\n        },\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-long\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-maxlength\n        // jsdom has no way at the moment to emulate a user interaction, so tooLong/tooShort have\n        // to be set to false.\n        tooLong: () => false,\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-short\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-minlength\n        tooShort: () => false,\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-overflow\n        rangeOverflow: () => {\n          // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes\n          if (this._hasAReversedRange) {\n            return reversedRangeSufferingOverUnderflow();\n          } // Constraint validation: When the element has a maximum and does not have a reversed\n          // range, and the result of applying the algorithm to convert a string to a number to the\n          // string given by the element's value is a number, and the number obtained from that\n          // algorithm is more than the maximum, the element is suffering from an overflow.\n\n\n          if (this._maximum !== null) {\n            const parsedValue = this._convertStringToNumber(this._value);\n\n            if (parsedValue !== null && parsedValue > this._maximum) {\n              return true;\n            }\n          }\n\n          return false;\n        },\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-underflow\n        rangeUnderflow: () => {\n          // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes\n          if (this._hasAReversedRange) {\n            return reversedRangeSufferingOverUnderflow();\n          } // Constraint validation: When the element has a minimum and does not have a reversed\n          // range, and the result of applying the algorithm to convert a string to a number to the\n          // string given by the element's value is a number, and the number obtained from that\n          // algorithm is less than the minimum, the element is suffering from an underflow.\n\n\n          if (this._minimum !== null) {\n            const parsedValue = this._convertStringToNumber(this._value);\n\n            if (parsedValue !== null && parsedValue < this._minimum) {\n              return true;\n            }\n          }\n\n          return false;\n        },\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-pattern-mismatch\n        patternMismatch: () => {\n          // https://html.spec.whatwg.org/multipage/input.html#the-pattern-attribute\n          if (this._value === \"\" || !this._hasAttributeAndApplies(\"pattern\")) {\n            return false;\n          }\n\n          let regExp;\n\n          try {\n            const pattern = this.getAttributeNS(null, \"pattern\"); // The pattern attribute should be matched against the entire value, not just any\n            // subset, so add ^ and $ anchors. But also check the validity of the regex itself\n            // first.\n\n            new RegExp(pattern, \"u\"); // eslint-disable-line no-new\n\n            regExp = new RegExp(\"^(?:\" + pattern + \")$\", \"u\");\n          } catch (e) {\n            return false;\n          }\n\n          if (this._hasAttributeAndApplies(\"multiple\")) {\n            return !splitOnCommas(this._value).every(value => regExp.test(value));\n          }\n\n          return !regExp.test(this._value);\n        },\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-step-mismatch\n        // https://html.spec.whatwg.org/multipage/input.html#attr-input-step\n        stepMismatch: () => {\n          const allowedValueStep = this._allowedValueStep;\n\n          if (allowedValueStep === null) {\n            return false;\n          }\n\n          const number = this._convertStringToNumber(this._value);\n\n          return number !== null && !this._isStepAligned(number);\n        },\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-type-mismatch\n        typeMismatch: () => {\n          switch (this.type) {\n            // https://html.spec.whatwg.org/multipage/input.html#url-state-(type=url)\n            // Constraint validation: While the value of the element is neither the empty string\n            // nor a valid absolute URL, the element is suffering from a type mismatch.\n            case \"url\":\n              if (this._value !== \"\" && !isValidAbsoluteURL(this._value)) {\n                return true;\n              }\n\n              break;\n            // https://html.spec.whatwg.org/multipage/input.html#e-mail-state-(type=email)\n            // Constraint validation [multiple=false]: While the value of the element is neither the empty\n            // string nor a single valid e - mail address, the element is suffering from a type mismatch.\n            // Constraint validation [multiple=true]: While the value of the element is not a valid e-mail address list,\n            // the element is suffering from a type mismatch.\n\n            case \"email\":\n              if (this._value !== \"\" && !isValidEmailAddress(this._getValue(), this.hasAttributeNS(null, \"multiple\"))) {\n                return true;\n              }\n\n              break;\n          }\n\n          return false;\n        }\n      };\n      this._validity = ValidityState.createImpl(this._globalObject, [], {\n        element: this,\n        state\n      });\n    }\n\n    return this._validity;\n  }\n\n  [cloningSteps](copy, node) {\n    copy._value = node._value;\n    copy._checkedness = node._checkedness;\n    copy._dirtyValue = node._dirtyValue;\n    copy._dirtyCheckedness = node._dirtyCheckedness;\n  }\n\n}\n\nmixin(HTMLInputElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLInputElementImpl\n};","map":{"version":3,"names":["DOMException","require","FileList","Decimal","HTMLElementImpl","implementation","idlUtils","DefaultConstraintValidationImpl","ValidityState","mixin","domSymbolTree","cloningSteps","getLabelsForLabelable","formOwner","fireAnEvent","isDisabled","isValidEmailAddress","isValidAbsoluteURL","sanitizeValueByType","asciiCaseInsensitiveMatch","asciiLowercase","parseFloatingPointNumber","splitOnCommas","isDate","convertStringToNumberByType","convertStringToDateByType","serializeDateByType","convertNumberToStringByType","filesSymbol","Symbol","inputAllowedTypes","Set","variableLengthSelectionAllowedTypes","numericTypes","applicableTypesForIDLMember","valueAsDate","valueAsNumber","select","selectionStart","selectionEnd","selectionDirection","setRangeText","setSelectionRange","stepDown","stepUp","lengthPatternSizeTypes","readonlyTypes","applicableTypesForContentAttribute","list","max","maxlength","min","minlength","multiple","pattern","readonly","required","step","valueAttributeDefaultMode","valueAttributeDefaultOnMode","valueAttributeMode","type","has","getTypeFromAttribute","typeAttribute","HTMLInputElementImpl","constructor","globalObject","args","privateData","_selectionStart","_selectionEnd","_selectionDirection","_value","_dirtyValue","_checkedness","_dirtyCheckedness","_preCheckedRadioState","_legacyActivationBehaviorPreviousIndeterminateState","indeterminate","_customValidityErrorMessage","_labels","_hasActivationBehavior","_convertStringToNumber","_convertNumberToString","_convertDateToString","_convertStringToDate","_isStepAligned","v","minus","_stepBase","modulo","_allowedValueStep","isZero","_stepAlign","roundUp","allowedValueStep","stepBase","toNearest","ROUND_UP","ROUND_DOWN","add","_getValue","_legacyPreActivationBehavior","checked","_legacyCanceledActivationBehavior","_activationBehavior","_mutable","form","isConnected","undefined","bubbles","_doSubmit","_doReset","_attrModified","name","value","oldVal","wrapper","wrapperForImpl","defaultValue","defaultChecked","_removeOtherRadioCheckedness","prevType","curType","prevValueMode","curValueMode","setAttributeNS","getAttributeNS","_signalATypeChange","previouslySelectable","_idlMemberApplies","nowSelectable","_formReset","_changedFormOwner","_otherRadioGroupElements","root","_radioButtonGroupRoot","result","descendants","treeIterator","candidate","candidateWrapper","push","radioGroupElement","e","parent","nodeName","toUpperCase","_someInRadioGroup","some","_hasAttributeAndApplies","labels","Boolean","attr","files","length","Error","val","oldValue","_getValueLength","create","_globalObject","window","_ownerDocument","_defaultView","convertedValue","Date","getTime","TypeError","isNaN","NaN","parsedValue","isFinite","_stepUpdate","n","isUp","methodName","_minimum","_maximum","candidateStepValue","lt","gt","error","valueBeforeStepping","delta","mul","neg","toNumber","createImpl","_dispatchSelectEvent","cancelable","start","Math","end","dir","repl","selectionMode","arguments","selStart","selEnd","slice","newEnd","id","_getAttributeIfApplies","el","getRootNode","getElementById","localName","maxLength","hasAttributeNS","parseInt","String","minLength","size","_defaultMinimum","parsed","_defaultMaximum","_contentAttributeApplies","_defaultStep","_stepScaleFactor","parsedStep","dayInMilliseconds","_defaultStepBase","attribute","member","_barredFromConstraintValidationSpecialization","willNotValidateTypes","readOnly","_required","_hasAPeriodicDomain","_hasAReversedRange","validity","_validity","reversedRangeSufferingOverUnderflow","state","valueMissing","tooLong","tooShort","rangeOverflow","rangeUnderflow","patternMismatch","regExp","RegExp","every","test","stepMismatch","number","typeMismatch","element","copy","node","prototype","module","exports"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/nodes/HTMLInputElement-impl.js"],"sourcesContent":["\"use strict\";\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst FileList = require(\"../generated/FileList\");\nconst Decimal = require(\"decimal.js\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst idlUtils = require(\"../generated/utils\");\nconst DefaultConstraintValidationImpl =\n  require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\nconst ValidityState = require(\"../generated/ValidityState\");\nconst { mixin } = require(\"../../utils\");\nconst { domSymbolTree, cloningSteps } = require(\"../helpers/internal-constants\");\nconst { getLabelsForLabelable, formOwner } = require(\"../helpers/form-controls\");\nconst { fireAnEvent } = require(\"../helpers/events\");\nconst {\n  isDisabled,\n  isValidEmailAddress,\n  isValidAbsoluteURL,\n  sanitizeValueByType\n} = require(\"../helpers/form-controls\");\nconst {\n  asciiCaseInsensitiveMatch,\n  asciiLowercase,\n  parseFloatingPointNumber,\n  splitOnCommas\n} = require(\"../helpers/strings\");\nconst { isDate } = require(\"../helpers/dates-and-times\");\nconst {\n  convertStringToNumberByType,\n  convertStringToDateByType,\n  serializeDateByType,\n  convertNumberToStringByType\n} = require(\"../helpers/number-and-date-inputs\");\n\nconst filesSymbol = Symbol(\"files\");\n\n// https://html.spec.whatwg.org/multipage/input.html#attr-input-type\nconst inputAllowedTypes = new Set([\n  \"hidden\", \"text\", \"search\", \"tel\", \"url\", \"email\", \"password\", \"date\",\n  \"month\", \"week\", \"time\", \"datetime-local\", \"number\", \"range\", \"color\", \"checkbox\", \"radio\",\n  \"file\", \"submit\", \"image\", \"reset\", \"button\"\n]);\n\n// https://html.spec.whatwg.org/multipage/input.html#concept-input-apply\n\nconst variableLengthSelectionAllowedTypes = new Set([\"text\", \"search\", \"url\", \"tel\", \"password\"]);\nconst numericTypes = new Set([\"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"number\", \"range\"]);\n\nconst applicableTypesForIDLMember = {\n  valueAsDate: new Set([\"date\", \"month\", \"week\", \"time\"]),\n  valueAsNumber: numericTypes,\n\n  select: new Set([\n    \"text\", \"search\", \"url\", \"tel\", \"email\", \"password\", \"date\", \"month\", \"week\",\n    \"time\", \"datetime-local\", \"number\", \"color\", \"file\"\n  ]),\n  selectionStart: variableLengthSelectionAllowedTypes,\n  selectionEnd: variableLengthSelectionAllowedTypes,\n  selectionDirection: variableLengthSelectionAllowedTypes,\n  setRangeText: variableLengthSelectionAllowedTypes,\n  setSelectionRange: variableLengthSelectionAllowedTypes,\n  stepDown: numericTypes,\n  stepUp: numericTypes\n};\n\nconst lengthPatternSizeTypes = new Set([\"text\", \"search\", \"url\", \"tel\", \"email\", \"password\"]);\nconst readonlyTypes =\n  new Set([...lengthPatternSizeTypes, \"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"number\"]);\n\nconst applicableTypesForContentAttribute = {\n  list: new Set([\"text\", \"search\", \"url\", \"tel\", \"email\", ...numericTypes, \"color\"]),\n  max: numericTypes,\n  maxlength: lengthPatternSizeTypes,\n  min: numericTypes,\n  minlength: lengthPatternSizeTypes,\n  multiple: new Set([\"email\", \"file\"]),\n  pattern: lengthPatternSizeTypes,\n  readonly: readonlyTypes,\n  required: new Set([...readonlyTypes, \"checkbox\", \"radio\", \"file\"]),\n  step: numericTypes\n};\n\nconst valueAttributeDefaultMode = new Set([\"hidden\", \"submit\", \"image\", \"reset\", \"button\"]);\nconst valueAttributeDefaultOnMode = new Set([\"checkbox\", \"radio\"]);\n\nfunction valueAttributeMode(type) {\n  if (valueAttributeDefaultMode.has(type)) {\n    return \"default\";\n  }\n  if (valueAttributeDefaultOnMode.has(type)) {\n    return \"default/on\";\n  }\n  if (type === \"file\") {\n    return \"filename\";\n  }\n  return \"value\";\n}\n\nfunction getTypeFromAttribute(typeAttribute) {\n  if (typeof typeAttribute !== \"string\") {\n    return \"text\";\n  }\n  const type = asciiLowercase(typeAttribute);\n  return inputAllowedTypes.has(type) ? type : \"text\";\n}\n\nclass HTMLInputElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    this._selectionStart = this._selectionEnd = 0;\n    this._selectionDirection = \"none\";\n    this._value = \"\";\n    this._dirtyValue = false;\n    this._checkedness = false;\n    this._dirtyCheckedness = false;\n\n    this._preCheckedRadioState = null;\n    this._legacyActivationBehaviorPreviousIndeterminateState = false;\n\n    this.indeterminate = false;\n\n    this._customValidityErrorMessage = \"\";\n\n    this._labels = null;\n\n    this._hasActivationBehavior = true;\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#concept-input-value-string-number\n  get _convertStringToNumber() {\n    return convertStringToNumberByType[this.type];\n  }\n\n  get _convertNumberToString() {\n    return convertNumberToStringByType[this.type];\n  }\n\n  get _convertDateToString() {\n    return serializeDateByType[this.type];\n  }\n\n  get _convertStringToDate() {\n    return convertStringToDateByType[this.type];\n  }\n\n  _isStepAligned(v) {\n    return new Decimal(v).minus(this._stepBase)\n      .modulo(this._allowedValueStep)\n      .isZero();\n  }\n\n  // Returns a Decimal.\n  _stepAlign(v, roundUp) {\n    const allowedValueStep = this._allowedValueStep;\n    const stepBase = this._stepBase;\n\n    return new Decimal(v).minus(stepBase)\n      .toNearest(allowedValueStep, roundUp ? Decimal.ROUND_UP : Decimal.ROUND_DOWN)\n      .add(stepBase);\n  }\n\n  // For <input>, https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#concept-fe-value\n  // is a simple value that is gotten and set, not computed.\n  _getValue() {\n    return this._value;\n  }\n\n  _legacyPreActivationBehavior() {\n    if (this.type === \"checkbox\") {\n      this.checked = !this.checked;\n      this._legacyActivationBehaviorPreviousIndeterminateState = this.indeterminate;\n      this.indeterminate = false;\n    } else if (this.type === \"radio\") {\n      this._preCheckedRadioState = this.checked;\n      this.checked = true;\n    }\n  }\n\n  _legacyCanceledActivationBehavior() {\n    if (this.type === \"checkbox\") {\n      this.checked = !this.checked;\n      this.indeterminate = this._legacyActivationBehaviorPreviousIndeterminateState;\n    } else if (this.type === \"radio\") {\n      if (this._preCheckedRadioState !== null) {\n        this.checked = this._preCheckedRadioState;\n        this._preCheckedRadioState = null;\n      }\n    }\n  }\n\n  _activationBehavior() {\n    if (!this._mutable && this.type !== \"checkbox\" && this.type !== \"radio\") {\n      return;\n    }\n\n    const { form } = this;\n\n    if (this.type === \"checkbox\" || (this.type === \"radio\" && !this._preCheckedRadioState)) {\n      if (this.isConnected) {\n        fireAnEvent(\"input\", this, undefined, { bubbles: true });\n        fireAnEvent(\"change\", this, undefined, { bubbles: true });\n      }\n    } else if (form && this.type === \"submit\") {\n      form._doSubmit();\n    } else if (form && this.type === \"reset\") {\n      form._doReset();\n    }\n  }\n\n  _attrModified(name, value, oldVal) {\n    const wrapper = idlUtils.wrapperForImpl(this);\n    if (!this._dirtyValue && name === \"value\") {\n      this._value = sanitizeValueByType(this, wrapper.defaultValue);\n    }\n    if (!this._dirtyCheckedness && name === \"checked\") {\n      this._checkedness = wrapper.defaultChecked;\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n\n    if (name === \"name\" || name === \"type\") {\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n\n    if (name === \"type\") {\n      const prevType = getTypeFromAttribute(oldVal);\n      const curType = getTypeFromAttribute(value);\n      // When an input element's type attribute changes stateâ€¦\n      if (prevType !== curType) {\n        const prevValueMode = valueAttributeMode(prevType);\n        const curValueMode = valueAttributeMode(curType);\n        if (prevValueMode === \"value\" && this._value !== \"\" &&\n            (curValueMode === \"default\" || curValueMode === \"default/on\")) {\n          this.setAttributeNS(null, \"value\", this._value);\n        } else if (prevValueMode !== \"value\" && curValueMode === \"value\") {\n          this._value = this.getAttributeNS(null, \"value\") || \"\";\n          this._dirtyValue = false;\n        } else if (prevValueMode !== \"filename\" && curValueMode === \"filename\") {\n          this._value = \"\";\n        }\n\n        this._signalATypeChange();\n\n        this._value = sanitizeValueByType(this, this._value);\n\n        const previouslySelectable = this._idlMemberApplies(\"setRangeText\", prevType);\n        const nowSelectable = this._idlMemberApplies(\"setRangeText\", curType);\n        if (!previouslySelectable && nowSelectable) {\n          this._selectionStart = 0;\n          this._selectionEnd = 0;\n          this._selectionDirection = \"none\";\n        }\n      }\n    }\n\n    super._attrModified(name, value, oldVal);\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#signal-a-type-change\n  _signalATypeChange() {\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  _formReset() {\n    const wrapper = idlUtils.wrapperForImpl(this);\n    this._value = sanitizeValueByType(this, wrapper.defaultValue);\n    this._dirtyValue = false;\n    this._checkedness = wrapper.defaultChecked;\n    this._dirtyCheckedness = false;\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  _changedFormOwner() {\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  get _otherRadioGroupElements() {\n    const wrapper = idlUtils.wrapperForImpl(this);\n    const root = this._radioButtonGroupRoot;\n    if (!root) {\n      return [];\n    }\n\n    const result = [];\n\n    const descendants = domSymbolTree.treeIterator(root);\n    for (const candidate of descendants) {\n      if (candidate._radioButtonGroupRoot !== root) {\n        continue;\n      }\n\n      const candidateWrapper = idlUtils.wrapperForImpl(candidate);\n      if (!candidateWrapper.name || candidateWrapper.name !== wrapper.name) {\n        continue;\n      }\n\n      if (candidate !== this) {\n        result.push(candidate);\n      }\n    }\n    return result;\n  }\n\n  _removeOtherRadioCheckedness() {\n    for (const radioGroupElement of this._otherRadioGroupElements) {\n      radioGroupElement._checkedness = false;\n    }\n  }\n\n  get _radioButtonGroupRoot() {\n    const wrapper = idlUtils.wrapperForImpl(this);\n    if (this.type !== \"radio\" || !wrapper.name) {\n      return null;\n    }\n\n    let e = domSymbolTree.parent(this);\n    while (e) {\n      // root node of this home sub tree\n      // or the form element we belong to\n      if (!domSymbolTree.parent(e) || e.nodeName.toUpperCase() === \"FORM\") {\n        return e;\n      }\n      e = domSymbolTree.parent(e);\n    }\n    return null;\n  }\n\n  _someInRadioGroup(name) {\n    if (this[name]) {\n      return true;\n    }\n    return this._otherRadioGroupElements.some(radioGroupElement => radioGroupElement[name]);\n  }\n\n  get _mutable() {\n    return !isDisabled(this) && !this._hasAttributeAndApplies(\"readonly\");\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get checked() {\n    return this._checkedness;\n  }\n\n  set checked(checked) {\n    this._checkedness = Boolean(checked);\n    this._dirtyCheckedness = true;\n    if (this._checkedness) {\n      this._removeOtherRadioCheckedness();\n    }\n  }\n\n  get value() {\n    switch (valueAttributeMode(this.type)) {\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value\n      case \"value\":\n        return this._getValue();\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default\n      case \"default\": {\n        const attr = this.getAttributeNS(null, \"value\");\n        return attr !== null ? attr : \"\";\n      }\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n      case \"default/on\": {\n        const attr = this.getAttributeNS(null, \"value\");\n        return attr !== null ? attr : \"on\";\n      }\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename\n      case \"filename\":\n        return this.files.length ? \"C:\\\\fakepath\\\\\" + this.files[0].name : \"\";\n      default:\n        throw new Error(\"jsdom internal error: unknown value attribute mode\");\n    }\n  }\n\n  set value(val) {\n    switch (valueAttributeMode(this.type)) {\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value\n      case \"value\": {\n        const oldValue = this._value;\n        this._value = sanitizeValueByType(this, val);\n        this._dirtyValue = true;\n\n        if (oldValue !== this._value) {\n          this._selectionStart = this._selectionEnd = this._getValueLength();\n          this._selectionDirection = \"none\";\n        }\n        break;\n      }\n\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n      case \"default\":\n      case \"default/on\":\n        this.setAttributeNS(null, \"value\", val);\n        break;\n\n      // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename\n      case \"filename\":\n        if (val === \"\") {\n          this.files.length = 0;\n        } else {\n          throw DOMException.create(this._globalObject, [\n            \"This input element accepts a filename, which may only be programmatically set to the empty string.\",\n            \"InvalidStateError\"\n          ]);\n        }\n        break;\n\n      default:\n        throw new Error(\"jsdom internal error: unknown value attribute mode\");\n    }\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#dom-input-valueasdate\n  get valueAsDate() {\n    if (!this._idlMemberApplies(\"valueAsDate\")) {\n      return null;\n    }\n\n    const window = this._ownerDocument._defaultView;\n    const convertedValue = this._convertStringToDate(this._value);\n\n    if (convertedValue instanceof Date) {\n      return new window.Date(convertedValue.getTime());\n    }\n\n    return null;\n  }\n\n  set valueAsDate(v) {\n    if (!this._idlMemberApplies(\"valueAsDate\")) {\n      throw DOMException.create(this._globalObject, [\n        \"Failed to set the 'valueAsDate' property on 'HTMLInputElement': This input element does not support Date \" +\n        \"values.\",\n        \"InvalidStateError\"\n      ]);\n    }\n\n    if (v !== null && !isDate(v)) {\n      throw new TypeError(\"Failed to set the 'valueAsDate' property on 'HTMLInputElement': The provided value is \" +\n        \"not a Date.\");\n    }\n\n    if (v === null || isNaN(v)) {\n      this._value = \"\";\n    }\n\n    this._value = this._convertDateToString(v);\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#dom-input-valueasnumber\n  get valueAsNumber() {\n    if (!this._idlMemberApplies(\"valueAsNumber\")) {\n      return NaN;\n    }\n\n    const parsedValue = this._convertStringToNumber(this._value);\n    return parsedValue !== null ? parsedValue : NaN;\n  }\n\n  set valueAsNumber(v) {\n    if (!isFinite(v)) {\n      throw new TypeError(\"Failed to set infinite value as Number\");\n    }\n\n    if (!this._idlMemberApplies(\"valueAsNumber\")) {\n      throw DOMException.create(this._globalObject, [\n        \"Failed to set the 'valueAsNumber' property on 'HTMLInputElement': This input element does not support \" +\n        \"Number values.\",\n        \"InvalidStateError\"\n      ]);\n    }\n\n    this._value = this._convertNumberToString(v);\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#dom-input-stepup\n  _stepUpdate(n, isUp) {\n    const methodName = isUp ? \"stepUp\" : \"stepDown\";\n    if (!this._idlMemberApplies(methodName)) {\n      throw DOMException.create(this._globalObject, [\n        `Failed to invoke '${methodName}' method on 'HTMLInputElement': ` +\n        \"This input element does not support Number values.\",\n        \"InvalidStateError\"\n      ]);\n    }\n\n    const allowedValueStep = this._allowedValueStep;\n    if (allowedValueStep === null) {\n      throw DOMException.create(this._globalObject, [\n        `Failed to invoke '${methodName}' method on 'HTMLInputElement': ` +\n        \"This input element does not support value step.\",\n        \"InvalidStateError\"\n      ]);\n    }\n\n    const min = this._minimum;\n    const max = this._maximum;\n\n    if (min !== null && max !== null) {\n      if (min > max) {\n        return;\n      }\n\n      const candidateStepValue = this._stepAlign(Decimal.add(min, allowedValueStep), /* roundUp = */ false);\n      if (candidateStepValue.lt(min) || candidateStepValue.gt(max)) {\n        return;\n      }\n    }\n\n    let value = 0;\n    try {\n      value = this.valueAsNumber;\n      if (isNaN(value)) { // Empty value is parsed as NaN.\n        value = 0;\n      }\n    } catch (error) {\n      // Step 5. Default value is 0.\n    }\n    value = new Decimal(value);\n\n    const valueBeforeStepping = value;\n\n    if (!this._isStepAligned(value)) {\n      value = this._stepAlign(value, /* roundUp = */ isUp);\n    } else {\n      let delta = Decimal.mul(n, allowedValueStep);\n      if (!isUp) {\n        delta = delta.neg();\n      }\n      value = value.add(delta);\n    }\n\n    if (min !== null && value.lt(min)) {\n      value = this._stepAlign(min, /* roundUp = */ true);\n    }\n\n    if (max !== null && value.gt(max)) {\n      value = this._stepAlign(max, /* roundUp = */ false);\n    }\n\n    if (isUp ? value.lt(valueBeforeStepping) : value.gt(valueBeforeStepping)) {\n      return;\n    }\n\n    this._value = this._convertNumberToString(value.toNumber());\n  }\n\n  stepDown(n = 1) {\n    return this._stepUpdate(n, false);\n  }\n\n  stepUp(n = 1) {\n    return this._stepUpdate(n, true);\n  }\n\n  get files() {\n    if (this.type === \"file\") {\n      this[filesSymbol] = this[filesSymbol] || FileList.createImpl(this._globalObject);\n    } else {\n      this[filesSymbol] = null;\n    }\n    return this[filesSymbol];\n  }\n\n  set files(value) {\n    if (this.type === \"file\" && value !== null) {\n      this[filesSymbol] = value;\n    }\n  }\n\n  get type() {\n    const typeAttribute = this.getAttributeNS(null, \"type\");\n    return getTypeFromAttribute(typeAttribute);\n  }\n\n  set type(type) {\n    this.setAttributeNS(null, \"type\", type);\n  }\n\n  _dispatchSelectEvent() {\n    fireAnEvent(\"select\", this, undefined, { bubbles: true, cancelable: true });\n  }\n\n  _getValueLength() {\n    return typeof this.value === \"string\" ? this.value.length : 0;\n  }\n\n  select() {\n    if (!this._idlMemberApplies(\"select\")) {\n      return;\n    }\n\n    this._selectionStart = 0;\n    this._selectionEnd = this._getValueLength();\n    this._selectionDirection = \"none\";\n    this._dispatchSelectEvent();\n  }\n\n  get selectionStart() {\n    if (!this._idlMemberApplies(\"selectionStart\")) {\n      return null;\n    }\n\n    return this._selectionStart;\n  }\n\n  set selectionStart(start) {\n    if (!this._idlMemberApplies(\"selectionStart\")) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n\n    this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);\n  }\n\n  get selectionEnd() {\n    if (!this._idlMemberApplies(\"selectionEnd\")) {\n      return null;\n    }\n\n    return this._selectionEnd;\n  }\n\n  set selectionEnd(end) {\n    if (!this._idlMemberApplies(\"selectionEnd\")) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n\n    this.setSelectionRange(this._selectionStart, end, this._selectionDirection);\n  }\n\n  get selectionDirection() {\n    if (!this._idlMemberApplies(\"selectionDirection\")) {\n      return null;\n    }\n\n    return this._selectionDirection;\n  }\n\n  set selectionDirection(dir) {\n    if (!this._idlMemberApplies(\"selectionDirection\")) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n\n    this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);\n  }\n\n  setSelectionRange(start, end, dir) {\n    if (!this._idlMemberApplies(\"setSelectionRange\")) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n\n    this._selectionEnd = Math.min(end, this._getValueLength());\n    this._selectionStart = Math.min(start, this._selectionEnd);\n    this._selectionDirection = dir === \"forward\" || dir === \"backward\" ? dir : \"none\";\n    this._dispatchSelectEvent();\n  }\n\n  setRangeText(repl, start, end, selectionMode = \"preserve\") {\n    if (!this._idlMemberApplies(\"setRangeText\")) {\n      throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n    }\n\n    if (arguments.length < 2) {\n      start = this._selectionStart;\n      end = this._selectionEnd;\n    } else if (start > end) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n\n    start = Math.min(start, this._getValueLength());\n    end = Math.min(end, this._getValueLength());\n\n    const val = this.value;\n    let selStart = this._selectionStart;\n    let selEnd = this._selectionEnd;\n\n    this.value = val.slice(0, start) + repl + val.slice(end);\n\n    const newEnd = start + this.value.length;\n\n    if (selectionMode === \"select\") {\n      this.setSelectionRange(start, newEnd);\n    } else if (selectionMode === \"start\") {\n      this.setSelectionRange(start, start);\n    } else if (selectionMode === \"end\") {\n      this.setSelectionRange(newEnd, newEnd);\n    } else { // preserve\n      const delta = repl.length - (end - start);\n\n      if (selStart > end) {\n        selStart += delta;\n      } else if (selStart > start) {\n        selStart = start;\n      }\n\n      if (selEnd > end) {\n        selEnd += delta;\n      } else if (selEnd > start) {\n        selEnd = newEnd;\n      }\n\n      this.setSelectionRange(selStart, selEnd);\n    }\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#the-list-attribute\n  get list() {\n    const id = this._getAttributeIfApplies(\"list\");\n    if (!id) {\n      return null;\n    }\n\n    const el = this.getRootNode({}).getElementById(id);\n\n    if (el && el.localName === \"datalist\") {\n      return el;\n    }\n\n    return null;\n  }\n\n  // Reflected IDL attribute does not care about whether the content attribute applies.\n  get maxLength() {\n    if (!this.hasAttributeNS(null, \"maxlength\")) {\n      return 524288; // stole this from chrome\n    }\n    return parseInt(this.getAttributeNS(null, \"maxlength\"));\n  }\n\n  set maxLength(value) {\n    if (value < 0) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n    this.setAttributeNS(null, \"maxlength\", String(value));\n  }\n\n  get minLength() {\n    if (!this.hasAttributeNS(null, \"minlength\")) {\n      return 0;\n    }\n    return parseInt(this.getAttributeNS(null, \"minlength\"));\n  }\n\n  set minLength(value) {\n    if (value < 0) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n    this.setAttributeNS(null, \"minlength\", String(value));\n  }\n\n  get size() {\n    if (!this.hasAttributeNS(null, \"size\")) {\n      return 20;\n    }\n    return parseInt(this.getAttributeNS(null, \"size\"));\n  }\n\n  set size(value) {\n    if (value <= 0) {\n      throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n    }\n    this.setAttributeNS(null, \"size\", String(value));\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes\n  get _minimum() {\n    let min = this._defaultMinimum;\n    const attr = this._getAttributeIfApplies(\"min\");\n    if (attr !== null && this._convertStringToNumber !== undefined) {\n      const parsed = this._convertStringToNumber(attr);\n      if (parsed !== null) {\n        min = parsed;\n      }\n    }\n    return min;\n  }\n\n  get _maximum() {\n    let max = this._defaultMaximum;\n    const attr = this._getAttributeIfApplies(\"max\");\n    if (attr !== null && this._convertStringToNumber !== undefined) {\n      const parsed = this._convertStringToNumber(attr);\n      if (parsed !== null) {\n        max = parsed;\n      }\n    }\n    return max;\n  }\n\n  get _defaultMinimum() {\n    if (this.type === \"range\") {\n      return 0;\n    }\n    return null;\n  }\n\n  get _defaultMaximum() {\n    if (this.type === \"range\") {\n      return 100;\n    }\n    return null;\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#concept-input-step\n  get _allowedValueStep() {\n    if (!this._contentAttributeApplies(\"step\")) {\n      return null;\n    }\n    const attr = this.getAttributeNS(null, \"step\");\n    if (attr === null) {\n      return this._defaultStep * this._stepScaleFactor;\n    }\n    if (asciiCaseInsensitiveMatch(attr, \"any\")) {\n      return null;\n    }\n    const parsedStep = parseFloatingPointNumber(attr);\n    if (parsedStep === null || parsedStep <= 0) {\n      return this._defaultStep * this._stepScaleFactor;\n    }\n    return parsedStep * this._stepScaleFactor;\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-scale\n  get _stepScaleFactor() {\n    const dayInMilliseconds = 24 * 60 * 60 * 1000;\n    switch (this.type) {\n      case \"week\":\n        return 7 * dayInMilliseconds;\n      case \"date\":\n        return dayInMilliseconds;\n      case \"datetime-local\":\n      case \"datetime\":\n      case \"time\":\n        return 1000;\n    }\n    return 1;\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default\n  get _defaultStep() {\n    if (this.type === \"datetime-local\" || this.type === \"datetime\" || this.type === \"time\") {\n      return 60;\n    }\n    return 1;\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#concept-input-min-zero\n  get _stepBase() {\n    if (this._hasAttributeAndApplies(\"min\")) {\n      const min = this._convertStringToNumber(this.getAttributeNS(null, \"min\"));\n      if (min !== null) {\n        return min;\n      }\n    }\n    if (this.hasAttributeNS(null, \"value\")) {\n      const value = this._convertStringToNumber(this.getAttributeNS(null, \"value\"));\n      if (value !== null) {\n        return value;\n      }\n    }\n    if (this._defaultStepBase !== null) {\n      return this._defaultStepBase;\n    }\n    return 0;\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default-base\n  get _defaultStepBase() {\n    if (this.type === \"week\") {\n      // The start of week 1970-W01\n      return -259200000;\n    }\n    return null;\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#common-input-element-attributes\n  // When an attribute doesn't apply to an input element, user agents must ignore the attribute.\n  _contentAttributeApplies(attribute) {\n    return applicableTypesForContentAttribute[attribute].has(this.type);\n  }\n\n  _hasAttributeAndApplies(attribute) {\n    return this._contentAttributeApplies(attribute) && this.hasAttributeNS(null, attribute);\n  }\n\n  _getAttributeIfApplies(attribute) {\n    if (this._contentAttributeApplies(attribute)) {\n      return this.getAttributeNS(null, attribute);\n    }\n    return null;\n  }\n\n  _idlMemberApplies(member, type = this.type) {\n    return applicableTypesForIDLMember[member].has(type);\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    // https://html.spec.whatwg.org/multipage/input.html#hidden-state-(type=hidden)\n    // https://html.spec.whatwg.org/multipage/input.html#reset-button-state-(type=reset)\n    // https://html.spec.whatwg.org/multipage/input.html#button-state-(type=button)\n    const willNotValidateTypes = new Set([\"hidden\", \"reset\", \"button\"]);\n    // https://html.spec.whatwg.org/multipage/input.html#attr-input-readonly\n    const readOnly = this._hasAttributeAndApplies(\"readonly\");\n\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-disabled\n    return willNotValidateTypes.has(this.type) || readOnly;\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#concept-input-required\n  get _required() {\n    return this._hasAttributeAndApplies(\"required\");\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#has-a-periodic-domain\n  get _hasAPeriodicDomain() {\n    return this.type === \"time\";\n  }\n\n  // https://html.spec.whatwg.org/multipage/input.html#has-a-reversed-range\n  get _hasAReversedRange() {\n    return this._hasAPeriodicDomain && this._maximum < this._minimum;\n  }\n\n  get validity() {\n    if (!this._validity) {\n      // Constraint validation: When an element has a reversed range, and the result of applying\n      // the algorithm to convert a string to a number to the string given by the element's value\n      // is a number, and the number obtained from that algorithm is more than the maximum and less\n      // than the minimum, the element is simultaneously suffering from an underflow and suffering\n      // from an overflow.\n      const reversedRangeSufferingOverUnderflow = () => {\n        const parsedValue = this._convertStringToNumber(this._value);\n        return parsedValue !== null && parsedValue > this._maximum && parsedValue < this._minimum;\n      };\n\n      const state = {\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-missing\n        valueMissing: () => {\n          // https://html.spec.whatwg.org/multipage/input.html#the-required-attribute\n          // Constraint validation: If the element is required, and its value IDL attribute applies\n          // and is in the mode value, and the element is mutable, and the element's value is the\n          // empty string, then the element is suffering from being missing.\n          //\n          // Note: As of today, the value IDL attribute always applies.\n          if (this._required && valueAttributeMode(this.type) === \"value\" && this._mutable && this._value === \"\") {\n            return true;\n          }\n\n          switch (this.type) {\n            // https://html.spec.whatwg.org/multipage/input.html#checkbox-state-(type=checkbox)\n            // Constraint validation: If the element is required and its checkedness is\n            // false, then the element is suffering from being missing.\n            case \"checkbox\":\n              if (this._required && !this._checkedness) {\n                return true;\n              }\n              break;\n\n            // https://html.spec.whatwg.org/multipage/input.html#radio-button-state-(type=radio)\n            // Constraint validation: If an element in the radio button group is required,\n            // and all of the input elements in the radio button group have a checkedness\n            // that is false, then the element is suffering from being missing.\n            case \"radio\":\n              if (this._someInRadioGroup(\"_required\") && !this._someInRadioGroup(\"checked\")) {\n                return true;\n              }\n              break;\n\n            // https://html.spec.whatwg.org/multipage/input.html#file-upload-state-(type=file)\n            // Constraint validation: If the element is required and the list of selected files is\n            // empty, then the element is suffering from being missing.\n            case \"file\":\n              if (this._required && this.files.length === 0) {\n                return true;\n              }\n              break;\n          }\n\n          return false;\n        },\n\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-long\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-maxlength\n        // jsdom has no way at the moment to emulate a user interaction, so tooLong/tooShort have\n        // to be set to false.\n        tooLong: () => false,\n\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-short\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-minlength\n        tooShort: () => false,\n\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-overflow\n        rangeOverflow: () => {\n          // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes\n          if (this._hasAReversedRange) {\n            return reversedRangeSufferingOverUnderflow();\n          }\n          // Constraint validation: When the element has a maximum and does not have a reversed\n          // range, and the result of applying the algorithm to convert a string to a number to the\n          // string given by the element's value is a number, and the number obtained from that\n          // algorithm is more than the maximum, the element is suffering from an overflow.\n          if (this._maximum !== null) {\n            const parsedValue = this._convertStringToNumber(this._value);\n            if (parsedValue !== null && parsedValue > this._maximum) {\n              return true;\n            }\n          }\n          return false;\n        },\n\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-underflow\n        rangeUnderflow: () => {\n          // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes\n          if (this._hasAReversedRange) {\n            return reversedRangeSufferingOverUnderflow();\n          }\n          // Constraint validation: When the element has a minimum and does not have a reversed\n          // range, and the result of applying the algorithm to convert a string to a number to the\n          // string given by the element's value is a number, and the number obtained from that\n          // algorithm is less than the minimum, the element is suffering from an underflow.\n          if (this._minimum !== null) {\n            const parsedValue = this._convertStringToNumber(this._value);\n            if (parsedValue !== null && parsedValue < this._minimum) {\n              return true;\n            }\n          }\n          return false;\n        },\n\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-pattern-mismatch\n        patternMismatch: () => {\n          // https://html.spec.whatwg.org/multipage/input.html#the-pattern-attribute\n          if (this._value === \"\" || !this._hasAttributeAndApplies(\"pattern\")) {\n            return false;\n          }\n          let regExp;\n          try {\n            const pattern = this.getAttributeNS(null, \"pattern\");\n            // The pattern attribute should be matched against the entire value, not just any\n            // subset, so add ^ and $ anchors. But also check the validity of the regex itself\n            // first.\n            new RegExp(pattern, \"u\"); // eslint-disable-line no-new\n            regExp = new RegExp(\"^(?:\" + pattern + \")$\", \"u\");\n          } catch (e) {\n            return false;\n          }\n          if (this._hasAttributeAndApplies(\"multiple\")) {\n            return !splitOnCommas(this._value).every(value => regExp.test(value));\n          }\n          return !regExp.test(this._value);\n        },\n\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-step-mismatch\n        // https://html.spec.whatwg.org/multipage/input.html#attr-input-step\n        stepMismatch: () => {\n          const allowedValueStep = this._allowedValueStep;\n          if (allowedValueStep === null) {\n            return false;\n          }\n          const number = this._convertStringToNumber(this._value);\n          return number !== null && !this._isStepAligned(number);\n        },\n\n        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-type-mismatch\n        typeMismatch: () => {\n          switch (this.type) {\n            // https://html.spec.whatwg.org/multipage/input.html#url-state-(type=url)\n            // Constraint validation: While the value of the element is neither the empty string\n            // nor a valid absolute URL, the element is suffering from a type mismatch.\n            case \"url\":\n              if (this._value !== \"\" && !isValidAbsoluteURL(this._value)) {\n                return true;\n              }\n              break;\n\n            // https://html.spec.whatwg.org/multipage/input.html#e-mail-state-(type=email)\n            // Constraint validation [multiple=false]: While the value of the element is neither the empty\n            // string nor a single valid e - mail address, the element is suffering from a type mismatch.\n            // Constraint validation [multiple=true]: While the value of the element is not a valid e-mail address list,\n            // the element is suffering from a type mismatch.\n            case \"email\":\n              if (this._value !== \"\" && !isValidEmailAddress(this._getValue(), this.hasAttributeNS(null, \"multiple\"))) {\n                return true;\n              }\n              break;\n          }\n          return false;\n        }\n      };\n\n      this._validity = ValidityState.createImpl(this._globalObject, [], {\n        element: this,\n        state\n      });\n    }\n    return this._validity;\n  }\n\n  [cloningSteps](copy, node) {\n    copy._value = node._value;\n    copy._checkedness = node._checkedness;\n    copy._dirtyValue = node._dirtyValue;\n    copy._dirtyCheckedness = node._dirtyCheckedness;\n  }\n}\n\nmixin(HTMLInputElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLInputElementImpl\n};\n"],"mappings":"AAAA;;AACA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gCAAD,CAA5B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,uBAAD,CAAxB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,oBAAD,CAAP,CAA8BI,cAAtD;;AACA,MAAMC,QAAQ,GAAGL,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAMM,+BAA+B,GACnCN,OAAO,CAAC,2DAAD,CAAP,CAAqEI,cADvE;;AAEA,MAAMG,aAAa,GAAGP,OAAO,CAAC,4BAAD,CAA7B;;AACA,MAAM;EAAEQ;AAAF,IAAYR,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAM;EAAES,aAAF;EAAiBC;AAAjB,IAAkCV,OAAO,CAAC,+BAAD,CAA/C;;AACA,MAAM;EAAEW,qBAAF;EAAyBC;AAAzB,IAAuCZ,OAAO,CAAC,0BAAD,CAApD;;AACA,MAAM;EAAEa;AAAF,IAAkBb,OAAO,CAAC,mBAAD,CAA/B;;AACA,MAAM;EACJc,UADI;EAEJC,mBAFI;EAGJC,kBAHI;EAIJC;AAJI,IAKFjB,OAAO,CAAC,0BAAD,CALX;;AAMA,MAAM;EACJkB,yBADI;EAEJC,cAFI;EAGJC,wBAHI;EAIJC;AAJI,IAKFrB,OAAO,CAAC,oBAAD,CALX;;AAMA,MAAM;EAAEsB;AAAF,IAAatB,OAAO,CAAC,4BAAD,CAA1B;;AACA,MAAM;EACJuB,2BADI;EAEJC,yBAFI;EAGJC,mBAHI;EAIJC;AAJI,IAKF1B,OAAO,CAAC,mCAAD,CALX;;AAOA,MAAM2B,WAAW,GAAGC,MAAM,CAAC,OAAD,CAA1B,C,CAEA;;AACA,MAAMC,iBAAiB,GAAG,IAAIC,GAAJ,CAAQ,CAChC,QADgC,EACtB,MADsB,EACd,QADc,EACJ,KADI,EACG,KADH,EACU,OADV,EACmB,UADnB,EAC+B,MAD/B,EAEhC,OAFgC,EAEvB,MAFuB,EAEf,MAFe,EAEP,gBAFO,EAEW,QAFX,EAEqB,OAFrB,EAE8B,OAF9B,EAEuC,UAFvC,EAEmD,OAFnD,EAGhC,MAHgC,EAGxB,QAHwB,EAGd,OAHc,EAGL,OAHK,EAGI,QAHJ,CAAR,CAA1B,C,CAMA;;AAEA,MAAMC,mCAAmC,GAAG,IAAID,GAAJ,CAAQ,CAAC,MAAD,EAAS,QAAT,EAAmB,KAAnB,EAA0B,KAA1B,EAAiC,UAAjC,CAAR,CAA5C;AACA,MAAME,YAAY,GAAG,IAAIF,GAAJ,CAAQ,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,MAA1B,EAAkC,gBAAlC,EAAoD,QAApD,EAA8D,OAA9D,CAAR,CAArB;AAEA,MAAMG,2BAA2B,GAAG;EAClCC,WAAW,EAAE,IAAIJ,GAAJ,CAAQ,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,MAA1B,CAAR,CADqB;EAElCK,aAAa,EAAEH,YAFmB;EAIlCI,MAAM,EAAE,IAAIN,GAAJ,CAAQ,CACd,MADc,EACN,QADM,EACI,KADJ,EACW,KADX,EACkB,OADlB,EAC2B,UAD3B,EACuC,MADvC,EAC+C,OAD/C,EACwD,MADxD,EAEd,MAFc,EAEN,gBAFM,EAEY,QAFZ,EAEsB,OAFtB,EAE+B,MAF/B,CAAR,CAJ0B;EAQlCO,cAAc,EAAEN,mCARkB;EASlCO,YAAY,EAAEP,mCAToB;EAUlCQ,kBAAkB,EAAER,mCAVc;EAWlCS,YAAY,EAAET,mCAXoB;EAYlCU,iBAAiB,EAAEV,mCAZe;EAalCW,QAAQ,EAAEV,YAbwB;EAclCW,MAAM,EAAEX;AAd0B,CAApC;AAiBA,MAAMY,sBAAsB,GAAG,IAAId,GAAJ,CAAQ,CAAC,MAAD,EAAS,QAAT,EAAmB,KAAnB,EAA0B,KAA1B,EAAiC,OAAjC,EAA0C,UAA1C,CAAR,CAA/B;AACA,MAAMe,aAAa,GACjB,IAAIf,GAAJ,CAAQ,CAAC,GAAGc,sBAAJ,EAA4B,MAA5B,EAAoC,OAApC,EAA6C,MAA7C,EAAqD,MAArD,EAA6D,gBAA7D,EAA+E,QAA/E,CAAR,CADF;AAGA,MAAME,kCAAkC,GAAG;EACzCC,IAAI,EAAE,IAAIjB,GAAJ,CAAQ,CAAC,MAAD,EAAS,QAAT,EAAmB,KAAnB,EAA0B,KAA1B,EAAiC,OAAjC,EAA0C,GAAGE,YAA7C,EAA2D,OAA3D,CAAR,CADmC;EAEzCgB,GAAG,EAAEhB,YAFoC;EAGzCiB,SAAS,EAAEL,sBAH8B;EAIzCM,GAAG,EAAElB,YAJoC;EAKzCmB,SAAS,EAAEP,sBAL8B;EAMzCQ,QAAQ,EAAE,IAAItB,GAAJ,CAAQ,CAAC,OAAD,EAAU,MAAV,CAAR,CAN+B;EAOzCuB,OAAO,EAAET,sBAPgC;EAQzCU,QAAQ,EAAET,aAR+B;EASzCU,QAAQ,EAAE,IAAIzB,GAAJ,CAAQ,CAAC,GAAGe,aAAJ,EAAmB,UAAnB,EAA+B,OAA/B,EAAwC,MAAxC,CAAR,CAT+B;EAUzCW,IAAI,EAAExB;AAVmC,CAA3C;AAaA,MAAMyB,yBAAyB,GAAG,IAAI3B,GAAJ,CAAQ,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,EAA8B,OAA9B,EAAuC,QAAvC,CAAR,CAAlC;AACA,MAAM4B,2BAA2B,GAAG,IAAI5B,GAAJ,CAAQ,CAAC,UAAD,EAAa,OAAb,CAAR,CAApC;;AAEA,SAAS6B,kBAAT,CAA4BC,IAA5B,EAAkC;EAChC,IAAIH,yBAAyB,CAACI,GAA1B,CAA8BD,IAA9B,CAAJ,EAAyC;IACvC,OAAO,SAAP;EACD;;EACD,IAAIF,2BAA2B,CAACG,GAA5B,CAAgCD,IAAhC,CAAJ,EAA2C;IACzC,OAAO,YAAP;EACD;;EACD,IAAIA,IAAI,KAAK,MAAb,EAAqB;IACnB,OAAO,UAAP;EACD;;EACD,OAAO,OAAP;AACD;;AAED,SAASE,oBAAT,CAA8BC,aAA9B,EAA6C;EAC3C,IAAI,OAAOA,aAAP,KAAyB,QAA7B,EAAuC;IACrC,OAAO,MAAP;EACD;;EACD,MAAMH,IAAI,GAAGzC,cAAc,CAAC4C,aAAD,CAA3B;EACA,OAAOlC,iBAAiB,CAACgC,GAAlB,CAAsBD,IAAtB,IAA8BA,IAA9B,GAAqC,MAA5C;AACD;;AAED,MAAMI,oBAAN,SAAmC7D,eAAnC,CAAmD;EACjD8D,WAAW,CAACC,YAAD,EAAeC,IAAf,EAAqBC,WAArB,EAAkC;IAC3C,MAAMF,YAAN,EAAoBC,IAApB,EAA0BC,WAA1B;IAEA,KAAKC,eAAL,GAAuB,KAAKC,aAAL,GAAqB,CAA5C;IACA,KAAKC,mBAAL,GAA2B,MAA3B;IACA,KAAKC,MAAL,GAAc,EAAd;IACA,KAAKC,WAAL,GAAmB,KAAnB;IACA,KAAKC,YAAL,GAAoB,KAApB;IACA,KAAKC,iBAAL,GAAyB,KAAzB;IAEA,KAAKC,qBAAL,GAA6B,IAA7B;IACA,KAAKC,mDAAL,GAA2D,KAA3D;IAEA,KAAKC,aAAL,GAAqB,KAArB;IAEA,KAAKC,2BAAL,GAAmC,EAAnC;IAEA,KAAKC,OAAL,GAAe,IAAf;IAEA,KAAKC,sBAAL,GAA8B,IAA9B;EACD,CArBgD,CAuBjD;;;EAC0B,IAAtBC,sBAAsB,GAAG;IAC3B,OAAO3D,2BAA2B,CAAC,KAAKqC,IAAN,CAAlC;EACD;;EAEyB,IAAtBuB,sBAAsB,GAAG;IAC3B,OAAOzD,2BAA2B,CAAC,KAAKkC,IAAN,CAAlC;EACD;;EAEuB,IAApBwB,oBAAoB,GAAG;IACzB,OAAO3D,mBAAmB,CAAC,KAAKmC,IAAN,CAA1B;EACD;;EAEuB,IAApByB,oBAAoB,GAAG;IACzB,OAAO7D,yBAAyB,CAAC,KAAKoC,IAAN,CAAhC;EACD;;EAED0B,cAAc,CAACC,CAAD,EAAI;IAChB,OAAO,IAAIrF,OAAJ,CAAYqF,CAAZ,EAAeC,KAAf,CAAqB,KAAKC,SAA1B,EACJC,MADI,CACG,KAAKC,iBADR,EAEJC,MAFI,EAAP;EAGD,CA5CgD,CA8CjD;;;EACAC,UAAU,CAACN,CAAD,EAAIO,OAAJ,EAAa;IACrB,MAAMC,gBAAgB,GAAG,KAAKJ,iBAA9B;IACA,MAAMK,QAAQ,GAAG,KAAKP,SAAtB;IAEA,OAAO,IAAIvF,OAAJ,CAAYqF,CAAZ,EAAeC,KAAf,CAAqBQ,QAArB,EACJC,SADI,CACMF,gBADN,EACwBD,OAAO,GAAG5F,OAAO,CAACgG,QAAX,GAAsBhG,OAAO,CAACiG,UAD7D,EAEJC,GAFI,CAEAJ,QAFA,CAAP;EAGD,CAtDgD,CAwDjD;EACA;;;EACAK,SAAS,GAAG;IACV,OAAO,KAAK7B,MAAZ;EACD;;EAED8B,4BAA4B,GAAG;IAC7B,IAAI,KAAK1C,IAAL,KAAc,UAAlB,EAA8B;MAC5B,KAAK2C,OAAL,GAAe,CAAC,KAAKA,OAArB;MACA,KAAK1B,mDAAL,GAA2D,KAAKC,aAAhE;MACA,KAAKA,aAAL,GAAqB,KAArB;IACD,CAJD,MAIO,IAAI,KAAKlB,IAAL,KAAc,OAAlB,EAA2B;MAChC,KAAKgB,qBAAL,GAA6B,KAAK2B,OAAlC;MACA,KAAKA,OAAL,GAAe,IAAf;IACD;EACF;;EAEDC,iCAAiC,GAAG;IAClC,IAAI,KAAK5C,IAAL,KAAc,UAAlB,EAA8B;MAC5B,KAAK2C,OAAL,GAAe,CAAC,KAAKA,OAArB;MACA,KAAKzB,aAAL,GAAqB,KAAKD,mDAA1B;IACD,CAHD,MAGO,IAAI,KAAKjB,IAAL,KAAc,OAAlB,EAA2B;MAChC,IAAI,KAAKgB,qBAAL,KAA+B,IAAnC,EAAyC;QACvC,KAAK2B,OAAL,GAAe,KAAK3B,qBAApB;QACA,KAAKA,qBAAL,GAA6B,IAA7B;MACD;IACF;EACF;;EAED6B,mBAAmB,GAAG;IACpB,IAAI,CAAC,KAAKC,QAAN,IAAkB,KAAK9C,IAAL,KAAc,UAAhC,IAA8C,KAAKA,IAAL,KAAc,OAAhE,EAAyE;MACvE;IACD;;IAED,MAAM;MAAE+C;IAAF,IAAW,IAAjB;;IAEA,IAAI,KAAK/C,IAAL,KAAc,UAAd,IAA6B,KAAKA,IAAL,KAAc,OAAd,IAAyB,CAAC,KAAKgB,qBAAhE,EAAwF;MACtF,IAAI,KAAKgC,WAAT,EAAsB;QACpB/F,WAAW,CAAC,OAAD,EAAU,IAAV,EAAgBgG,SAAhB,EAA2B;UAAEC,OAAO,EAAE;QAAX,CAA3B,CAAX;QACAjG,WAAW,CAAC,QAAD,EAAW,IAAX,EAAiBgG,SAAjB,EAA4B;UAAEC,OAAO,EAAE;QAAX,CAA5B,CAAX;MACD;IACF,CALD,MAKO,IAAIH,IAAI,IAAI,KAAK/C,IAAL,KAAc,QAA1B,EAAoC;MACzC+C,IAAI,CAACI,SAAL;IACD,CAFM,MAEA,IAAIJ,IAAI,IAAI,KAAK/C,IAAL,KAAc,OAA1B,EAAmC;MACxC+C,IAAI,CAACK,QAAL;IACD;EACF;;EAEDC,aAAa,CAACC,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAsB;IACjC,MAAMC,OAAO,GAAGhH,QAAQ,CAACiH,cAAT,CAAwB,IAAxB,CAAhB;;IACA,IAAI,CAAC,KAAK7C,WAAN,IAAqByC,IAAI,KAAK,OAAlC,EAA2C;MACzC,KAAK1C,MAAL,GAAcvD,mBAAmB,CAAC,IAAD,EAAOoG,OAAO,CAACE,YAAf,CAAjC;IACD;;IACD,IAAI,CAAC,KAAK5C,iBAAN,IAA2BuC,IAAI,KAAK,SAAxC,EAAmD;MACjD,KAAKxC,YAAL,GAAoB2C,OAAO,CAACG,cAA5B;;MACA,IAAI,KAAK9C,YAAT,EAAuB;QACrB,KAAK+C,4BAAL;MACD;IACF;;IAED,IAAIP,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,MAAhC,EAAwC;MACtC,IAAI,KAAKxC,YAAT,EAAuB;QACrB,KAAK+C,4BAAL;MACD;IACF;;IAED,IAAIP,IAAI,KAAK,MAAb,EAAqB;MACnB,MAAMQ,QAAQ,GAAG5D,oBAAoB,CAACsD,MAAD,CAArC;MACA,MAAMO,OAAO,GAAG7D,oBAAoB,CAACqD,KAAD,CAApC,CAFmB,CAGnB;;MACA,IAAIO,QAAQ,KAAKC,OAAjB,EAA0B;QACxB,MAAMC,aAAa,GAAGjE,kBAAkB,CAAC+D,QAAD,CAAxC;QACA,MAAMG,YAAY,GAAGlE,kBAAkB,CAACgE,OAAD,CAAvC;;QACA,IAAIC,aAAa,KAAK,OAAlB,IAA6B,KAAKpD,MAAL,KAAgB,EAA7C,KACCqD,YAAY,KAAK,SAAjB,IAA8BA,YAAY,KAAK,YADhD,CAAJ,EACmE;UACjE,KAAKC,cAAL,CAAoB,IAApB,EAA0B,OAA1B,EAAmC,KAAKtD,MAAxC;QACD,CAHD,MAGO,IAAIoD,aAAa,KAAK,OAAlB,IAA6BC,YAAY,KAAK,OAAlD,EAA2D;UAChE,KAAKrD,MAAL,GAAc,KAAKuD,cAAL,CAAoB,IAApB,EAA0B,OAA1B,KAAsC,EAApD;UACA,KAAKtD,WAAL,GAAmB,KAAnB;QACD,CAHM,MAGA,IAAImD,aAAa,KAAK,UAAlB,IAAgCC,YAAY,KAAK,UAArD,EAAiE;UACtE,KAAKrD,MAAL,GAAc,EAAd;QACD;;QAED,KAAKwD,kBAAL;;QAEA,KAAKxD,MAAL,GAAcvD,mBAAmB,CAAC,IAAD,EAAO,KAAKuD,MAAZ,CAAjC;;QAEA,MAAMyD,oBAAoB,GAAG,KAAKC,iBAAL,CAAuB,cAAvB,EAAuCR,QAAvC,CAA7B;;QACA,MAAMS,aAAa,GAAG,KAAKD,iBAAL,CAAuB,cAAvB,EAAuCP,OAAvC,CAAtB;;QACA,IAAI,CAACM,oBAAD,IAAyBE,aAA7B,EAA4C;UAC1C,KAAK9D,eAAL,GAAuB,CAAvB;UACA,KAAKC,aAAL,GAAqB,CAArB;UACA,KAAKC,mBAAL,GAA2B,MAA3B;QACD;MACF;IACF;;IAED,MAAM0C,aAAN,CAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,MAAjC;EACD,CA1JgD,CA4JjD;;;EACAY,kBAAkB,GAAG;IACnB,IAAI,KAAKtD,YAAT,EAAuB;MACrB,KAAK+C,4BAAL;IACD;EACF;;EAEDW,UAAU,GAAG;IACX,MAAMf,OAAO,GAAGhH,QAAQ,CAACiH,cAAT,CAAwB,IAAxB,CAAhB;IACA,KAAK9C,MAAL,GAAcvD,mBAAmB,CAAC,IAAD,EAAOoG,OAAO,CAACE,YAAf,CAAjC;IACA,KAAK9C,WAAL,GAAmB,KAAnB;IACA,KAAKC,YAAL,GAAoB2C,OAAO,CAACG,cAA5B;IACA,KAAK7C,iBAAL,GAAyB,KAAzB;;IACA,IAAI,KAAKD,YAAT,EAAuB;MACrB,KAAK+C,4BAAL;IACD;EACF;;EAEDY,iBAAiB,GAAG;IAClB,IAAI,KAAK3D,YAAT,EAAuB;MACrB,KAAK+C,4BAAL;IACD;EACF;;EAE2B,IAAxBa,wBAAwB,GAAG;IAC7B,MAAMjB,OAAO,GAAGhH,QAAQ,CAACiH,cAAT,CAAwB,IAAxB,CAAhB;IACA,MAAMiB,IAAI,GAAG,KAAKC,qBAAlB;;IACA,IAAI,CAACD,IAAL,EAAW;MACT,OAAO,EAAP;IACD;;IAED,MAAME,MAAM,GAAG,EAAf;IAEA,MAAMC,WAAW,GAAGjI,aAAa,CAACkI,YAAd,CAA2BJ,IAA3B,CAApB;;IACA,KAAK,MAAMK,SAAX,IAAwBF,WAAxB,EAAqC;MACnC,IAAIE,SAAS,CAACJ,qBAAV,KAAoCD,IAAxC,EAA8C;QAC5C;MACD;;MAED,MAAMM,gBAAgB,GAAGxI,QAAQ,CAACiH,cAAT,CAAwBsB,SAAxB,CAAzB;;MACA,IAAI,CAACC,gBAAgB,CAAC3B,IAAlB,IAA0B2B,gBAAgB,CAAC3B,IAAjB,KAA0BG,OAAO,CAACH,IAAhE,EAAsE;QACpE;MACD;;MAED,IAAI0B,SAAS,KAAK,IAAlB,EAAwB;QACtBH,MAAM,CAACK,IAAP,CAAYF,SAAZ;MACD;IACF;;IACD,OAAOH,MAAP;EACD;;EAEDhB,4BAA4B,GAAG;IAC7B,KAAK,MAAMsB,iBAAX,IAAgC,KAAKT,wBAArC,EAA+D;MAC7DS,iBAAiB,CAACrE,YAAlB,GAAiC,KAAjC;IACD;EACF;;EAEwB,IAArB8D,qBAAqB,GAAG;IAC1B,MAAMnB,OAAO,GAAGhH,QAAQ,CAACiH,cAAT,CAAwB,IAAxB,CAAhB;;IACA,IAAI,KAAK1D,IAAL,KAAc,OAAd,IAAyB,CAACyD,OAAO,CAACH,IAAtC,EAA4C;MAC1C,OAAO,IAAP;IACD;;IAED,IAAI8B,CAAC,GAAGvI,aAAa,CAACwI,MAAd,CAAqB,IAArB,CAAR;;IACA,OAAOD,CAAP,EAAU;MACR;MACA;MACA,IAAI,CAACvI,aAAa,CAACwI,MAAd,CAAqBD,CAArB,CAAD,IAA4BA,CAAC,CAACE,QAAF,CAAWC,WAAX,OAA6B,MAA7D,EAAqE;QACnE,OAAOH,CAAP;MACD;;MACDA,CAAC,GAAGvI,aAAa,CAACwI,MAAd,CAAqBD,CAArB,CAAJ;IACD;;IACD,OAAO,IAAP;EACD;;EAEDI,iBAAiB,CAAClC,IAAD,EAAO;IACtB,IAAI,KAAKA,IAAL,CAAJ,EAAgB;MACd,OAAO,IAAP;IACD;;IACD,OAAO,KAAKoB,wBAAL,CAA8Be,IAA9B,CAAmCN,iBAAiB,IAAIA,iBAAiB,CAAC7B,IAAD,CAAzE,CAAP;EACD;;EAEW,IAARR,QAAQ,GAAG;IACb,OAAO,CAAC5F,UAAU,CAAC,IAAD,CAAX,IAAqB,CAAC,KAAKwI,uBAAL,CAA6B,UAA7B,CAA7B;EACD;;EAES,IAANC,MAAM,GAAG;IACX,OAAO5I,qBAAqB,CAAC,IAAD,CAA5B;EACD;;EAEO,IAAJgG,IAAI,GAAG;IACT,OAAO/F,SAAS,CAAC,IAAD,CAAhB;EACD;;EAEU,IAAP2F,OAAO,GAAG;IACZ,OAAO,KAAK7B,YAAZ;EACD;;EAEU,IAAP6B,OAAO,CAACA,OAAD,EAAU;IACnB,KAAK7B,YAAL,GAAoB8E,OAAO,CAACjD,OAAD,CAA3B;IACA,KAAK5B,iBAAL,GAAyB,IAAzB;;IACA,IAAI,KAAKD,YAAT,EAAuB;MACrB,KAAK+C,4BAAL;IACD;EACF;;EAEQ,IAALN,KAAK,GAAG;IACV,QAAQxD,kBAAkB,CAAC,KAAKC,IAAN,CAA1B;MACE;MACA,KAAK,OAAL;QACE,OAAO,KAAKyC,SAAL,EAAP;MACF;;MACA,KAAK,SAAL;QAAgB;UACd,MAAMoD,IAAI,GAAG,KAAK1B,cAAL,CAAoB,IAApB,EAA0B,OAA1B,CAAb;UACA,OAAO0B,IAAI,KAAK,IAAT,GAAgBA,IAAhB,GAAuB,EAA9B;QACD;MACD;;MACA,KAAK,YAAL;QAAmB;UACjB,MAAMA,IAAI,GAAG,KAAK1B,cAAL,CAAoB,IAApB,EAA0B,OAA1B,CAAb;UACA,OAAO0B,IAAI,KAAK,IAAT,GAAgBA,IAAhB,GAAuB,IAA9B;QACD;MACD;;MACA,KAAK,UAAL;QACE,OAAO,KAAKC,KAAL,CAAWC,MAAX,GAAoB,mBAAmB,KAAKD,KAAL,CAAW,CAAX,EAAcxC,IAArD,GAA4D,EAAnE;;MACF;QACE,MAAM,IAAI0C,KAAJ,CAAU,oDAAV,CAAN;IAlBJ;EAoBD;;EAEQ,IAALzC,KAAK,CAAC0C,GAAD,EAAM;IACb,QAAQlG,kBAAkB,CAAC,KAAKC,IAAN,CAA1B;MACE;MACA,KAAK,OAAL;QAAc;UACZ,MAAMkG,QAAQ,GAAG,KAAKtF,MAAtB;UACA,KAAKA,MAAL,GAAcvD,mBAAmB,CAAC,IAAD,EAAO4I,GAAP,CAAjC;UACA,KAAKpF,WAAL,GAAmB,IAAnB;;UAEA,IAAIqF,QAAQ,KAAK,KAAKtF,MAAtB,EAA8B;YAC5B,KAAKH,eAAL,GAAuB,KAAKC,aAAL,GAAqB,KAAKyF,eAAL,EAA5C;YACA,KAAKxF,mBAAL,GAA2B,MAA3B;UACD;;UACD;QACD;MAED;MACA;;MACA,KAAK,SAAL;MACA,KAAK,YAAL;QACE,KAAKuD,cAAL,CAAoB,IAApB,EAA0B,OAA1B,EAAmC+B,GAAnC;QACA;MAEF;;MACA,KAAK,UAAL;QACE,IAAIA,GAAG,KAAK,EAAZ,EAAgB;UACd,KAAKH,KAAL,CAAWC,MAAX,GAAoB,CAApB;QACD,CAFD,MAEO;UACL,MAAM5J,YAAY,CAACiK,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAC5C,oGAD4C,EAE5C,mBAF4C,CAAxC,CAAN;QAID;;QACD;;MAEF;QACE,MAAM,IAAIL,KAAJ,CAAU,oDAAV,CAAN;IAlCJ;EAoCD,CAlUgD,CAoUjD;;;EACe,IAAX1H,WAAW,GAAG;IAChB,IAAI,CAAC,KAAKgG,iBAAL,CAAuB,aAAvB,CAAL,EAA4C;MAC1C,OAAO,IAAP;IACD;;IAED,MAAMgC,MAAM,GAAG,KAAKC,cAAL,CAAoBC,YAAnC;;IACA,MAAMC,cAAc,GAAG,KAAKhF,oBAAL,CAA0B,KAAKb,MAA/B,CAAvB;;IAEA,IAAI6F,cAAc,YAAYC,IAA9B,EAAoC;MAClC,OAAO,IAAIJ,MAAM,CAACI,IAAX,CAAgBD,cAAc,CAACE,OAAf,EAAhB,CAAP;IACD;;IAED,OAAO,IAAP;EACD;;EAEc,IAAXrI,WAAW,CAACqD,CAAD,EAAI;IACjB,IAAI,CAAC,KAAK2C,iBAAL,CAAuB,aAAvB,CAAL,EAA4C;MAC1C,MAAMnI,YAAY,CAACiK,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAC5C,8GACA,SAF4C,EAG5C,mBAH4C,CAAxC,CAAN;IAKD;;IAED,IAAI1E,CAAC,KAAK,IAAN,IAAc,CAACjE,MAAM,CAACiE,CAAD,CAAzB,EAA8B;MAC5B,MAAM,IAAIiF,SAAJ,CAAc,2FAClB,aADI,CAAN;IAED;;IAED,IAAIjF,CAAC,KAAK,IAAN,IAAckF,KAAK,CAAClF,CAAD,CAAvB,EAA4B;MAC1B,KAAKf,MAAL,GAAc,EAAd;IACD;;IAED,KAAKA,MAAL,GAAc,KAAKY,oBAAL,CAA0BG,CAA1B,CAAd;EACD,CAvWgD,CAyWjD;;;EACiB,IAAbpD,aAAa,GAAG;IAClB,IAAI,CAAC,KAAK+F,iBAAL,CAAuB,eAAvB,CAAL,EAA8C;MAC5C,OAAOwC,GAAP;IACD;;IAED,MAAMC,WAAW,GAAG,KAAKzF,sBAAL,CAA4B,KAAKV,MAAjC,CAApB;;IACA,OAAOmG,WAAW,KAAK,IAAhB,GAAuBA,WAAvB,GAAqCD,GAA5C;EACD;;EAEgB,IAAbvI,aAAa,CAACoD,CAAD,EAAI;IACnB,IAAI,CAACqF,QAAQ,CAACrF,CAAD,CAAb,EAAkB;MAChB,MAAM,IAAIiF,SAAJ,CAAc,wCAAd,CAAN;IACD;;IAED,IAAI,CAAC,KAAKtC,iBAAL,CAAuB,eAAvB,CAAL,EAA8C;MAC5C,MAAMnI,YAAY,CAACiK,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAC5C,2GACA,gBAF4C,EAG5C,mBAH4C,CAAxC,CAAN;IAKD;;IAED,KAAKzF,MAAL,GAAc,KAAKW,sBAAL,CAA4BI,CAA5B,CAAd;EACD,CAjYgD,CAmYjD;;;EACAsF,WAAW,CAACC,CAAD,EAAIC,IAAJ,EAAU;IACnB,MAAMC,UAAU,GAAGD,IAAI,GAAG,QAAH,GAAc,UAArC;;IACA,IAAI,CAAC,KAAK7C,iBAAL,CAAuB8C,UAAvB,CAAL,EAAyC;MACvC,MAAMjL,YAAY,CAACiK,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAC3C,qBAAoBe,UAAW,kCAAhC,GACA,oDAF4C,EAG5C,mBAH4C,CAAxC,CAAN;IAKD;;IAED,MAAMjF,gBAAgB,GAAG,KAAKJ,iBAA9B;;IACA,IAAII,gBAAgB,KAAK,IAAzB,EAA+B;MAC7B,MAAMhG,YAAY,CAACiK,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAC3C,qBAAoBe,UAAW,kCAAhC,GACA,iDAF4C,EAG5C,mBAH4C,CAAxC,CAAN;IAKD;;IAED,MAAM9H,GAAG,GAAG,KAAK+H,QAAjB;IACA,MAAMjI,GAAG,GAAG,KAAKkI,QAAjB;;IAEA,IAAIhI,GAAG,KAAK,IAAR,IAAgBF,GAAG,KAAK,IAA5B,EAAkC;MAChC,IAAIE,GAAG,GAAGF,GAAV,EAAe;QACb;MACD;;MAED,MAAMmI,kBAAkB,GAAG,KAAKtF,UAAL,CAAgB3F,OAAO,CAACkG,GAAR,CAAYlD,GAAZ,EAAiB6C,gBAAjB,CAAhB;MAAoD;MAAgB,KAApE,CAA3B;;MACA,IAAIoF,kBAAkB,CAACC,EAAnB,CAAsBlI,GAAtB,KAA8BiI,kBAAkB,CAACE,EAAnB,CAAsBrI,GAAtB,CAAlC,EAA8D;QAC5D;MACD;IACF;;IAED,IAAImE,KAAK,GAAG,CAAZ;;IACA,IAAI;MACFA,KAAK,GAAG,KAAKhF,aAAb;;MACA,IAAIsI,KAAK,CAACtD,KAAD,CAAT,EAAkB;QAAE;QAClBA,KAAK,GAAG,CAAR;MACD;IACF,CALD,CAKE,OAAOmE,KAAP,EAAc,CACd;IACD;;IACDnE,KAAK,GAAG,IAAIjH,OAAJ,CAAYiH,KAAZ,CAAR;IAEA,MAAMoE,mBAAmB,GAAGpE,KAA5B;;IAEA,IAAI,CAAC,KAAK7B,cAAL,CAAoB6B,KAApB,CAAL,EAAiC;MAC/BA,KAAK,GAAG,KAAKtB,UAAL,CAAgBsB,KAAhB;MAAuB;MAAgB4D,IAAvC,CAAR;IACD,CAFD,MAEO;MACL,IAAIS,KAAK,GAAGtL,OAAO,CAACuL,GAAR,CAAYX,CAAZ,EAAe/E,gBAAf,CAAZ;;MACA,IAAI,CAACgF,IAAL,EAAW;QACTS,KAAK,GAAGA,KAAK,CAACE,GAAN,EAAR;MACD;;MACDvE,KAAK,GAAGA,KAAK,CAACf,GAAN,CAAUoF,KAAV,CAAR;IACD;;IAED,IAAItI,GAAG,KAAK,IAAR,IAAgBiE,KAAK,CAACiE,EAAN,CAASlI,GAAT,CAApB,EAAmC;MACjCiE,KAAK,GAAG,KAAKtB,UAAL,CAAgB3C,GAAhB;MAAqB;MAAgB,IAArC,CAAR;IACD;;IAED,IAAIF,GAAG,KAAK,IAAR,IAAgBmE,KAAK,CAACkE,EAAN,CAASrI,GAAT,CAApB,EAAmC;MACjCmE,KAAK,GAAG,KAAKtB,UAAL,CAAgB7C,GAAhB;MAAqB;MAAgB,KAArC,CAAR;IACD;;IAED,IAAI+H,IAAI,GAAG5D,KAAK,CAACiE,EAAN,CAASG,mBAAT,CAAH,GAAmCpE,KAAK,CAACkE,EAAN,CAASE,mBAAT,CAA3C,EAA0E;MACxE;IACD;;IAED,KAAK/G,MAAL,GAAc,KAAKW,sBAAL,CAA4BgC,KAAK,CAACwE,QAAN,EAA5B,CAAd;EACD;;EAEDjJ,QAAQ,GAAQ;IAAA,IAAPoI,CAAO,uEAAH,CAAG;IACd,OAAO,KAAKD,WAAL,CAAiBC,CAAjB,EAAoB,KAApB,CAAP;EACD;;EAEDnI,MAAM,GAAQ;IAAA,IAAPmI,CAAO,uEAAH,CAAG;IACZ,OAAO,KAAKD,WAAL,CAAiBC,CAAjB,EAAoB,IAApB,CAAP;EACD;;EAEQ,IAALpB,KAAK,GAAG;IACV,IAAI,KAAK9F,IAAL,KAAc,MAAlB,EAA0B;MACxB,KAAKjC,WAAL,IAAoB,KAAKA,WAAL,KAAqB1B,QAAQ,CAAC2L,UAAT,CAAoB,KAAK3B,aAAzB,CAAzC;IACD,CAFD,MAEO;MACL,KAAKtI,WAAL,IAAoB,IAApB;IACD;;IACD,OAAO,KAAKA,WAAL,CAAP;EACD;;EAEQ,IAAL+H,KAAK,CAACvC,KAAD,EAAQ;IACf,IAAI,KAAKvD,IAAL,KAAc,MAAd,IAAwBuD,KAAK,KAAK,IAAtC,EAA4C;MAC1C,KAAKxF,WAAL,IAAoBwF,KAApB;IACD;EACF;;EAEO,IAAJvD,IAAI,GAAG;IACT,MAAMG,aAAa,GAAG,KAAKgE,cAAL,CAAoB,IAApB,EAA0B,MAA1B,CAAtB;IACA,OAAOjE,oBAAoB,CAACC,aAAD,CAA3B;EACD;;EAEO,IAAJH,IAAI,CAACA,IAAD,EAAO;IACb,KAAKkE,cAAL,CAAoB,IAApB,EAA0B,MAA1B,EAAkClE,IAAlC;EACD;;EAEDiI,oBAAoB,GAAG;IACrBhL,WAAW,CAAC,QAAD,EAAW,IAAX,EAAiBgG,SAAjB,EAA4B;MAAEC,OAAO,EAAE,IAAX;MAAiBgF,UAAU,EAAE;IAA7B,CAA5B,CAAX;EACD;;EAED/B,eAAe,GAAG;IAChB,OAAO,OAAO,KAAK5C,KAAZ,KAAsB,QAAtB,GAAiC,KAAKA,KAAL,CAAWwC,MAA5C,GAAqD,CAA5D;EACD;;EAEDvH,MAAM,GAAG;IACP,IAAI,CAAC,KAAK8F,iBAAL,CAAuB,QAAvB,CAAL,EAAuC;MACrC;IACD;;IAED,KAAK7D,eAAL,GAAuB,CAAvB;IACA,KAAKC,aAAL,GAAqB,KAAKyF,eAAL,EAArB;IACA,KAAKxF,mBAAL,GAA2B,MAA3B;;IACA,KAAKsH,oBAAL;EACD;;EAEiB,IAAdxJ,cAAc,GAAG;IACnB,IAAI,CAAC,KAAK6F,iBAAL,CAAuB,gBAAvB,CAAL,EAA+C;MAC7C,OAAO,IAAP;IACD;;IAED,OAAO,KAAK7D,eAAZ;EACD;;EAEiB,IAAdhC,cAAc,CAAC0J,KAAD,EAAQ;IACxB,IAAI,CAAC,KAAK7D,iBAAL,CAAuB,gBAAvB,CAAL,EAA+C;MAC7C,MAAMnI,YAAY,CAACiK,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAAC,oCAAD,EAAuC,mBAAvC,CAAxC,CAAN;IACD;;IAED,KAAKxH,iBAAL,CAAuBsJ,KAAvB,EAA8BC,IAAI,CAAChJ,GAAL,CAAS+I,KAAT,EAAgB,KAAKzH,aAArB,CAA9B,EAAmE,KAAKC,mBAAxE;EACD;;EAEe,IAAZjC,YAAY,GAAG;IACjB,IAAI,CAAC,KAAK4F,iBAAL,CAAuB,cAAvB,CAAL,EAA6C;MAC3C,OAAO,IAAP;IACD;;IAED,OAAO,KAAK5D,aAAZ;EACD;;EAEe,IAAZhC,YAAY,CAAC2J,GAAD,EAAM;IACpB,IAAI,CAAC,KAAK/D,iBAAL,CAAuB,cAAvB,CAAL,EAA6C;MAC3C,MAAMnI,YAAY,CAACiK,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAAC,oCAAD,EAAuC,mBAAvC,CAAxC,CAAN;IACD;;IAED,KAAKxH,iBAAL,CAAuB,KAAK4B,eAA5B,EAA6C4H,GAA7C,EAAkD,KAAK1H,mBAAvD;EACD;;EAEqB,IAAlBhC,kBAAkB,GAAG;IACvB,IAAI,CAAC,KAAK2F,iBAAL,CAAuB,oBAAvB,CAAL,EAAmD;MACjD,OAAO,IAAP;IACD;;IAED,OAAO,KAAK3D,mBAAZ;EACD;;EAEqB,IAAlBhC,kBAAkB,CAAC2J,GAAD,EAAM;IAC1B,IAAI,CAAC,KAAKhE,iBAAL,CAAuB,oBAAvB,CAAL,EAAmD;MACjD,MAAMnI,YAAY,CAACiK,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAAC,oCAAD,EAAuC,mBAAvC,CAAxC,CAAN;IACD;;IAED,KAAKxH,iBAAL,CAAuB,KAAK4B,eAA5B,EAA6C,KAAKC,aAAlD,EAAiE4H,GAAjE;EACD;;EAEDzJ,iBAAiB,CAACsJ,KAAD,EAAQE,GAAR,EAAaC,GAAb,EAAkB;IACjC,IAAI,CAAC,KAAKhE,iBAAL,CAAuB,mBAAvB,CAAL,EAAkD;MAChD,MAAMnI,YAAY,CAACiK,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAAC,oCAAD,EAAuC,mBAAvC,CAAxC,CAAN;IACD;;IAED,KAAK3F,aAAL,GAAqB0H,IAAI,CAAC9I,GAAL,CAAS+I,GAAT,EAAc,KAAKlC,eAAL,EAAd,CAArB;IACA,KAAK1F,eAAL,GAAuB2H,IAAI,CAAC9I,GAAL,CAAS6I,KAAT,EAAgB,KAAKzH,aAArB,CAAvB;IACA,KAAKC,mBAAL,GAA2B2H,GAAG,KAAK,SAAR,IAAqBA,GAAG,KAAK,UAA7B,GAA0CA,GAA1C,GAAgD,MAA3E;;IACA,KAAKL,oBAAL;EACD;;EAEDrJ,YAAY,CAAC2J,IAAD,EAAOJ,KAAP,EAAcE,GAAd,EAA+C;IAAA,IAA5BG,aAA4B,uEAAZ,UAAY;;IACzD,IAAI,CAAC,KAAKlE,iBAAL,CAAuB,cAAvB,CAAL,EAA6C;MAC3C,MAAMnI,YAAY,CAACiK,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAAC,oCAAD,EAAuC,mBAAvC,CAAxC,CAAN;IACD;;IAED,IAAIoC,SAAS,CAAC1C,MAAV,GAAmB,CAAvB,EAA0B;MACxBoC,KAAK,GAAG,KAAK1H,eAAb;MACA4H,GAAG,GAAG,KAAK3H,aAAX;IACD,CAHD,MAGO,IAAIyH,KAAK,GAAGE,GAAZ,EAAiB;MACtB,MAAMlM,YAAY,CAACiK,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAAC,wCAAD,EAA2C,gBAA3C,CAAxC,CAAN;IACD;;IAED8B,KAAK,GAAGC,IAAI,CAAC9I,GAAL,CAAS6I,KAAT,EAAgB,KAAKhC,eAAL,EAAhB,CAAR;IACAkC,GAAG,GAAGD,IAAI,CAAC9I,GAAL,CAAS+I,GAAT,EAAc,KAAKlC,eAAL,EAAd,CAAN;IAEA,MAAMF,GAAG,GAAG,KAAK1C,KAAjB;IACA,IAAImF,QAAQ,GAAG,KAAKjI,eAApB;IACA,IAAIkI,MAAM,GAAG,KAAKjI,aAAlB;IAEA,KAAK6C,KAAL,GAAa0C,GAAG,CAAC2C,KAAJ,CAAU,CAAV,EAAaT,KAAb,IAAsBI,IAAtB,GAA6BtC,GAAG,CAAC2C,KAAJ,CAAUP,GAAV,CAA1C;IAEA,MAAMQ,MAAM,GAAGV,KAAK,GAAG,KAAK5E,KAAL,CAAWwC,MAAlC;;IAEA,IAAIyC,aAAa,KAAK,QAAtB,EAAgC;MAC9B,KAAK3J,iBAAL,CAAuBsJ,KAAvB,EAA8BU,MAA9B;IACD,CAFD,MAEO,IAAIL,aAAa,KAAK,OAAtB,EAA+B;MACpC,KAAK3J,iBAAL,CAAuBsJ,KAAvB,EAA8BA,KAA9B;IACD,CAFM,MAEA,IAAIK,aAAa,KAAK,KAAtB,EAA6B;MAClC,KAAK3J,iBAAL,CAAuBgK,MAAvB,EAA+BA,MAA/B;IACD,CAFM,MAEA;MAAE;MACP,MAAMjB,KAAK,GAAGW,IAAI,CAACxC,MAAL,IAAesC,GAAG,GAAGF,KAArB,CAAd;;MAEA,IAAIO,QAAQ,GAAGL,GAAf,EAAoB;QAClBK,QAAQ,IAAId,KAAZ;MACD,CAFD,MAEO,IAAIc,QAAQ,GAAGP,KAAf,EAAsB;QAC3BO,QAAQ,GAAGP,KAAX;MACD;;MAED,IAAIQ,MAAM,GAAGN,GAAb,EAAkB;QAChBM,MAAM,IAAIf,KAAV;MACD,CAFD,MAEO,IAAIe,MAAM,GAAGR,KAAb,EAAoB;QACzBQ,MAAM,GAAGE,MAAT;MACD;;MAED,KAAKhK,iBAAL,CAAuB6J,QAAvB,EAAiCC,MAAjC;IACD;EACF,CAvmBgD,CAymBjD;;;EACQ,IAAJxJ,IAAI,GAAG;IACT,MAAM2J,EAAE,GAAG,KAAKC,sBAAL,CAA4B,MAA5B,CAAX;;IACA,IAAI,CAACD,EAAL,EAAS;MACP,OAAO,IAAP;IACD;;IAED,MAAME,EAAE,GAAG,KAAKC,WAAL,CAAiB,EAAjB,EAAqBC,cAArB,CAAoCJ,EAApC,CAAX;;IAEA,IAAIE,EAAE,IAAIA,EAAE,CAACG,SAAH,KAAiB,UAA3B,EAAuC;MACrC,OAAOH,EAAP;IACD;;IAED,OAAO,IAAP;EACD,CAvnBgD,CAynBjD;;;EACa,IAATI,SAAS,GAAG;IACd,IAAI,CAAC,KAAKC,cAAL,CAAoB,IAApB,EAA0B,WAA1B,CAAL,EAA6C;MAC3C,OAAO,MAAP,CAD2C,CAC5B;IAChB;;IACD,OAAOC,QAAQ,CAAC,KAAKnF,cAAL,CAAoB,IAApB,EAA0B,WAA1B,CAAD,CAAf;EACD;;EAEY,IAATiF,SAAS,CAAC7F,KAAD,EAAQ;IACnB,IAAIA,KAAK,GAAG,CAAZ,EAAe;MACb,MAAMpH,YAAY,CAACiK,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAAC,wCAAD,EAA2C,gBAA3C,CAAxC,CAAN;IACD;;IACD,KAAKnC,cAAL,CAAoB,IAApB,EAA0B,WAA1B,EAAuCqF,MAAM,CAAChG,KAAD,CAA7C;EACD;;EAEY,IAATiG,SAAS,GAAG;IACd,IAAI,CAAC,KAAKH,cAAL,CAAoB,IAApB,EAA0B,WAA1B,CAAL,EAA6C;MAC3C,OAAO,CAAP;IACD;;IACD,OAAOC,QAAQ,CAAC,KAAKnF,cAAL,CAAoB,IAApB,EAA0B,WAA1B,CAAD,CAAf;EACD;;EAEY,IAATqF,SAAS,CAACjG,KAAD,EAAQ;IACnB,IAAIA,KAAK,GAAG,CAAZ,EAAe;MACb,MAAMpH,YAAY,CAACiK,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAAC,wCAAD,EAA2C,gBAA3C,CAAxC,CAAN;IACD;;IACD,KAAKnC,cAAL,CAAoB,IAApB,EAA0B,WAA1B,EAAuCqF,MAAM,CAAChG,KAAD,CAA7C;EACD;;EAEO,IAAJkG,IAAI,GAAG;IACT,IAAI,CAAC,KAAKJ,cAAL,CAAoB,IAApB,EAA0B,MAA1B,CAAL,EAAwC;MACtC,OAAO,EAAP;IACD;;IACD,OAAOC,QAAQ,CAAC,KAAKnF,cAAL,CAAoB,IAApB,EAA0B,MAA1B,CAAD,CAAf;EACD;;EAEO,IAAJsF,IAAI,CAAClG,KAAD,EAAQ;IACd,IAAIA,KAAK,IAAI,CAAb,EAAgB;MACd,MAAMpH,YAAY,CAACiK,MAAb,CAAoB,KAAKC,aAAzB,EAAwC,CAAC,wCAAD,EAA2C,gBAA3C,CAAxC,CAAN;IACD;;IACD,KAAKnC,cAAL,CAAoB,IAApB,EAA0B,MAA1B,EAAkCqF,MAAM,CAAChG,KAAD,CAAxC;EACD,CAlqBgD,CAoqBjD;;;EACY,IAAR8D,QAAQ,GAAG;IACb,IAAI/H,GAAG,GAAG,KAAKoK,eAAf;;IACA,MAAM7D,IAAI,GAAG,KAAKkD,sBAAL,CAA4B,KAA5B,CAAb;;IACA,IAAIlD,IAAI,KAAK,IAAT,IAAiB,KAAKvE,sBAAL,KAAgC2B,SAArD,EAAgE;MAC9D,MAAM0G,MAAM,GAAG,KAAKrI,sBAAL,CAA4BuE,IAA5B,CAAf;;MACA,IAAI8D,MAAM,KAAK,IAAf,EAAqB;QACnBrK,GAAG,GAAGqK,MAAN;MACD;IACF;;IACD,OAAOrK,GAAP;EACD;;EAEW,IAARgI,QAAQ,GAAG;IACb,IAAIlI,GAAG,GAAG,KAAKwK,eAAf;;IACA,MAAM/D,IAAI,GAAG,KAAKkD,sBAAL,CAA4B,KAA5B,CAAb;;IACA,IAAIlD,IAAI,KAAK,IAAT,IAAiB,KAAKvE,sBAAL,KAAgC2B,SAArD,EAAgE;MAC9D,MAAM0G,MAAM,GAAG,KAAKrI,sBAAL,CAA4BuE,IAA5B,CAAf;;MACA,IAAI8D,MAAM,KAAK,IAAf,EAAqB;QACnBvK,GAAG,GAAGuK,MAAN;MACD;IACF;;IACD,OAAOvK,GAAP;EACD;;EAEkB,IAAfsK,eAAe,GAAG;IACpB,IAAI,KAAK1J,IAAL,KAAc,OAAlB,EAA2B;MACzB,OAAO,CAAP;IACD;;IACD,OAAO,IAAP;EACD;;EAEkB,IAAf4J,eAAe,GAAG;IACpB,IAAI,KAAK5J,IAAL,KAAc,OAAlB,EAA2B;MACzB,OAAO,GAAP;IACD;;IACD,OAAO,IAAP;EACD,CAzsBgD,CA2sBjD;;;EACqB,IAAjB+B,iBAAiB,GAAG;IACtB,IAAI,CAAC,KAAK8H,wBAAL,CAA8B,MAA9B,CAAL,EAA4C;MAC1C,OAAO,IAAP;IACD;;IACD,MAAMhE,IAAI,GAAG,KAAK1B,cAAL,CAAoB,IAApB,EAA0B,MAA1B,CAAb;;IACA,IAAI0B,IAAI,KAAK,IAAb,EAAmB;MACjB,OAAO,KAAKiE,YAAL,GAAoB,KAAKC,gBAAhC;IACD;;IACD,IAAIzM,yBAAyB,CAACuI,IAAD,EAAO,KAAP,CAA7B,EAA4C;MAC1C,OAAO,IAAP;IACD;;IACD,MAAMmE,UAAU,GAAGxM,wBAAwB,CAACqI,IAAD,CAA3C;;IACA,IAAImE,UAAU,KAAK,IAAf,IAAuBA,UAAU,IAAI,CAAzC,EAA4C;MAC1C,OAAO,KAAKF,YAAL,GAAoB,KAAKC,gBAAhC;IACD;;IACD,OAAOC,UAAU,GAAG,KAAKD,gBAAzB;EACD,CA5tBgD,CA8tBjD;;;EACoB,IAAhBA,gBAAgB,GAAG;IACrB,MAAME,iBAAiB,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAAzC;;IACA,QAAQ,KAAKjK,IAAb;MACE,KAAK,MAAL;QACE,OAAO,IAAIiK,iBAAX;;MACF,KAAK,MAAL;QACE,OAAOA,iBAAP;;MACF,KAAK,gBAAL;MACA,KAAK,UAAL;MACA,KAAK,MAAL;QACE,OAAO,IAAP;IARJ;;IAUA,OAAO,CAAP;EACD,CA5uBgD,CA8uBjD;;;EACgB,IAAZH,YAAY,GAAG;IACjB,IAAI,KAAK9J,IAAL,KAAc,gBAAd,IAAkC,KAAKA,IAAL,KAAc,UAAhD,IAA8D,KAAKA,IAAL,KAAc,MAAhF,EAAwF;MACtF,OAAO,EAAP;IACD;;IACD,OAAO,CAAP;EACD,CApvBgD,CAsvBjD;;;EACa,IAAT6B,SAAS,GAAG;IACd,IAAI,KAAK6D,uBAAL,CAA6B,KAA7B,CAAJ,EAAyC;MACvC,MAAMpG,GAAG,GAAG,KAAKgC,sBAAL,CAA4B,KAAK6C,cAAL,CAAoB,IAApB,EAA0B,KAA1B,CAA5B,CAAZ;;MACA,IAAI7E,GAAG,KAAK,IAAZ,EAAkB;QAChB,OAAOA,GAAP;MACD;IACF;;IACD,IAAI,KAAK+J,cAAL,CAAoB,IAApB,EAA0B,OAA1B,CAAJ,EAAwC;MACtC,MAAM9F,KAAK,GAAG,KAAKjC,sBAAL,CAA4B,KAAK6C,cAAL,CAAoB,IAApB,EAA0B,OAA1B,CAA5B,CAAd;;MACA,IAAIZ,KAAK,KAAK,IAAd,EAAoB;QAClB,OAAOA,KAAP;MACD;IACF;;IACD,IAAI,KAAK2G,gBAAL,KAA0B,IAA9B,EAAoC;MAClC,OAAO,KAAKA,gBAAZ;IACD;;IACD,OAAO,CAAP;EACD,CAxwBgD,CA0wBjD;;;EACoB,IAAhBA,gBAAgB,GAAG;IACrB,IAAI,KAAKlK,IAAL,KAAc,MAAlB,EAA0B;MACxB;MACA,OAAO,CAAC,SAAR;IACD;;IACD,OAAO,IAAP;EACD,CAjxBgD,CAmxBjD;EACA;;;EACA6J,wBAAwB,CAACM,SAAD,EAAY;IAClC,OAAOjL,kCAAkC,CAACiL,SAAD,CAAlC,CAA8ClK,GAA9C,CAAkD,KAAKD,IAAvD,CAAP;EACD;;EAED0F,uBAAuB,CAACyE,SAAD,EAAY;IACjC,OAAO,KAAKN,wBAAL,CAA8BM,SAA9B,KAA4C,KAAKd,cAAL,CAAoB,IAApB,EAA0Bc,SAA1B,CAAnD;EACD;;EAEDpB,sBAAsB,CAACoB,SAAD,EAAY;IAChC,IAAI,KAAKN,wBAAL,CAA8BM,SAA9B,CAAJ,EAA8C;MAC5C,OAAO,KAAKhG,cAAL,CAAoB,IAApB,EAA0BgG,SAA1B,CAAP;IACD;;IACD,OAAO,IAAP;EACD;;EAED7F,iBAAiB,CAAC8F,MAAD,EAA2B;IAAA,IAAlBpK,IAAkB,uEAAX,KAAKA,IAAM;IAC1C,OAAO3B,2BAA2B,CAAC+L,MAAD,CAA3B,CAAoCnK,GAApC,CAAwCD,IAAxC,CAAP;EACD;;EAEDqK,6CAA6C,GAAG;IAC9C;IACA;IACA;IACA,MAAMC,oBAAoB,GAAG,IAAIpM,GAAJ,CAAQ,CAAC,QAAD,EAAW,OAAX,EAAoB,QAApB,CAAR,CAA7B,CAJ8C,CAK9C;;IACA,MAAMqM,QAAQ,GAAG,KAAK7E,uBAAL,CAA6B,UAA7B,CAAjB,CAN8C,CAQ9C;;;IACA,OAAO4E,oBAAoB,CAACrK,GAArB,CAAyB,KAAKD,IAA9B,KAAuCuK,QAA9C;EACD,CAlzBgD,CAozBjD;;;EACa,IAATC,SAAS,GAAG;IACd,OAAO,KAAK9E,uBAAL,CAA6B,UAA7B,CAAP;EACD,CAvzBgD,CAyzBjD;;;EACuB,IAAnB+E,mBAAmB,GAAG;IACxB,OAAO,KAAKzK,IAAL,KAAc,MAArB;EACD,CA5zBgD,CA8zBjD;;;EACsB,IAAlB0K,kBAAkB,GAAG;IACvB,OAAO,KAAKD,mBAAL,IAA4B,KAAKnD,QAAL,GAAgB,KAAKD,QAAxD;EACD;;EAEW,IAARsD,QAAQ,GAAG;IACb,IAAI,CAAC,KAAKC,SAAV,EAAqB;MACnB;MACA;MACA;MACA;MACA;MACA,MAAMC,mCAAmC,GAAG,MAAM;QAChD,MAAM9D,WAAW,GAAG,KAAKzF,sBAAL,CAA4B,KAAKV,MAAjC,CAApB;;QACA,OAAOmG,WAAW,KAAK,IAAhB,IAAwBA,WAAW,GAAG,KAAKO,QAA3C,IAAuDP,WAAW,GAAG,KAAKM,QAAjF;MACD,CAHD;;MAKA,MAAMyD,KAAK,GAAG;QACZ;QACAC,YAAY,EAAE,MAAM;UAClB;UACA;UACA;UACA;UACA;UACA;UACA,IAAI,KAAKP,SAAL,IAAkBzK,kBAAkB,CAAC,KAAKC,IAAN,CAAlB,KAAkC,OAApD,IAA+D,KAAK8C,QAApE,IAAgF,KAAKlC,MAAL,KAAgB,EAApG,EAAwG;YACtG,OAAO,IAAP;UACD;;UAED,QAAQ,KAAKZ,IAAb;YACE;YACA;YACA;YACA,KAAK,UAAL;cACE,IAAI,KAAKwK,SAAL,IAAkB,CAAC,KAAK1J,YAA5B,EAA0C;gBACxC,OAAO,IAAP;cACD;;cACD;YAEF;YACA;YACA;YACA;;YACA,KAAK,OAAL;cACE,IAAI,KAAK0E,iBAAL,CAAuB,WAAvB,KAAuC,CAAC,KAAKA,iBAAL,CAAuB,SAAvB,CAA5C,EAA+E;gBAC7E,OAAO,IAAP;cACD;;cACD;YAEF;YACA;YACA;;YACA,KAAK,MAAL;cACE,IAAI,KAAKgF,SAAL,IAAkB,KAAK1E,KAAL,CAAWC,MAAX,KAAsB,CAA5C,EAA+C;gBAC7C,OAAO,IAAP;cACD;;cACD;UA3BJ;;UA8BA,OAAO,KAAP;QACD,CA5CW;QA8CZ;QACA;QACA;QACA;QACAiF,OAAO,EAAE,MAAM,KAlDH;QAoDZ;QACA;QACAC,QAAQ,EAAE,MAAM,KAtDJ;QAwDZ;QACAC,aAAa,EAAE,MAAM;UACnB;UACA,IAAI,KAAKR,kBAAT,EAA6B;YAC3B,OAAOG,mCAAmC,EAA1C;UACD,CAJkB,CAKnB;UACA;UACA;UACA;;;UACA,IAAI,KAAKvD,QAAL,KAAkB,IAAtB,EAA4B;YAC1B,MAAMP,WAAW,GAAG,KAAKzF,sBAAL,CAA4B,KAAKV,MAAjC,CAApB;;YACA,IAAImG,WAAW,KAAK,IAAhB,IAAwBA,WAAW,GAAG,KAAKO,QAA/C,EAAyD;cACvD,OAAO,IAAP;YACD;UACF;;UACD,OAAO,KAAP;QACD,CAzEW;QA2EZ;QACA6D,cAAc,EAAE,MAAM;UACpB;UACA,IAAI,KAAKT,kBAAT,EAA6B;YAC3B,OAAOG,mCAAmC,EAA1C;UACD,CAJmB,CAKpB;UACA;UACA;UACA;;;UACA,IAAI,KAAKxD,QAAL,KAAkB,IAAtB,EAA4B;YAC1B,MAAMN,WAAW,GAAG,KAAKzF,sBAAL,CAA4B,KAAKV,MAAjC,CAApB;;YACA,IAAImG,WAAW,KAAK,IAAhB,IAAwBA,WAAW,GAAG,KAAKM,QAA/C,EAAyD;cACvD,OAAO,IAAP;YACD;UACF;;UACD,OAAO,KAAP;QACD,CA5FW;QA8FZ;QACA+D,eAAe,EAAE,MAAM;UACrB;UACA,IAAI,KAAKxK,MAAL,KAAgB,EAAhB,IAAsB,CAAC,KAAK8E,uBAAL,CAA6B,SAA7B,CAA3B,EAAoE;YAClE,OAAO,KAAP;UACD;;UACD,IAAI2F,MAAJ;;UACA,IAAI;YACF,MAAM5L,OAAO,GAAG,KAAK0E,cAAL,CAAoB,IAApB,EAA0B,SAA1B,CAAhB,CADE,CAEF;YACA;YACA;;YACA,IAAImH,MAAJ,CAAW7L,OAAX,EAAoB,GAApB,EALE,CAKwB;;YAC1B4L,MAAM,GAAG,IAAIC,MAAJ,CAAW,SAAS7L,OAAT,GAAmB,IAA9B,EAAoC,GAApC,CAAT;UACD,CAPD,CAOE,OAAO2F,CAAP,EAAU;YACV,OAAO,KAAP;UACD;;UACD,IAAI,KAAKM,uBAAL,CAA6B,UAA7B,CAAJ,EAA8C;YAC5C,OAAO,CAACjI,aAAa,CAAC,KAAKmD,MAAN,CAAb,CAA2B2K,KAA3B,CAAiChI,KAAK,IAAI8H,MAAM,CAACG,IAAP,CAAYjI,KAAZ,CAA1C,CAAR;UACD;;UACD,OAAO,CAAC8H,MAAM,CAACG,IAAP,CAAY,KAAK5K,MAAjB,CAAR;QACD,CAnHW;QAqHZ;QACA;QACA6K,YAAY,EAAE,MAAM;UAClB,MAAMtJ,gBAAgB,GAAG,KAAKJ,iBAA9B;;UACA,IAAII,gBAAgB,KAAK,IAAzB,EAA+B;YAC7B,OAAO,KAAP;UACD;;UACD,MAAMuJ,MAAM,GAAG,KAAKpK,sBAAL,CAA4B,KAAKV,MAAjC,CAAf;;UACA,OAAO8K,MAAM,KAAK,IAAX,IAAmB,CAAC,KAAKhK,cAAL,CAAoBgK,MAApB,CAA3B;QACD,CA9HW;QAgIZ;QACAC,YAAY,EAAE,MAAM;UAClB,QAAQ,KAAK3L,IAAb;YACE;YACA;YACA;YACA,KAAK,KAAL;cACE,IAAI,KAAKY,MAAL,KAAgB,EAAhB,IAAsB,CAACxD,kBAAkB,CAAC,KAAKwD,MAAN,CAA7C,EAA4D;gBAC1D,OAAO,IAAP;cACD;;cACD;YAEF;YACA;YACA;YACA;YACA;;YACA,KAAK,OAAL;cACE,IAAI,KAAKA,MAAL,KAAgB,EAAhB,IAAsB,CAACzD,mBAAmB,CAAC,KAAKsF,SAAL,EAAD,EAAmB,KAAK4G,cAAL,CAAoB,IAApB,EAA0B,UAA1B,CAAnB,CAA9C,EAAyG;gBACvG,OAAO,IAAP;cACD;;cACD;UAnBJ;;UAqBA,OAAO,KAAP;QACD;MAxJW,CAAd;MA2JA,KAAKuB,SAAL,GAAiBjO,aAAa,CAACqL,UAAd,CAAyB,KAAK3B,aAA9B,EAA6C,EAA7C,EAAiD;QAChEuF,OAAO,EAAE,IADuD;QAEhEd;MAFgE,CAAjD,CAAjB;IAID;;IACD,OAAO,KAAKF,SAAZ;EACD;;EAEY,CAAZ9N,YAAY,EAAE+O,IAAF,EAAQC,IAAR,EAAc;IACzBD,IAAI,CAACjL,MAAL,GAAckL,IAAI,CAAClL,MAAnB;IACAiL,IAAI,CAAC/K,YAAL,GAAoBgL,IAAI,CAAChL,YAAzB;IACA+K,IAAI,CAAChL,WAAL,GAAmBiL,IAAI,CAACjL,WAAxB;IACAgL,IAAI,CAAC9K,iBAAL,GAAyB+K,IAAI,CAAC/K,iBAA9B;EACD;;AAv/BgD;;AA0/BnDnE,KAAK,CAACwD,oBAAoB,CAAC2L,SAAtB,EAAiCrP,+BAA+B,CAACqP,SAAjE,CAAL;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACfzP,cAAc,EAAE4D;AADD,CAAjB"},"metadata":{},"sourceType":"script"}