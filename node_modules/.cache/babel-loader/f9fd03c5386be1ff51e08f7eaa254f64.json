{"ast":null,"code":"'use strict';\n\nmodule.exports = class SymbolTreeNode {\n  constructor() {\n    this.parent = null;\n    this.previousSibling = null;\n    this.nextSibling = null;\n    this.firstChild = null;\n    this.lastChild = null;\n    /** This value is incremented anytime a children is added or removed */\n\n    this.childrenVersion = 0;\n    /** The last child object which has a cached index */\n\n    this.childIndexCachedUpTo = null;\n    /** This value represents the cached node index, as long as\n     * cachedIndexVersion matches with the childrenVersion of the parent */\n\n    this.cachedIndex = -1;\n    this.cachedIndexVersion = NaN; // NaN is never equal to anything\n  }\n\n  get isAttached() {\n    return Boolean(this.parent || this.previousSibling || this.nextSibling);\n  }\n\n  get hasChildren() {\n    return Boolean(this.firstChild);\n  }\n\n  childrenChanged() {\n    /* jshint -W016 */\n    // integer wrap around\n    this.childrenVersion = this.childrenVersion + 1 & 0xFFFFFFFF;\n    this.childIndexCachedUpTo = null;\n  }\n\n  getCachedIndex(parentNode) {\n    // (assumes parentNode is actually the parent)\n    if (this.cachedIndexVersion !== parentNode.childrenVersion) {\n      this.cachedIndexVersion = NaN; // cachedIndex is no longer valid\n\n      return -1;\n    }\n\n    return this.cachedIndex; // -1 if not cached\n  }\n\n  setCachedIndex(parentNode, index) {\n    // (assumes parentNode is actually the parent)\n    this.cachedIndexVersion = parentNode.childrenVersion;\n    this.cachedIndex = index;\n  }\n\n};","map":{"version":3,"names":["module","exports","SymbolTreeNode","constructor","parent","previousSibling","nextSibling","firstChild","lastChild","childrenVersion","childIndexCachedUpTo","cachedIndex","cachedIndexVersion","NaN","isAttached","Boolean","hasChildren","childrenChanged","getCachedIndex","parentNode","setCachedIndex","index"],"sources":["C:/Users/17033/balmco/node_modules/symbol-tree/lib/SymbolTreeNode.js"],"sourcesContent":["'use strict';\n\nmodule.exports = class SymbolTreeNode {\n        constructor() {\n                this.parent = null;\n                this.previousSibling = null;\n                this.nextSibling = null;\n\n                this.firstChild = null;\n                this.lastChild = null;\n\n                /** This value is incremented anytime a children is added or removed */\n                this.childrenVersion = 0;\n                /** The last child object which has a cached index */\n                this.childIndexCachedUpTo = null;\n\n                /** This value represents the cached node index, as long as\n                 * cachedIndexVersion matches with the childrenVersion of the parent */\n                this.cachedIndex = -1;\n                this.cachedIndexVersion = NaN; // NaN is never equal to anything\n        }\n\n        get isAttached() {\n                return Boolean(this.parent || this.previousSibling || this.nextSibling);\n        }\n\n        get hasChildren() {\n                return Boolean(this.firstChild);\n        }\n\n        childrenChanged() {\n                /* jshint -W016 */\n                // integer wrap around\n                this.childrenVersion = (this.childrenVersion + 1) & 0xFFFFFFFF;\n                this.childIndexCachedUpTo = null;\n        }\n\n        getCachedIndex(parentNode) {\n                // (assumes parentNode is actually the parent)\n                if (this.cachedIndexVersion !== parentNode.childrenVersion) {\n                        this.cachedIndexVersion = NaN;\n                        // cachedIndex is no longer valid\n                        return -1;\n                }\n\n                return this.cachedIndex; // -1 if not cached\n        }\n\n        setCachedIndex(parentNode, index) {\n                // (assumes parentNode is actually the parent)\n                this.cachedIndexVersion = parentNode.childrenVersion;\n                this.cachedIndex = index;\n        }\n};\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,cAAN,CAAqB;EAC9BC,WAAW,GAAG;IACN,KAAKC,MAAL,GAAc,IAAd;IACA,KAAKC,eAAL,GAAuB,IAAvB;IACA,KAAKC,WAAL,GAAmB,IAAnB;IAEA,KAAKC,UAAL,GAAkB,IAAlB;IACA,KAAKC,SAAL,GAAiB,IAAjB;IAEA;;IACA,KAAKC,eAAL,GAAuB,CAAvB;IACA;;IACA,KAAKC,oBAAL,GAA4B,IAA5B;IAEA;AAChB;;IACgB,KAAKC,WAAL,GAAmB,CAAC,CAApB;IACA,KAAKC,kBAAL,GAA0BC,GAA1B,CAhBM,CAgByB;EACtC;;EAEa,IAAVC,UAAU,GAAG;IACT,OAAOC,OAAO,CAAC,KAAKX,MAAL,IAAe,KAAKC,eAApB,IAAuC,KAAKC,WAA7C,CAAd;EACP;;EAEc,IAAXU,WAAW,GAAG;IACV,OAAOD,OAAO,CAAC,KAAKR,UAAN,CAAd;EACP;;EAEDU,eAAe,GAAG;IACV;IACA;IACA,KAAKR,eAAL,GAAwB,KAAKA,eAAL,GAAuB,CAAxB,GAA6B,UAApD;IACA,KAAKC,oBAAL,GAA4B,IAA5B;EACP;;EAEDQ,cAAc,CAACC,UAAD,EAAa;IACnB;IACA,IAAI,KAAKP,kBAAL,KAA4BO,UAAU,CAACV,eAA3C,EAA4D;MACpD,KAAKG,kBAAL,GAA0BC,GAA1B,CADoD,CAEpD;;MACA,OAAO,CAAC,CAAR;IACP;;IAED,OAAO,KAAKF,WAAZ,CARmB,CAQM;EAChC;;EAEDS,cAAc,CAACD,UAAD,EAAaE,KAAb,EAAoB;IAC1B;IACA,KAAKT,kBAAL,GAA0BO,UAAU,CAACV,eAArC;IACA,KAAKE,WAAL,GAAmBU,KAAnB;EACP;;AAlD6B,CAAtC"},"metadata":{},"sourceType":"script"}