{"ast":null,"code":"\"use strict\"; // https://heycam.github.io/webidl/#idl-named-properties\n\nconst IS_NAMED_PROPERTY = Symbol(\"is named property\");\nconst TRACKER = Symbol(\"named property tracker\");\n/**\n * Create a new NamedPropertiesTracker for the given `object`.\n *\n * Named properties are used in DOM to let you lookup (for example) a Node by accessing a property on another object.\n * For example `window.foo` might resolve to an image element with id \"foo\".\n *\n * This tracker is a workaround because the ES6 Proxy feature is not yet available.\n *\n * @param {Object} object Object used to write properties to\n * @param {Object} objectProxy Object used to check if a property is already defined\n * @param {Function} resolverFunc Each time a property is accessed, this function is called to determine the value of\n *        the property. The function is passed 3 arguments: (object, name, values).\n *        `object` is identical to the `object` parameter of this `create` function.\n *        `name` is the name of the property.\n *        `values` is a function that returns a Set with all the tracked values for this name. The order of these\n *        values is undefined.\n *\n * @returns {NamedPropertiesTracker}\n */\n\nexports.create = function (object, objectProxy, resolverFunc) {\n  if (object[TRACKER]) {\n    throw Error(\"A NamedPropertiesTracker has already been created for this object\");\n  }\n\n  const tracker = new NamedPropertiesTracker(object, objectProxy, resolverFunc);\n  object[TRACKER] = tracker;\n  return tracker;\n};\n\nexports.get = function (object) {\n  if (!object) {\n    return null;\n  }\n\n  return object[TRACKER] || null;\n};\n\nfunction NamedPropertiesTracker(object, objectProxy, resolverFunc) {\n  this.object = object;\n  this.objectProxy = objectProxy;\n  this.resolverFunc = resolverFunc;\n  this.trackedValues = new Map(); // Map<Set<value>>\n}\n\nfunction newPropertyDescriptor(tracker, name) {\n  const emptySet = new Set();\n\n  function getValues() {\n    return tracker.trackedValues.get(name) || emptySet;\n  }\n\n  const descriptor = {\n    enumerable: true,\n    configurable: true,\n\n    get() {\n      return tracker.resolverFunc(tracker.object, name, getValues);\n    },\n\n    set(value) {\n      Object.defineProperty(tracker.object, name, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n      });\n    }\n\n  };\n  descriptor.get[IS_NAMED_PROPERTY] = true;\n  descriptor.set[IS_NAMED_PROPERTY] = true;\n  return descriptor;\n}\n/**\n * Track a value (e.g. a Node) for a specified name.\n *\n * Values can be tracked eagerly, which means that not all tracked values *have* to appear in the output. The resolver\n * function that was passed to the output may filter the value.\n *\n * Tracking the same `name` and `value` pair multiple times has no effect\n *\n * @param {String} name\n * @param {*} value\n */\n\n\nNamedPropertiesTracker.prototype.track = function (name, value) {\n  if (name === undefined || name === null || name === \"\") {\n    return;\n  }\n\n  let valueSet = this.trackedValues.get(name);\n\n  if (!valueSet) {\n    valueSet = new Set();\n    this.trackedValues.set(name, valueSet);\n  }\n\n  valueSet.add(value);\n\n  if (name in this.objectProxy) {\n    // already added our getter or it is not a named property (e.g. \"addEventListener\")\n    return;\n  }\n\n  const descriptor = newPropertyDescriptor(this, name);\n  Object.defineProperty(this.object, name, descriptor);\n};\n/**\n * Stop tracking a previously tracked `name` & `value` pair, see track().\n *\n * Untracking the same `name` and `value` pair multiple times has no effect\n *\n * @param {String} name\n * @param {*} value\n */\n\n\nNamedPropertiesTracker.prototype.untrack = function (name, value) {\n  if (name === undefined || name === null || name === \"\") {\n    return;\n  }\n\n  const valueSet = this.trackedValues.get(name);\n\n  if (!valueSet) {\n    // the value is not present\n    return;\n  }\n\n  if (!valueSet.delete(value)) {\n    // the value was not present\n    return;\n  }\n\n  if (valueSet.size === 0) {\n    this.trackedValues.delete(name);\n  }\n\n  if (valueSet.size > 0) {\n    // other values for this name are still present\n    return;\n  } // at this point there are no more values, delete the property\n\n\n  const descriptor = Object.getOwnPropertyDescriptor(this.object, name);\n\n  if (!descriptor || !descriptor.get || descriptor.get[IS_NAMED_PROPERTY] !== true) {\n    // Not defined by NamedPropertyTracker\n    return;\n  } // note: delete puts the object in dictionary mode.\n  // if this turns out to be a performance issue, maybe add:\n  // https://github.com/petkaantonov/bluebird/blob/3e36fc861ac5795193ba37935333eb6ef3716390/src/util.js#L177\n\n\n  delete this.object[name];\n};","map":{"version":3,"names":["IS_NAMED_PROPERTY","Symbol","TRACKER","exports","create","object","objectProxy","resolverFunc","Error","tracker","NamedPropertiesTracker","get","trackedValues","Map","newPropertyDescriptor","name","emptySet","Set","getValues","descriptor","enumerable","configurable","set","value","Object","defineProperty","writable","prototype","track","undefined","valueSet","add","untrack","delete","size","getOwnPropertyDescriptor"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/named-properties-tracker.js"],"sourcesContent":["\"use strict\";\n// https://heycam.github.io/webidl/#idl-named-properties\n\nconst IS_NAMED_PROPERTY = Symbol(\"is named property\");\nconst TRACKER = Symbol(\"named property tracker\");\n\n/**\n * Create a new NamedPropertiesTracker for the given `object`.\n *\n * Named properties are used in DOM to let you lookup (for example) a Node by accessing a property on another object.\n * For example `window.foo` might resolve to an image element with id \"foo\".\n *\n * This tracker is a workaround because the ES6 Proxy feature is not yet available.\n *\n * @param {Object} object Object used to write properties to\n * @param {Object} objectProxy Object used to check if a property is already defined\n * @param {Function} resolverFunc Each time a property is accessed, this function is called to determine the value of\n *        the property. The function is passed 3 arguments: (object, name, values).\n *        `object` is identical to the `object` parameter of this `create` function.\n *        `name` is the name of the property.\n *        `values` is a function that returns a Set with all the tracked values for this name. The order of these\n *        values is undefined.\n *\n * @returns {NamedPropertiesTracker}\n */\nexports.create = function (object, objectProxy, resolverFunc) {\n  if (object[TRACKER]) {\n    throw Error(\"A NamedPropertiesTracker has already been created for this object\");\n  }\n\n  const tracker = new NamedPropertiesTracker(object, objectProxy, resolverFunc);\n  object[TRACKER] = tracker;\n  return tracker;\n};\n\nexports.get = function (object) {\n  if (!object) {\n    return null;\n  }\n\n  return object[TRACKER] || null;\n};\n\nfunction NamedPropertiesTracker(object, objectProxy, resolverFunc) {\n  this.object = object;\n  this.objectProxy = objectProxy;\n  this.resolverFunc = resolverFunc;\n  this.trackedValues = new Map(); // Map<Set<value>>\n}\n\nfunction newPropertyDescriptor(tracker, name) {\n  const emptySet = new Set();\n\n  function getValues() {\n    return tracker.trackedValues.get(name) || emptySet;\n  }\n\n  const descriptor = {\n    enumerable: true,\n    configurable: true,\n    get() {\n      return tracker.resolverFunc(tracker.object, name, getValues);\n    },\n    set(value) {\n      Object.defineProperty(tracker.object, name, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n      });\n    }\n  };\n\n  descriptor.get[IS_NAMED_PROPERTY] = true;\n  descriptor.set[IS_NAMED_PROPERTY] = true;\n  return descriptor;\n}\n\n/**\n * Track a value (e.g. a Node) for a specified name.\n *\n * Values can be tracked eagerly, which means that not all tracked values *have* to appear in the output. The resolver\n * function that was passed to the output may filter the value.\n *\n * Tracking the same `name` and `value` pair multiple times has no effect\n *\n * @param {String} name\n * @param {*} value\n */\nNamedPropertiesTracker.prototype.track = function (name, value) {\n  if (name === undefined || name === null || name === \"\") {\n    return;\n  }\n\n  let valueSet = this.trackedValues.get(name);\n  if (!valueSet) {\n    valueSet = new Set();\n    this.trackedValues.set(name, valueSet);\n  }\n\n  valueSet.add(value);\n\n  if (name in this.objectProxy) {\n    // already added our getter or it is not a named property (e.g. \"addEventListener\")\n    return;\n  }\n\n  const descriptor = newPropertyDescriptor(this, name);\n  Object.defineProperty(this.object, name, descriptor);\n};\n\n/**\n * Stop tracking a previously tracked `name` & `value` pair, see track().\n *\n * Untracking the same `name` and `value` pair multiple times has no effect\n *\n * @param {String} name\n * @param {*} value\n */\nNamedPropertiesTracker.prototype.untrack = function (name, value) {\n  if (name === undefined || name === null || name === \"\") {\n    return;\n  }\n\n  const valueSet = this.trackedValues.get(name);\n  if (!valueSet) {\n    // the value is not present\n    return;\n  }\n\n  if (!valueSet.delete(value)) {\n    // the value was not present\n    return;\n  }\n\n  if (valueSet.size === 0) {\n    this.trackedValues.delete(name);\n  }\n\n  if (valueSet.size > 0) {\n    // other values for this name are still present\n    return;\n  }\n\n  // at this point there are no more values, delete the property\n\n  const descriptor = Object.getOwnPropertyDescriptor(this.object, name);\n\n  if (!descriptor || !descriptor.get || descriptor.get[IS_NAMED_PROPERTY] !== true) {\n    // Not defined by NamedPropertyTracker\n    return;\n  }\n\n  // note: delete puts the object in dictionary mode.\n  // if this turns out to be a performance issue, maybe add:\n  // https://github.com/petkaantonov/bluebird/blob/3e36fc861ac5795193ba37935333eb6ef3716390/src/util.js#L177\n  delete this.object[name];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}