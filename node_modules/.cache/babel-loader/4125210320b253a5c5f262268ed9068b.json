{"ast":null,"code":"\"use strict\";\n\nconst validateNames = require(\"../helpers/validate-names\");\n\nconst {\n  HTML_NS,\n  SVG_NS\n} = require(\"../helpers/namespaces\");\n\nconst {\n  createElement,\n  internalCreateElementNSSteps\n} = require(\"../helpers/create-element\");\n\nconst DocumentType = require(\"../generated/DocumentType\");\n\nconst documents = require(\"../documents.js\");\n\nclass DOMImplementationImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = privateData.ownerDocument;\n  }\n\n  hasFeature() {\n    return true;\n  }\n\n  createDocumentType(qualifiedName, publicId, systemId) {\n    validateNames.qname(this._globalObject, qualifiedName);\n    return DocumentType.createImpl(this._globalObject, [], {\n      ownerDocument: this._ownerDocument,\n      name: qualifiedName,\n      publicId,\n      systemId\n    });\n  } // https://dom.spec.whatwg.org/#dom-domimplementation-createdocument\n\n\n  createDocument(namespace, qualifiedName, doctype) {\n    let contentType = \"application/xml\";\n\n    if (namespace === HTML_NS) {\n      contentType = \"application/xhtml+xml\";\n    } else if (namespace === SVG_NS) {\n      contentType = \"image/svg+xml\";\n    }\n\n    const document = documents.createImpl(this._globalObject, {\n      contentType,\n      parsingMode: \"xml\",\n      encoding: \"UTF-8\"\n    });\n    let element = null;\n\n    if (qualifiedName !== \"\") {\n      element = internalCreateElementNSSteps(document, namespace, qualifiedName, {});\n    }\n\n    if (doctype !== null) {\n      document.appendChild(doctype);\n    }\n\n    if (element !== null) {\n      document.appendChild(element);\n    }\n\n    document._origin = this._ownerDocument._origin;\n    return document;\n  } // https://dom.spec.whatwg.org/#dom-domimplementation-createhtmldocument\n\n\n  createHTMLDocument(title) {\n    // Let doc be a new document that is an HTML document.\n    // Set doc's content type to \"text/html\".\n    const document = documents.createImpl(this._globalObject, {\n      parsingMode: \"html\",\n      encoding: \"UTF-8\"\n    }); // Create a doctype, with \"html\" as its name and with its node document set\n    // to doc. Append the newly created node to doc.\n\n    const doctype = DocumentType.createImpl(this._globalObject, [], {\n      ownerDocument: document,\n      name: \"html\",\n      publicId: \"\",\n      systemId: \"\"\n    });\n    document.appendChild(doctype); // Create an html element in the HTML namespace, and append it to doc.\n\n    const htmlElement = createElement(document, \"html\", HTML_NS);\n    document.appendChild(htmlElement); // Create a head element in the HTML namespace, and append it to the html\n    // element created in the previous step.\n\n    const headElement = createElement(document, \"head\", HTML_NS);\n    htmlElement.appendChild(headElement); // If the title argument is not omitted:\n\n    if (title !== undefined) {\n      // Create a title element in the HTML namespace, and append it to the head\n      // element created in the previous step.\n      const titleElement = createElement(document, \"title\", HTML_NS);\n      headElement.appendChild(titleElement); // Create a Text node, set its data to title (which could be the empty\n      // string), and append it to the title element created in the previous step.\n\n      titleElement.appendChild(document.createTextNode(title));\n    } // Create a body element in the HTML namespace, and append it to the html\n    // element created in the earlier step.\n\n\n    const bodyElement = createElement(document, \"body\", HTML_NS);\n    htmlElement.appendChild(bodyElement); // doc's origin is an alias to the origin of the context object's associated\n    // document, and doc's effective script origin is an alias to the effective\n    // script origin of the context object's associated document.\n\n    return document;\n  }\n\n}\n\nmodule.exports = {\n  implementation: DOMImplementationImpl\n};","map":{"version":3,"names":["validateNames","require","HTML_NS","SVG_NS","createElement","internalCreateElementNSSteps","DocumentType","documents","DOMImplementationImpl","constructor","globalObject","args","privateData","_globalObject","_ownerDocument","ownerDocument","hasFeature","createDocumentType","qualifiedName","publicId","systemId","qname","createImpl","name","createDocument","namespace","doctype","contentType","document","parsingMode","encoding","element","appendChild","_origin","createHTMLDocument","title","htmlElement","headElement","undefined","titleElement","createTextNode","bodyElement","module","exports","implementation"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/nodes/DOMImplementation-impl.js"],"sourcesContent":["\"use strict\";\n\nconst validateNames = require(\"../helpers/validate-names\");\nconst { HTML_NS, SVG_NS } = require(\"../helpers/namespaces\");\nconst { createElement, internalCreateElementNSSteps } = require(\"../helpers/create-element\");\nconst DocumentType = require(\"../generated/DocumentType\");\nconst documents = require(\"../documents.js\");\n\nclass DOMImplementationImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = privateData.ownerDocument;\n  }\n\n  hasFeature() {\n    return true;\n  }\n\n  createDocumentType(qualifiedName, publicId, systemId) {\n    validateNames.qname(this._globalObject, qualifiedName);\n\n    return DocumentType.createImpl(this._globalObject, [], {\n      ownerDocument: this._ownerDocument,\n      name: qualifiedName,\n      publicId,\n      systemId\n    });\n  }\n\n  // https://dom.spec.whatwg.org/#dom-domimplementation-createdocument\n  createDocument(namespace, qualifiedName, doctype) {\n    let contentType = \"application/xml\";\n\n    if (namespace === HTML_NS) {\n      contentType = \"application/xhtml+xml\";\n    } else if (namespace === SVG_NS) {\n      contentType = \"image/svg+xml\";\n    }\n\n    const document = documents.createImpl(this._globalObject, {\n      contentType,\n      parsingMode: \"xml\",\n      encoding: \"UTF-8\"\n    });\n\n    let element = null;\n    if (qualifiedName !== \"\") {\n      element = internalCreateElementNSSteps(document, namespace, qualifiedName, {});\n    }\n\n    if (doctype !== null) {\n      document.appendChild(doctype);\n    }\n\n    if (element !== null) {\n      document.appendChild(element);\n    }\n\n    document._origin = this._ownerDocument._origin;\n\n    return document;\n  }\n\n  // https://dom.spec.whatwg.org/#dom-domimplementation-createhtmldocument\n  createHTMLDocument(title) {\n    // Let doc be a new document that is an HTML document.\n    // Set doc's content type to \"text/html\".\n    const document = documents.createImpl(this._globalObject, {\n      parsingMode: \"html\",\n      encoding: \"UTF-8\"\n    });\n\n    // Create a doctype, with \"html\" as its name and with its node document set\n    // to doc. Append the newly created node to doc.\n    const doctype = DocumentType.createImpl(this._globalObject, [], {\n      ownerDocument: document,\n      name: \"html\",\n      publicId: \"\",\n      systemId: \"\"\n    });\n\n    document.appendChild(doctype);\n\n    // Create an html element in the HTML namespace, and append it to doc.\n    const htmlElement = createElement(document, \"html\", HTML_NS);\n    document.appendChild(htmlElement);\n\n    // Create a head element in the HTML namespace, and append it to the html\n    // element created in the previous step.\n    const headElement = createElement(document, \"head\", HTML_NS);\n    htmlElement.appendChild(headElement);\n\n    // If the title argument is not omitted:\n    if (title !== undefined) {\n      // Create a title element in the HTML namespace, and append it to the head\n      // element created in the previous step.\n      const titleElement = createElement(document, \"title\", HTML_NS);\n      headElement.appendChild(titleElement);\n\n      // Create a Text node, set its data to title (which could be the empty\n      // string), and append it to the title element created in the previous step.\n      titleElement.appendChild(document.createTextNode(title));\n    }\n\n    // Create a body element in the HTML namespace, and append it to the html\n    // element created in the earlier step.\n    const bodyElement = createElement(document, \"body\", HTML_NS);\n    htmlElement.appendChild(bodyElement);\n\n    // doc's origin is an alias to the origin of the context object's associated\n    // document, and doc's effective script origin is an alias to the effective\n    // script origin of the context object's associated document.\n\n    return document;\n  }\n}\n\nmodule.exports = {\n  implementation: DOMImplementationImpl\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}