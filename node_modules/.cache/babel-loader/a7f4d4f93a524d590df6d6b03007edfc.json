{"ast":null,"code":"\"use strict\";\n\nconst {\n  isForbidden,\n  isForbiddenResponse,\n  isPrivilegedNoCORSRequest,\n  isNoCORSSafelistedRequest,\n  isCORSWhitelisted\n} = require(\"./header-types\");\n\nconst HeaderList = require(\"./header-list\");\n\nfunction assertName(name) {\n  if (!name.match(/^[!#$%&'*+\\-.^`|~\\w]+$/)) {\n    throw new TypeError(\"name is invalid\");\n  }\n}\n\nfunction assertValue(value) {\n  if (value.match(/[\\0\\r\\n]/)) {\n    throw new TypeError(\"value is invalid\");\n  }\n}\n\nclass HeadersImpl {\n  constructor(globalObject, args) {\n    this.guard = \"none\";\n    this.headersList = new HeaderList();\n\n    if (args[0]) {\n      this._fill(args[0]);\n    }\n  }\n\n  _fill(init) {\n    if (Array.isArray(init)) {\n      for (const header of init) {\n        if (header.length !== 2) {\n          throw new TypeError(\"init is invalid\");\n        }\n\n        this.append(header[0], header[1]);\n      }\n    } else {\n      for (const key of Object.keys(init)) {\n        this.append(key, init[key]);\n      }\n    }\n  }\n\n  has(name) {\n    assertName(name);\n    return this.headersList.contains(name);\n  }\n\n  get(name) {\n    assertName(name);\n    return this.headersList.get(name);\n  }\n\n  _removePrivilegedNoCORSHeaders() {\n    this.headersList.delete(\"range\");\n  }\n\n  append(name, value) {\n    value = value.trim();\n    assertName(name);\n    assertValue(value);\n\n    switch (this.guard) {\n      case \"immutable\":\n        throw new TypeError(\"Headers is immutable\");\n\n      case \"request\":\n        if (isForbidden(name)) {\n          return;\n        }\n\n        break;\n\n      case \"request-no-cors\":\n        {\n          let temporaryValue = this.get(name);\n\n          if (temporaryValue === null) {\n            temporaryValue = value;\n          } else {\n            temporaryValue += `, ${value}`;\n          }\n\n          if (!isCORSWhitelisted(name, value)) {\n            return;\n          }\n\n          break;\n        }\n\n      case \"response\":\n        if (isForbiddenResponse(name)) {\n          return;\n        }\n\n        break;\n    }\n\n    this.headersList.append(name, value);\n\n    this._removePrivilegedNoCORSHeaders();\n  }\n\n  set(name, value) {\n    value = value.trim();\n    assertName(name);\n    assertValue(value);\n\n    switch (this.guard) {\n      case \"immutable\":\n        throw new TypeError(\"Headers is immutable\");\n\n      case \"request\":\n        if (isForbidden(name)) {\n          return;\n        }\n\n        break;\n\n      case \"request-no-cors\":\n        {\n          if (!isCORSWhitelisted(name, value)) {\n            return;\n          }\n\n          break;\n        }\n\n      case \"response\":\n        if (isForbiddenResponse(name)) {\n          return;\n        }\n\n        break;\n    }\n\n    this.headersList.set(name, value);\n\n    this._removePrivilegedNoCORSHeaders();\n  }\n\n  delete(name) {\n    assertName(name);\n\n    switch (this.guard) {\n      case \"immutable\":\n        throw new TypeError(\"Headers is immutable\");\n\n      case \"request\":\n        if (isForbidden(name)) {\n          return;\n        }\n\n        break;\n\n      case \"request-no-cors\":\n        {\n          if (!isNoCORSSafelistedRequest(name) && !isPrivilegedNoCORSRequest(name)) {\n            return;\n          }\n\n          break;\n        }\n\n      case \"response\":\n        if (isForbiddenResponse(name)) {\n          return;\n        }\n\n        break;\n    }\n\n    this.headersList.delete(name);\n\n    this._removePrivilegedNoCORSHeaders();\n  }\n\n  *[Symbol.iterator]() {\n    for (const header of this.headersList.sortAndCombine()) {\n      yield header;\n    }\n  }\n\n}\n\nexports.implementation = HeadersImpl;","map":{"version":3,"names":["isForbidden","isForbiddenResponse","isPrivilegedNoCORSRequest","isNoCORSSafelistedRequest","isCORSWhitelisted","require","HeaderList","assertName","name","match","TypeError","assertValue","value","HeadersImpl","constructor","globalObject","args","guard","headersList","_fill","init","Array","isArray","header","length","append","key","Object","keys","has","contains","get","_removePrivilegedNoCORSHeaders","delete","trim","temporaryValue","set","Symbol","iterator","sortAndCombine","exports","implementation"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/fetch/Headers-impl.js"],"sourcesContent":["\"use strict\";\n\nconst {\n  isForbidden,\n  isForbiddenResponse,\n  isPrivilegedNoCORSRequest,\n  isNoCORSSafelistedRequest,\n  isCORSWhitelisted\n} = require(\"./header-types\");\nconst HeaderList = require(\"./header-list\");\n\nfunction assertName(name) {\n  if (!name.match(/^[!#$%&'*+\\-.^`|~\\w]+$/)) {\n    throw new TypeError(\"name is invalid\");\n  }\n}\n\nfunction assertValue(value) {\n  if (value.match(/[\\0\\r\\n]/)) {\n    throw new TypeError(\"value is invalid\");\n  }\n}\n\nclass HeadersImpl {\n  constructor(globalObject, args) {\n    this.guard = \"none\";\n    this.headersList = new HeaderList();\n\n    if (args[0]) {\n      this._fill(args[0]);\n    }\n  }\n\n  _fill(init) {\n    if (Array.isArray(init)) {\n      for (const header of init) {\n        if (header.length !== 2) {\n          throw new TypeError(\"init is invalid\");\n        }\n        this.append(header[0], header[1]);\n      }\n    } else {\n      for (const key of Object.keys(init)) {\n        this.append(key, init[key]);\n      }\n    }\n  }\n\n  has(name) {\n    assertName(name);\n    return this.headersList.contains(name);\n  }\n\n  get(name) {\n    assertName(name);\n    return this.headersList.get(name);\n  }\n\n  _removePrivilegedNoCORSHeaders() {\n    this.headersList.delete(\"range\");\n  }\n\n  append(name, value) {\n    value = value.trim();\n    assertName(name);\n    assertValue(value);\n\n    switch (this.guard) {\n      case \"immutable\":\n        throw new TypeError(\"Headers is immutable\");\n      case \"request\":\n        if (isForbidden(name)) {\n          return;\n        }\n        break;\n      case \"request-no-cors\": {\n        let temporaryValue = this.get(name);\n        if (temporaryValue === null) {\n          temporaryValue = value;\n        } else {\n          temporaryValue += `, ${value}`;\n        }\n        if (!isCORSWhitelisted(name, value)) {\n          return;\n        }\n        break;\n      }\n      case \"response\":\n        if (isForbiddenResponse(name)) {\n          return;\n        }\n        break;\n    }\n\n    this.headersList.append(name, value);\n    this._removePrivilegedNoCORSHeaders();\n  }\n\n  set(name, value) {\n    value = value.trim();\n    assertName(name);\n    assertValue(value);\n\n    switch (this.guard) {\n      case \"immutable\":\n        throw new TypeError(\"Headers is immutable\");\n      case \"request\":\n        if (isForbidden(name)) {\n          return;\n        }\n        break;\n      case \"request-no-cors\": {\n        if (!isCORSWhitelisted(name, value)) {\n          return;\n        }\n        break;\n      }\n      case \"response\":\n        if (isForbiddenResponse(name)) {\n          return;\n        }\n        break;\n    }\n    this.headersList.set(name, value);\n    this._removePrivilegedNoCORSHeaders();\n  }\n\n  delete(name) {\n    assertName(name);\n\n    switch (this.guard) {\n      case \"immutable\":\n        throw new TypeError(\"Headers is immutable\");\n      case \"request\":\n        if (isForbidden(name)) {\n          return;\n        }\n        break;\n      case \"request-no-cors\": {\n        if (\n          !isNoCORSSafelistedRequest(name) &&\n          !isPrivilegedNoCORSRequest(name)\n        ) {\n          return;\n        }\n        break;\n      }\n      case \"response\":\n        if (isForbiddenResponse(name)) {\n          return;\n        }\n        break;\n    }\n    this.headersList.delete(name);\n    this._removePrivilegedNoCORSHeaders();\n  }\n\n  * [Symbol.iterator]() {\n    for (const header of this.headersList.sortAndCombine()) {\n      yield header;\n    }\n  }\n}\n\nexports.implementation = HeadersImpl;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}