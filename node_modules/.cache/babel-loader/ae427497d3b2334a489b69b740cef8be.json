{"ast":null,"code":"\"use strict\";\n\nconst {\n  parseIntoDocument\n} = require(\"../../browser/parser\");\n\nconst Document = require(\"../generated/Document\");\n\nexports.implementation = class DOMParserImpl {\n  constructor(globalObject) {\n    this._globalObject = globalObject;\n  }\n\n  parseFromString(string, contentType) {\n    switch (String(contentType)) {\n      case \"text/html\":\n        {\n          return this.createScriptingDisabledDocument(\"html\", contentType, string);\n        }\n\n      case \"text/xml\":\n      case \"application/xml\":\n      case \"application/xhtml+xml\":\n      case \"image/svg+xml\":\n        {\n          try {\n            return this.createScriptingDisabledDocument(\"xml\", contentType, string);\n          } catch (error) {\n            const document = this.createScriptingDisabledDocument(\"xml\", contentType);\n            const element = document.createElementNS(\"http://www.mozilla.org/newlayout/xml/parsererror.xml\", \"parsererror\");\n            element.textContent = error.message;\n            document.appendChild(element);\n            return document;\n          }\n        }\n\n      default:\n        throw new TypeError(\"Invalid contentType\");\n    }\n  }\n\n  createScriptingDisabledDocument(parsingMode, contentType, string) {\n    const document = Document.createImpl(this._globalObject, [], {\n      options: {\n        parsingMode,\n        encoding: \"UTF-8\",\n        contentType,\n        readyState: \"complete\",\n        scriptingDisabled: true // TODO: somehow set URL to active document's URL\n\n      }\n    });\n\n    if (string !== undefined) {\n      parseIntoDocument(string, document);\n    }\n\n    return document;\n  }\n\n};","map":{"version":3,"names":["parseIntoDocument","require","Document","exports","implementation","DOMParserImpl","constructor","globalObject","_globalObject","parseFromString","string","contentType","String","createScriptingDisabledDocument","error","document","element","createElementNS","textContent","message","appendChild","TypeError","parsingMode","createImpl","options","encoding","readyState","scriptingDisabled","undefined"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/domparsing/DOMParser-impl.js"],"sourcesContent":["\"use strict\";\n\nconst { parseIntoDocument } = require(\"../../browser/parser\");\n\nconst Document = require(\"../generated/Document\");\n\nexports.implementation = class DOMParserImpl {\n  constructor(globalObject) {\n    this._globalObject = globalObject;\n  }\n\n  parseFromString(string, contentType) {\n    switch (String(contentType)) {\n      case \"text/html\": {\n        return this.createScriptingDisabledDocument(\"html\", contentType, string);\n      }\n\n      case \"text/xml\":\n      case \"application/xml\":\n      case \"application/xhtml+xml\":\n      case \"image/svg+xml\": {\n        try {\n          return this.createScriptingDisabledDocument(\"xml\", contentType, string);\n        } catch (error) {\n          const document = this.createScriptingDisabledDocument(\"xml\", contentType);\n          const element = document.createElementNS(\"http://www.mozilla.org/newlayout/xml/parsererror.xml\", \"parsererror\");\n\n          element.textContent = error.message;\n\n          document.appendChild(element);\n          return document;\n        }\n      }\n\n      default:\n        throw new TypeError(\"Invalid contentType\");\n    }\n  }\n\n  createScriptingDisabledDocument(parsingMode, contentType, string) {\n    const document = Document.createImpl(this._globalObject, [], {\n      options: {\n        parsingMode,\n        encoding: \"UTF-8\",\n        contentType,\n        readyState: \"complete\",\n        scriptingDisabled: true\n        // TODO: somehow set URL to active document's URL\n      }\n    });\n\n    if (string !== undefined) {\n      parseIntoDocument(string, document);\n    }\n\n    return document;\n  }\n};\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAwBC,OAAO,CAAC,sBAAD,CAArC;;AAEA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,uBAAD,CAAxB;;AAEAE,OAAO,CAACC,cAAR,GAAyB,MAAMC,aAAN,CAAoB;EAC3CC,WAAW,CAACC,YAAD,EAAe;IACxB,KAAKC,aAAL,GAAqBD,YAArB;EACD;;EAEDE,eAAe,CAACC,MAAD,EAASC,WAAT,EAAsB;IACnC,QAAQC,MAAM,CAACD,WAAD,CAAd;MACE,KAAK,WAAL;QAAkB;UAChB,OAAO,KAAKE,+BAAL,CAAqC,MAArC,EAA6CF,WAA7C,EAA0DD,MAA1D,CAAP;QACD;;MAED,KAAK,UAAL;MACA,KAAK,iBAAL;MACA,KAAK,uBAAL;MACA,KAAK,eAAL;QAAsB;UACpB,IAAI;YACF,OAAO,KAAKG,+BAAL,CAAqC,KAArC,EAA4CF,WAA5C,EAAyDD,MAAzD,CAAP;UACD,CAFD,CAEE,OAAOI,KAAP,EAAc;YACd,MAAMC,QAAQ,GAAG,KAAKF,+BAAL,CAAqC,KAArC,EAA4CF,WAA5C,CAAjB;YACA,MAAMK,OAAO,GAAGD,QAAQ,CAACE,eAAT,CAAyB,sDAAzB,EAAiF,aAAjF,CAAhB;YAEAD,OAAO,CAACE,WAAR,GAAsBJ,KAAK,CAACK,OAA5B;YAEAJ,QAAQ,CAACK,WAAT,CAAqBJ,OAArB;YACA,OAAOD,QAAP;UACD;QACF;;MAED;QACE,MAAM,IAAIM,SAAJ,CAAc,qBAAd,CAAN;IAvBJ;EAyBD;;EAEDR,+BAA+B,CAACS,WAAD,EAAcX,WAAd,EAA2BD,MAA3B,EAAmC;IAChE,MAAMK,QAAQ,GAAGb,QAAQ,CAACqB,UAAT,CAAoB,KAAKf,aAAzB,EAAwC,EAAxC,EAA4C;MAC3DgB,OAAO,EAAE;QACPF,WADO;QAEPG,QAAQ,EAAE,OAFH;QAGPd,WAHO;QAIPe,UAAU,EAAE,UAJL;QAKPC,iBAAiB,EAAE,IALZ,CAMP;;MANO;IADkD,CAA5C,CAAjB;;IAWA,IAAIjB,MAAM,KAAKkB,SAAf,EAA0B;MACxB5B,iBAAiB,CAACU,MAAD,EAASK,QAAT,CAAjB;IACD;;IAED,OAAOA,QAAP;EACD;;AAlD0C,CAA7C"},"metadata":{},"sourceType":"script"}