{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst idlUtils = require(\"../generated/utils.js\");\n\nconst ValidityState = require(\"../generated/ValidityState\");\n\nconst DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nconst {\n  mixin\n} = require(\"../../utils\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\n\nconst HTMLOptionsCollection = require(\"../generated/HTMLOptionsCollection\");\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  getLabelsForLabelable,\n  formOwner,\n  isDisabled\n} = require(\"../helpers/form-controls\");\n\nconst {\n  parseNonNegativeInteger\n} = require(\"../helpers/strings\");\n\nclass HTMLSelectElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._options = HTMLOptionsCollection.createImpl(this._globalObject, [], {\n      element: this,\n      query: () => {\n        // Customized domSymbolTree.treeToArray() clone.\n        const array = [];\n\n        for (const child of domSymbolTree.childrenIterator(this)) {\n          if (child._localName === \"option\") {\n            array.push(child);\n          } else if (child._localName === \"optgroup\") {\n            for (const childOfGroup of domSymbolTree.childrenIterator(child)) {\n              if (childOfGroup._localName === \"option\") {\n                array.push(childOfGroup);\n              }\n            }\n          }\n        }\n\n        return array;\n      }\n    });\n    this._selectedOptions = null; // lazy\n\n    this._customValidityErrorMessage = \"\";\n    this._labels = null;\n  }\n\n  _formReset() {\n    for (const option of this.options) {\n      option._selectedness = option.hasAttributeNS(null, \"selected\");\n      option._dirtyness = false;\n    }\n\n    this._askedForAReset();\n  }\n\n  _askedForAReset() {\n    if (this.hasAttributeNS(null, \"multiple\")) {\n      return;\n    }\n\n    const selected = this.options.filter(opt => opt._selectedness);\n    const size = this._displaySize;\n\n    if (size === 1 && !selected.length) {\n      // select the first option that is not disabled\n      for (const option of this.options) {\n        let disabled = option.hasAttributeNS(null, \"disabled\");\n        const parentNode = domSymbolTree.parent(option);\n\n        if (parentNode && parentNode.nodeName.toUpperCase() === \"OPTGROUP\" && parentNode.hasAttributeNS(null, \"disabled\")) {\n          disabled = true;\n        }\n\n        if (!disabled) {\n          // (do not set dirty)\n          option._selectedness = true;\n          break;\n        }\n      }\n    } else if (selected.length >= 2) {\n      // select the last selected option\n      selected.forEach((option, index) => {\n        option._selectedness = index === selected.length - 1;\n      });\n    }\n  }\n\n  _descendantAdded(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n\n    super._descendantAdded(parent, child);\n  }\n\n  _descendantRemoved(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n\n    super._descendantRemoved(parent, child);\n  }\n\n  _attrModified(name, value, oldValue) {\n    if (name === \"multiple\" || name === \"size\") {\n      this._askedForAReset();\n    }\n\n    super._attrModified(name, value, oldValue);\n  }\n\n  get _displaySize() {\n    if (this.hasAttributeNS(null, \"size\")) {\n      const size = parseNonNegativeInteger(this.getAttributeNS(null, \"size\"));\n\n      if (size !== null) {\n        return size;\n      }\n    }\n\n    return this.hasAttributeNS(null, \"multiple\") ? 4 : 1;\n  }\n\n  get _mutable() {\n    return !isDisabled(this);\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  get selectedOptions() {\n    return HTMLCollection.createImpl(this._globalObject, [], {\n      element: this,\n      query: () => domSymbolTree.treeToArray(this, {\n        filter: node => node._localName === \"option\" && node._selectedness === true\n      })\n    });\n  }\n\n  get selectedIndex() {\n    for (let i = 0; i < this.options.length; i++) {\n      if (this.options.item(i)._selectedness) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  set selectedIndex(index) {\n    for (let i = 0; i < this.options.length; i++) {\n      this.options.item(i)._selectedness = false;\n    }\n\n    const selectedOption = this.options.item(index);\n\n    if (selectedOption) {\n      selectedOption._selectedness = true;\n      selectedOption._dirtyness = true;\n    }\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get value() {\n    for (const option of this.options) {\n      if (option._selectedness) {\n        return option.value;\n      }\n    }\n\n    return \"\";\n  }\n\n  set value(val) {\n    for (const option of this.options) {\n      if (option.value === val) {\n        option._selectedness = true;\n        option._dirtyness = true;\n      } else {\n        option._selectedness = false;\n      }\n\n      option._modified();\n    }\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get type() {\n    return this.hasAttributeNS(null, \"multiple\") ? \"select-multiple\" : \"select-one\";\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    return this.options[idlUtils.supportedPropertyIndices];\n  }\n\n  get length() {\n    return this.options.length;\n  }\n\n  set length(value) {\n    this.options.length = value;\n  }\n\n  item(index) {\n    return this.options.item(index);\n  }\n\n  namedItem(name) {\n    return this.options.namedItem(name);\n  }\n\n  [idlUtils.indexedSetNew](index, value) {\n    return this.options[idlUtils.indexedSetNew](index, value);\n  }\n\n  [idlUtils.indexedSetExisting](index, value) {\n    return this.options[idlUtils.indexedSetExisting](index, value);\n  }\n\n  add(opt, before) {\n    this.options.add(opt, before);\n  }\n\n  remove(index) {\n    if (arguments.length > 0) {\n      index = conversions.long(index, {\n        context: \"Failed to execute 'remove' on 'HTMLSelectElement': parameter 1\"\n      });\n      this.options.remove(index);\n    } else {\n      super.remove();\n    }\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.hasAttributeNS(null, \"readonly\");\n  } // Constraint validation: If the element has its required attribute specified,\n  // and either none of the option elements in the select element's list of options\n  // have their selectedness set to true, or the only option element in the select\n  // element's list of options with its selectedness set to true is the placeholder\n  // label option, then the element is suffering from being missing.\n\n\n  get validity() {\n    if (!this._validity) {\n      const state = {\n        valueMissing: () => {\n          if (!this.hasAttributeNS(null, \"required\")) {\n            return false;\n          }\n\n          const selectedOptionIndex = this.selectedIndex;\n          return selectedOptionIndex < 0 || selectedOptionIndex === 0 && this._hasPlaceholderOption;\n        }\n      };\n      this._validity = ValidityState.createImpl(this._globalObject, [], {\n        element: this,\n        state\n      });\n    }\n\n    return this._validity;\n  } // If a select element has a required attribute specified, does not have a multiple attribute\n  // specified, and has a display size of 1; and if the value of the first option element in the\n  // select element's list of options (if any) is the empty string, and that option element's parent\n  // node is the select element(and not an optgroup element), then that option is the select\n  // element's placeholder label option.\n  // https://html.spec.whatwg.org/multipage/form-elements.html#placeholder-label-option\n\n\n  get _hasPlaceholderOption() {\n    return this.hasAttributeNS(null, \"required\") && !this.hasAttributeNS(null, \"multiple\") && this._displaySize === 1 && this.options.length > 0 && this.options.item(0).value === \"\" && this.options.item(0).parentNode._localName !== \"optgroup\";\n  }\n\n}\n\nmixin(HTMLSelectElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLSelectElementImpl\n};","map":{"version":3,"names":["conversions","require","idlUtils","ValidityState","DefaultConstraintValidationImpl","implementation","mixin","HTMLElementImpl","NODE_TYPE","HTMLCollection","HTMLOptionsCollection","domSymbolTree","getLabelsForLabelable","formOwner","isDisabled","parseNonNegativeInteger","HTMLSelectElementImpl","constructor","globalObject","args","privateData","_options","createImpl","_globalObject","element","query","array","child","childrenIterator","_localName","push","childOfGroup","_selectedOptions","_customValidityErrorMessage","_labels","_formReset","option","options","_selectedness","hasAttributeNS","_dirtyness","_askedForAReset","selected","filter","opt","size","_displaySize","length","disabled","parentNode","parent","nodeName","toUpperCase","forEach","index","_descendantAdded","nodeType","ELEMENT_NODE","_descendantRemoved","_attrModified","name","value","oldValue","getAttributeNS","_mutable","selectedOptions","treeToArray","node","selectedIndex","i","item","selectedOption","labels","val","_modified","form","type","supportedPropertyIndices","namedItem","indexedSetNew","indexedSetExisting","add","before","remove","arguments","long","context","_barredFromConstraintValidationSpecialization","validity","_validity","state","valueMissing","selectedOptionIndex","_hasPlaceholderOption","prototype","module","exports"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/nodes/HTMLSelectElement-impl.js"],"sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst idlUtils = require(\"../generated/utils.js\");\nconst ValidityState = require(\"../generated/ValidityState\");\nconst DefaultConstraintValidationImpl =\n  require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\nconst { mixin } = require(\"../../utils\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst NODE_TYPE = require(\"../node-type\");\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\nconst HTMLOptionsCollection = require(\"../generated/HTMLOptionsCollection\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { getLabelsForLabelable, formOwner, isDisabled } = require(\"../helpers/form-controls\");\nconst { parseNonNegativeInteger } = require(\"../helpers/strings\");\n\nclass HTMLSelectElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._options = HTMLOptionsCollection.createImpl(this._globalObject, [], {\n      element: this,\n      query: () => {\n        // Customized domSymbolTree.treeToArray() clone.\n        const array = [];\n        for (const child of domSymbolTree.childrenIterator(this)) {\n          if (child._localName === \"option\") {\n            array.push(child);\n          } else if (child._localName === \"optgroup\") {\n            for (const childOfGroup of domSymbolTree.childrenIterator(child)) {\n              if (childOfGroup._localName === \"option\") {\n                array.push(childOfGroup);\n              }\n            }\n          }\n        }\n        return array;\n      }\n    });\n    this._selectedOptions = null; // lazy\n\n    this._customValidityErrorMessage = \"\";\n\n    this._labels = null;\n  }\n\n  _formReset() {\n    for (const option of this.options) {\n      option._selectedness = option.hasAttributeNS(null, \"selected\");\n      option._dirtyness = false;\n    }\n    this._askedForAReset();\n  }\n\n  _askedForAReset() {\n    if (this.hasAttributeNS(null, \"multiple\")) {\n      return;\n    }\n\n    const selected = this.options.filter(opt => opt._selectedness);\n\n    const size = this._displaySize;\n    if (size === 1 && !selected.length) {\n      // select the first option that is not disabled\n      for (const option of this.options) {\n        let disabled = option.hasAttributeNS(null, \"disabled\");\n        const parentNode = domSymbolTree.parent(option);\n        if (parentNode &&\n          parentNode.nodeName.toUpperCase() === \"OPTGROUP\" &&\n          parentNode.hasAttributeNS(null, \"disabled\")) {\n          disabled = true;\n        }\n\n        if (!disabled) {\n          // (do not set dirty)\n          option._selectedness = true;\n          break;\n        }\n      }\n    } else if (selected.length >= 2) {\n      // select the last selected option\n      selected.forEach((option, index) => {\n        option._selectedness = index === selected.length - 1;\n      });\n    }\n  }\n\n  _descendantAdded(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n\n    super._descendantAdded(parent, child);\n  }\n\n  _descendantRemoved(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n\n    super._descendantRemoved(parent, child);\n  }\n\n  _attrModified(name, value, oldValue) {\n    if (name === \"multiple\" || name === \"size\") {\n      this._askedForAReset();\n    }\n    super._attrModified(name, value, oldValue);\n  }\n\n  get _displaySize() {\n    if (this.hasAttributeNS(null, \"size\")) {\n      const size = parseNonNegativeInteger(this.getAttributeNS(null, \"size\"));\n      if (size !== null) {\n        return size;\n      }\n    }\n    return this.hasAttributeNS(null, \"multiple\") ? 4 : 1;\n  }\n\n  get _mutable() {\n    return !isDisabled(this);\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  get selectedOptions() {\n    return HTMLCollection.createImpl(this._globalObject, [], {\n      element: this,\n      query: () => domSymbolTree.treeToArray(this, {\n        filter: node => node._localName === \"option\" && node._selectedness === true\n      })\n    });\n  }\n\n  get selectedIndex() {\n    for (let i = 0; i < this.options.length; i++) {\n      if (this.options.item(i)._selectedness) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  set selectedIndex(index) {\n    for (let i = 0; i < this.options.length; i++) {\n      this.options.item(i)._selectedness = false;\n    }\n\n    const selectedOption = this.options.item(index);\n    if (selectedOption) {\n      selectedOption._selectedness = true;\n      selectedOption._dirtyness = true;\n    }\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get value() {\n    for (const option of this.options) {\n      if (option._selectedness) {\n        return option.value;\n      }\n    }\n\n    return \"\";\n  }\n\n  set value(val) {\n    for (const option of this.options) {\n      if (option.value === val) {\n        option._selectedness = true;\n        option._dirtyness = true;\n      } else {\n        option._selectedness = false;\n      }\n\n      option._modified();\n    }\n  }\n\n  get form() {\n    return formOwner(this);\n  }\n\n  get type() {\n    return this.hasAttributeNS(null, \"multiple\") ? \"select-multiple\" : \"select-one\";\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    return this.options[idlUtils.supportedPropertyIndices];\n  }\n\n  get length() {\n    return this.options.length;\n  }\n\n  set length(value) {\n    this.options.length = value;\n  }\n\n  item(index) {\n    return this.options.item(index);\n  }\n\n  namedItem(name) {\n    return this.options.namedItem(name);\n  }\n\n  [idlUtils.indexedSetNew](index, value) {\n    return this.options[idlUtils.indexedSetNew](index, value);\n  }\n\n  [idlUtils.indexedSetExisting](index, value) {\n    return this.options[idlUtils.indexedSetExisting](index, value);\n  }\n\n  add(opt, before) {\n    this.options.add(opt, before);\n  }\n\n  remove(index) {\n    if (arguments.length > 0) {\n      index = conversions.long(index, {\n        context: \"Failed to execute 'remove' on 'HTMLSelectElement': parameter 1\"\n      });\n      this.options.remove(index);\n    } else {\n      super.remove();\n    }\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.hasAttributeNS(null, \"readonly\");\n  }\n\n  // Constraint validation: If the element has its required attribute specified,\n  // and either none of the option elements in the select element's list of options\n  // have their selectedness set to true, or the only option element in the select\n  // element's list of options with its selectedness set to true is the placeholder\n  // label option, then the element is suffering from being missing.\n  get validity() {\n    if (!this._validity) {\n      const state = {\n        valueMissing: () => {\n          if (!this.hasAttributeNS(null, \"required\")) {\n            return false;\n          }\n          const selectedOptionIndex = this.selectedIndex;\n          return selectedOptionIndex < 0 || (selectedOptionIndex === 0 && this._hasPlaceholderOption);\n        }\n      };\n\n      this._validity = ValidityState.createImpl(this._globalObject, [], {\n        element: this,\n        state\n      });\n    }\n    return this._validity;\n  }\n\n  // If a select element has a required attribute specified, does not have a multiple attribute\n  // specified, and has a display size of 1; and if the value of the first option element in the\n  // select element's list of options (if any) is the empty string, and that option element's parent\n  // node is the select element(and not an optgroup element), then that option is the select\n  // element's placeholder label option.\n  // https://html.spec.whatwg.org/multipage/form-elements.html#placeholder-label-option\n  get _hasPlaceholderOption() {\n    return this.hasAttributeNS(null, \"required\") && !this.hasAttributeNS(null, \"multiple\") &&\n      this._displaySize === 1 && this.options.length > 0 && this.options.item(0).value === \"\" &&\n      this.options.item(0).parentNode._localName !== \"optgroup\";\n  }\n}\n\nmixin(HTMLSelectElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLSelectElementImpl\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}