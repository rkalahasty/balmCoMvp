{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst {\n  serializeURL\n} = require(\"whatwg-url\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  Canvas\n} = require(\"../../utils\");\n\nconst {\n  parseURLToResultingURLRecord\n} = require(\"../helpers/document-base-url\");\n\nclass HTMLImageElementImpl extends HTMLElementImpl {\n  constructor() {\n    super(...arguments);\n    this._currentRequestState = \"unavailable\";\n  }\n\n  _attrModified(name, value, oldVal) {\n    // TODO: handle crossorigin\n    if (name === \"src\" || (name === \"srcset\" || name === \"width\" || name === \"sizes\") && value !== oldVal) {\n      this._updateTheImageData();\n    }\n\n    super._attrModified(name, value, oldVal);\n  }\n\n  get _accept() {\n    return \"image/png,image/*;q=0.8,*/*;q=0.5\";\n  }\n\n  get height() {\n    // Just like on browsers, if no width / height is defined, we fall back on the\n    // dimensions of the internal image data.\n    return this.hasAttributeNS(null, \"height\") ? conversions[\"unsigned long\"](this.getAttributeNS(null, \"height\")) : this.naturalHeight;\n  }\n\n  set height(V) {\n    this.setAttributeNS(null, \"height\", String(V));\n  }\n\n  get width() {\n    return this.hasAttributeNS(null, \"width\") ? conversions[\"unsigned long\"](this.getAttributeNS(null, \"width\")) : this.naturalWidth;\n  }\n\n  set width(V) {\n    this.setAttributeNS(null, \"width\", String(V));\n  }\n\n  get naturalHeight() {\n    return this._image ? this._image.naturalHeight : 0;\n  }\n\n  get naturalWidth() {\n    return this._image ? this._image.naturalWidth : 0;\n  }\n\n  get complete() {\n    const srcAttributeValue = this.getAttributeNS(null, \"src\");\n    return srcAttributeValue === null || srcAttributeValue === \"\" || this._currentRequestState === \"broken\" || this._currentRequestState === \"completely available\";\n  }\n\n  get currentSrc() {\n    return this._currentSrc || \"\";\n  } // https://html.spec.whatwg.org/multipage/images.html#updating-the-image-data\n\n\n  _updateTheImageData() {\n    const document = this._ownerDocument;\n\n    if (!document._defaultView) {\n      return;\n    }\n\n    if (!Canvas) {\n      return;\n    }\n\n    if (!this._image) {\n      this._image = new Canvas.Image();\n    }\n\n    this._currentSrc = null;\n    this._currentRequestState = \"unavailable\";\n    const srcAttributeValue = this.getAttributeNS(null, \"src\");\n    let urlString = null;\n\n    if (srcAttributeValue !== null && srcAttributeValue !== \"\") {\n      const urlRecord = parseURLToResultingURLRecord(srcAttributeValue, this._ownerDocument);\n\n      if (urlRecord === null) {\n        return;\n      }\n\n      urlString = serializeURL(urlRecord);\n    }\n\n    if (urlString !== null) {\n      const resourceLoader = document._resourceLoader;\n      let request;\n\n      const onLoadImage = data => {\n        const {\n          response\n        } = request;\n\n        if (response && response.statusCode !== undefined && response.statusCode !== 200) {\n          throw new Error(\"Status code: \" + response.statusCode);\n        }\n\n        let error = null;\n\n        this._image.onerror = function (err) {\n          error = err;\n        };\n\n        this._image.src = data;\n\n        if (error) {\n          throw new Error(error);\n        }\n\n        this._currentSrc = srcAttributeValue;\n        this._currentRequestState = \"completely available\";\n      };\n\n      request = resourceLoader.fetch(urlString, {\n        element: this,\n        onLoad: onLoadImage,\n        onError: () => {\n          this._currentRequestState = \"broken\";\n        }\n      });\n    } else {\n      this._image.src = \"\";\n    }\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLImageElementImpl\n};","map":{"version":3,"names":["conversions","require","serializeURL","HTMLElementImpl","implementation","Canvas","parseURLToResultingURLRecord","HTMLImageElementImpl","constructor","_currentRequestState","_attrModified","name","value","oldVal","_updateTheImageData","_accept","height","hasAttributeNS","getAttributeNS","naturalHeight","V","setAttributeNS","String","width","naturalWidth","_image","complete","srcAttributeValue","currentSrc","_currentSrc","document","_ownerDocument","_defaultView","Image","urlString","urlRecord","resourceLoader","_resourceLoader","request","onLoadImage","data","response","statusCode","undefined","Error","error","onerror","err","src","fetch","element","onLoad","onError","module","exports"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/nodes/HTMLImageElement-impl.js"],"sourcesContent":["\"use strict\";\nconst conversions = require(\"webidl-conversions\");\nconst { serializeURL } = require(\"whatwg-url\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { Canvas } = require(\"../../utils\");\nconst { parseURLToResultingURLRecord } = require(\"../helpers/document-base-url\");\n\nclass HTMLImageElementImpl extends HTMLElementImpl {\n  constructor(...args) {\n    super(...args);\n    this._currentRequestState = \"unavailable\";\n  }\n\n  _attrModified(name, value, oldVal) {\n    // TODO: handle crossorigin\n    if (name === \"src\" || ((name === \"srcset\" || name === \"width\" || name === \"sizes\") && value !== oldVal)) {\n      this._updateTheImageData();\n    }\n\n    super._attrModified(name, value, oldVal);\n  }\n\n  get _accept() {\n    return \"image/png,image/*;q=0.8,*/*;q=0.5\";\n  }\n\n  get height() {\n    // Just like on browsers, if no width / height is defined, we fall back on the\n    // dimensions of the internal image data.\n    return this.hasAttributeNS(null, \"height\") ?\n           conversions[\"unsigned long\"](this.getAttributeNS(null, \"height\")) :\n           this.naturalHeight;\n  }\n\n  set height(V) {\n    this.setAttributeNS(null, \"height\", String(V));\n  }\n\n  get width() {\n    return this.hasAttributeNS(null, \"width\") ?\n           conversions[\"unsigned long\"](this.getAttributeNS(null, \"width\")) :\n           this.naturalWidth;\n  }\n\n  set width(V) {\n    this.setAttributeNS(null, \"width\", String(V));\n  }\n\n  get naturalHeight() {\n    return this._image ? this._image.naturalHeight : 0;\n  }\n\n  get naturalWidth() {\n    return this._image ? this._image.naturalWidth : 0;\n  }\n\n  get complete() {\n    const srcAttributeValue = this.getAttributeNS(null, \"src\");\n    return srcAttributeValue === null ||\n      srcAttributeValue === \"\" ||\n      this._currentRequestState === \"broken\" ||\n      this._currentRequestState === \"completely available\";\n  }\n\n  get currentSrc() {\n    return this._currentSrc || \"\";\n  }\n\n  // https://html.spec.whatwg.org/multipage/images.html#updating-the-image-data\n  _updateTheImageData() {\n    const document = this._ownerDocument;\n\n    if (!document._defaultView) {\n      return;\n    }\n\n    if (!Canvas) {\n      return;\n    }\n\n    if (!this._image) {\n      this._image = new Canvas.Image();\n    }\n    this._currentSrc = null;\n    this._currentRequestState = \"unavailable\";\n    const srcAttributeValue = this.getAttributeNS(null, \"src\");\n    let urlString = null;\n    if (srcAttributeValue !== null && srcAttributeValue !== \"\") {\n      const urlRecord = parseURLToResultingURLRecord(srcAttributeValue, this._ownerDocument);\n      if (urlRecord === null) {\n        return;\n      }\n      urlString = serializeURL(urlRecord);\n    }\n    if (urlString !== null) {\n      const resourceLoader = document._resourceLoader;\n      let request;\n\n      const onLoadImage = data => {\n        const { response } = request;\n\n        if (response && response.statusCode !== undefined && response.statusCode !== 200) {\n          throw new Error(\"Status code: \" + response.statusCode);\n        }\n        let error = null;\n        this._image.onerror = function (err) {\n          error = err;\n        };\n        this._image.src = data;\n        if (error) {\n          throw new Error(error);\n        }\n        this._currentSrc = srcAttributeValue;\n        this._currentRequestState = \"completely available\";\n      };\n\n      request = resourceLoader.fetch(urlString, {\n        element: this,\n        onLoad: onLoadImage,\n        onError: () => {\n          this._currentRequestState = \"broken\";\n        }\n      });\n    } else {\n      this._image.src = \"\";\n    }\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLImageElementImpl\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}