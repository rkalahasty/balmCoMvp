{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst {\n  filter,\n  FILTER_ACCEPT,\n  FILTER_REJECT,\n  FILTER_SKIP\n} = require(\"./helpers\");\n\nconst FIRST = false;\nconst LAST = true;\nconst NEXT = false;\nconst PREVIOUS = true;\nexports.implementation = class TreeWalkerImpl {\n  constructor(globalObject, args, privateData) {\n    this._active = false;\n    this.root = privateData.root;\n    this.currentNode = this.root;\n    this.whatToShow = privateData.whatToShow;\n    this.filter = privateData.filter;\n    this._globalObject = globalObject;\n  }\n\n  get currentNode() {\n    return this._currentNode;\n  }\n\n  set currentNode(node) {\n    if (node === null) {\n      throw DOMException.create(this._globalObject, [\"Cannot set currentNode to null\", \"NotSupportedError\"]);\n    }\n\n    this._currentNode = node;\n  }\n\n  parentNode() {\n    let node = this._currentNode;\n\n    while (node !== null && node !== this.root) {\n      node = node.parentNode;\n\n      if (node !== null && filter(this, node) === FILTER_ACCEPT) {\n        return this._currentNode = node;\n      }\n    }\n\n    return null;\n  }\n\n  firstChild() {\n    return this._traverseChildren(FIRST);\n  }\n\n  lastChild() {\n    return this._traverseChildren(LAST);\n  }\n\n  previousSibling() {\n    return this._traverseSiblings(PREVIOUS);\n  }\n\n  nextSibling() {\n    return this._traverseSiblings(NEXT);\n  }\n\n  previousNode() {\n    let node = this._currentNode;\n\n    while (node !== this.root) {\n      let sibling = node.previousSibling;\n\n      while (sibling !== null) {\n        node = sibling;\n        let result = filter(this, node);\n\n        while (result !== FILTER_REJECT && node.hasChildNodes()) {\n          node = node.lastChild;\n          result = filter(this, node);\n        }\n\n        if (result === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n\n        sibling = node.previousSibling;\n      }\n\n      if (node === this.root || node.parentNode === null) {\n        return null;\n      }\n\n      node = node.parentNode;\n\n      if (filter(this, node) === FILTER_ACCEPT) {\n        return this._currentNode = node;\n      }\n    }\n\n    return null;\n  }\n\n  nextNode() {\n    let node = this._currentNode;\n    let result = FILTER_ACCEPT;\n\n    for (;;) {\n      while (result !== FILTER_REJECT && node.hasChildNodes()) {\n        node = node.firstChild;\n        result = filter(this, node);\n\n        if (result === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n      }\n\n      do {\n        if (node === this.root) {\n          return null;\n        }\n\n        const sibling = node.nextSibling;\n\n        if (sibling !== null) {\n          node = sibling;\n          break;\n        }\n\n        node = node.parentNode;\n      } while (node !== null);\n\n      if (node === null) {\n        return null;\n      }\n\n      result = filter(this, node);\n\n      if (result === FILTER_ACCEPT) {\n        return this._currentNode = node;\n      }\n    }\n  }\n\n  _traverseChildren(type) {\n    let node = this._currentNode;\n    node = type === FIRST ? node.firstChild : node.lastChild;\n\n    if (node === null) {\n      return null;\n    }\n\n    main: for (;;) {\n      const result = filter(this, node);\n\n      if (result === FILTER_ACCEPT) {\n        return this._currentNode = node;\n      }\n\n      if (result === FILTER_SKIP) {\n        const child = type === FIRST ? node.firstChild : node.lastChild;\n\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n\n      for (;;) {\n        const sibling = type === FIRST ? node.nextSibling : node.previousSibling;\n\n        if (sibling !== null) {\n          node = sibling;\n          continue main;\n        }\n\n        const parent = node.parentNode;\n\n        if (parent === null || parent === this.root || parent === this._currentNode) {\n          return null;\n        }\n\n        node = parent;\n      }\n    }\n  }\n\n  _traverseSiblings(type) {\n    let node = this._currentNode;\n\n    if (node === this.root) {\n      return null;\n    }\n\n    for (;;) {\n      let sibling = type === NEXT ? node.nextSibling : node.previousSibling;\n\n      while (sibling !== null) {\n        node = sibling;\n        const result = filter(this, node);\n\n        if (result === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n\n        sibling = type === NEXT ? node.firstChild : node.lastChild;\n\n        if (result === FILTER_REJECT || sibling === null) {\n          sibling = type === NEXT ? node.nextSibling : node.previousSibling;\n        }\n      }\n\n      node = node.parentNode;\n\n      if (node === null || node === this.root) {\n        return null;\n      }\n\n      if (filter(this, node) === FILTER_ACCEPT) {\n        return null;\n      }\n    }\n  }\n\n};","map":{"version":3,"names":["DOMException","require","filter","FILTER_ACCEPT","FILTER_REJECT","FILTER_SKIP","FIRST","LAST","NEXT","PREVIOUS","exports","implementation","TreeWalkerImpl","constructor","globalObject","args","privateData","_active","root","currentNode","whatToShow","_globalObject","_currentNode","node","create","parentNode","firstChild","_traverseChildren","lastChild","previousSibling","_traverseSiblings","nextSibling","previousNode","sibling","result","hasChildNodes","nextNode","type","main","child","parent"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/traversal/TreeWalker-impl.js"],"sourcesContent":["\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst { filter, FILTER_ACCEPT, FILTER_REJECT, FILTER_SKIP } = require(\"./helpers\");\n\nconst FIRST = false;\nconst LAST = true;\nconst NEXT = false;\nconst PREVIOUS = true;\n\nexports.implementation = class TreeWalkerImpl {\n  constructor(globalObject, args, privateData) {\n    this._active = false;\n    this.root = privateData.root;\n    this.currentNode = this.root;\n    this.whatToShow = privateData.whatToShow;\n    this.filter = privateData.filter;\n\n    this._globalObject = globalObject;\n  }\n\n  get currentNode() {\n    return this._currentNode;\n  }\n\n  set currentNode(node) {\n    if (node === null) {\n      throw DOMException.create(this._globalObject, [\"Cannot set currentNode to null\", \"NotSupportedError\"]);\n    }\n\n    this._currentNode = node;\n  }\n\n  parentNode() {\n    let node = this._currentNode;\n    while (node !== null && node !== this.root) {\n      node = node.parentNode;\n\n      if (node !== null && filter(this, node) === FILTER_ACCEPT) {\n        return (this._currentNode = node);\n      }\n    }\n    return null;\n  }\n\n  firstChild() {\n    return this._traverseChildren(FIRST);\n  }\n\n  lastChild() {\n    return this._traverseChildren(LAST);\n  }\n\n  previousSibling() {\n    return this._traverseSiblings(PREVIOUS);\n  }\n\n  nextSibling() {\n    return this._traverseSiblings(NEXT);\n  }\n\n  previousNode() {\n    let node = this._currentNode;\n\n    while (node !== this.root) {\n      let sibling = node.previousSibling;\n\n      while (sibling !== null) {\n        node = sibling;\n        let result = filter(this, node);\n\n        while (result !== FILTER_REJECT && node.hasChildNodes()) {\n          node = node.lastChild;\n          result = filter(this, node);\n        }\n\n        if (result === FILTER_ACCEPT) {\n          return (this._currentNode = node);\n        }\n\n        sibling = node.previousSibling;\n      }\n\n      if (node === this.root || node.parentNode === null) {\n        return null;\n      }\n\n      node = node.parentNode;\n\n      if (filter(this, node) === FILTER_ACCEPT) {\n        return (this._currentNode = node);\n      }\n    }\n\n    return null;\n  }\n\n  nextNode() {\n    let node = this._currentNode;\n    let result = FILTER_ACCEPT;\n\n    for (;;) {\n      while (result !== FILTER_REJECT && node.hasChildNodes()) {\n        node = node.firstChild;\n        result = filter(this, node);\n        if (result === FILTER_ACCEPT) {\n          return (this._currentNode = node);\n        }\n      }\n\n      do {\n        if (node === this.root) {\n          return null;\n        }\n\n        const sibling = node.nextSibling;\n\n        if (sibling !== null) {\n          node = sibling;\n          break;\n        }\n\n        node = node.parentNode;\n      } while (node !== null);\n\n      if (node === null) {\n        return null;\n      }\n\n      result = filter(this, node);\n\n      if (result === FILTER_ACCEPT) {\n        return (this._currentNode = node);\n      }\n    }\n  }\n\n  _traverseChildren(type) {\n    let node = this._currentNode;\n    node = type === FIRST ? node.firstChild : node.lastChild;\n\n    if (node === null) {\n      return null;\n    }\n\n    main: for (;;) {\n      const result = filter(this, node);\n\n      if (result === FILTER_ACCEPT) {\n        return (this._currentNode = node);\n      }\n\n      if (result === FILTER_SKIP) {\n        const child = type === FIRST ? node.firstChild : node.lastChild;\n\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n\n      for (;;) {\n        const sibling = type === FIRST ? node.nextSibling : node.previousSibling;\n\n        if (sibling !== null) {\n          node = sibling;\n          continue main;\n        }\n\n        const parent = node.parentNode;\n\n        if (parent === null || parent === this.root || parent === this._currentNode) {\n          return null;\n        }\n\n        node = parent;\n      }\n    }\n  }\n\n  _traverseSiblings(type) {\n    let node = this._currentNode;\n\n    if (node === this.root) {\n      return null;\n    }\n\n    for (;;) {\n      let sibling = type === NEXT ? node.nextSibling : node.previousSibling;\n\n      while (sibling !== null) {\n        node = sibling;\n        const result = filter(this, node);\n\n        if (result === FILTER_ACCEPT) {\n          return (this._currentNode = node);\n        }\n\n        sibling = type === NEXT ? node.firstChild : node.lastChild;\n\n        if (result === FILTER_REJECT || sibling === null) {\n          sibling = type === NEXT ? node.nextSibling : node.previousSibling;\n        }\n      }\n\n      node = node.parentNode;\n\n      if (node === null || node === this.root) {\n        return null;\n      }\n\n      if (filter(this, node) === FILTER_ACCEPT) {\n        return null;\n      }\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}