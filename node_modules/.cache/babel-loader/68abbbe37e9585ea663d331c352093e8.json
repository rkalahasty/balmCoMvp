{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  parseFloatingPointNumber\n} = require(\"../helpers/strings\");\n\nconst {\n  getLabelsForLabelable\n} = require(\"../helpers/form-controls\");\n\nclass HTMLMeterElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._labels = null;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-minimum\n\n\n  get _minimumValue() {\n    const min = this.getAttributeNS(null, \"min\");\n\n    if (min !== null) {\n      const parsed = parseFloatingPointNumber(min);\n\n      if (parsed !== null) {\n        return parsed;\n      }\n    }\n\n    return 0;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-maximum\n\n\n  get _maximumValue() {\n    let candidate = 1.0;\n    const max = this.getAttributeNS(null, \"max\");\n\n    if (max !== null) {\n      const parsed = parseFloatingPointNumber(max);\n\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    const minimumValue = this._minimumValue;\n    return candidate >= minimumValue ? candidate : minimumValue;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-actual\n\n\n  get _actualValue() {\n    let candidate = 0;\n    const value = this.getAttributeNS(null, \"value\");\n\n    if (value !== null) {\n      const parsed = parseFloatingPointNumber(value);\n\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    const minimumValue = this._minimumValue;\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    const maximumValue = this._maximumValue;\n    return candidate > maximumValue ? maximumValue : candidate;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-low\n\n\n  get _lowBoundary() {\n    const minimumValue = this._minimumValue;\n    let candidate = minimumValue;\n    const low = this.getAttributeNS(null, \"low\");\n\n    if (low !== null) {\n      const parsed = parseFloatingPointNumber(low);\n\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    const maximumValue = this._maximumValue;\n    return candidate > maximumValue ? maximumValue : candidate;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-high\n\n\n  get _highBoundary() {\n    const maximumValue = this._maximumValue;\n    let candidate = maximumValue;\n    const high = this.getAttributeNS(null, \"high\");\n\n    if (high !== null) {\n      const parsed = parseFloatingPointNumber(high);\n\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    const lowBoundary = this._lowBoundary;\n\n    if (candidate < lowBoundary) {\n      return lowBoundary;\n    }\n\n    return candidate > maximumValue ? maximumValue : candidate;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-optimum\n\n\n  get _optimumPoint() {\n    const minimumValue = this._minimumValue;\n    const maximumValue = this._maximumValue;\n    let candidate = (minimumValue + maximumValue) / 2;\n    const optimum = this.getAttributeNS(null, \"optimum\");\n\n    if (optimum !== null) {\n      const parsed = parseFloatingPointNumber(optimum);\n\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get value() {\n    return this._actualValue;\n  }\n\n  set value(val) {\n    this.setAttributeNS(null, \"value\", String(val));\n  }\n\n  get min() {\n    return this._minimumValue;\n  }\n\n  set min(val) {\n    this.setAttributeNS(null, \"min\", String(val));\n  }\n\n  get max() {\n    return this._maximumValue;\n  }\n\n  set max(val) {\n    this.setAttributeNS(null, \"max\", String(val));\n  }\n\n  get low() {\n    return this._lowBoundary;\n  }\n\n  set low(val) {\n    this.setAttributeNS(null, \"low\", String(val));\n  }\n\n  get high() {\n    return this._highBoundary;\n  }\n\n  set high(val) {\n    this.setAttributeNS(null, \"high\", String(val));\n  }\n\n  get optimum() {\n    return this._optimumPoint;\n  }\n\n  set optimum(val) {\n    this.setAttributeNS(null, \"optimum\", String(val));\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLMeterElementImpl\n};","map":{"version":3,"names":["HTMLElementImpl","require","implementation","parseFloatingPointNumber","getLabelsForLabelable","HTMLMeterElementImpl","constructor","globalObject","args","privateData","_labels","_minimumValue","min","getAttributeNS","parsed","_maximumValue","candidate","max","minimumValue","_actualValue","value","maximumValue","_lowBoundary","low","_highBoundary","high","lowBoundary","_optimumPoint","optimum","labels","val","setAttributeNS","String","module","exports"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/nodes/HTMLMeterElement-impl.js"],"sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { parseFloatingPointNumber } = require(\"../helpers/strings\");\nconst { getLabelsForLabelable } = require(\"../helpers/form-controls\");\n\nclass HTMLMeterElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._labels = null;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-minimum\n  get _minimumValue() {\n    const min = this.getAttributeNS(null, \"min\");\n    if (min !== null) {\n      const parsed = parseFloatingPointNumber(min);\n      if (parsed !== null) {\n        return parsed;\n      }\n    }\n    return 0;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-maximum\n  get _maximumValue() {\n    let candidate = 1.0;\n\n    const max = this.getAttributeNS(null, \"max\");\n    if (max !== null) {\n      const parsed = parseFloatingPointNumber(max);\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    const minimumValue = this._minimumValue;\n    return candidate >= minimumValue ? candidate : minimumValue;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-actual\n  get _actualValue() {\n    let candidate = 0;\n\n    const value = this.getAttributeNS(null, \"value\");\n    if (value !== null) {\n      const parsed = parseFloatingPointNumber(value);\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    const minimumValue = this._minimumValue;\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    const maximumValue = this._maximumValue;\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-low\n  get _lowBoundary() {\n    const minimumValue = this._minimumValue;\n    let candidate = minimumValue;\n\n    const low = this.getAttributeNS(null, \"low\");\n    if (low !== null) {\n      const parsed = parseFloatingPointNumber(low);\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    const maximumValue = this._maximumValue;\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-high\n  get _highBoundary() {\n    const maximumValue = this._maximumValue;\n    let candidate = maximumValue;\n\n    const high = this.getAttributeNS(null, \"high\");\n    if (high !== null) {\n      const parsed = parseFloatingPointNumber(high);\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    const lowBoundary = this._lowBoundary;\n    if (candidate < lowBoundary) {\n      return lowBoundary;\n    }\n\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-optimum\n  get _optimumPoint() {\n    const minimumValue = this._minimumValue;\n    const maximumValue = this._maximumValue;\n    let candidate = (minimumValue + maximumValue) / 2;\n\n    const optimum = this.getAttributeNS(null, \"optimum\");\n    if (optimum !== null) {\n      const parsed = parseFloatingPointNumber(optimum);\n      if (parsed !== null) {\n        candidate = parsed;\n      }\n    }\n\n    if (candidate < minimumValue) {\n      return minimumValue;\n    }\n\n    return candidate > maximumValue ? maximumValue : candidate;\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get value() {\n    return this._actualValue;\n  }\n\n  set value(val) {\n    this.setAttributeNS(null, \"value\", String(val));\n  }\n\n  get min() {\n    return this._minimumValue;\n  }\n\n  set min(val) {\n    this.setAttributeNS(null, \"min\", String(val));\n  }\n\n  get max() {\n    return this._maximumValue;\n  }\n\n  set max(val) {\n    this.setAttributeNS(null, \"max\", String(val));\n  }\n\n  get low() {\n    return this._lowBoundary;\n  }\n\n  set low(val) {\n    this.setAttributeNS(null, \"low\", String(val));\n  }\n\n  get high() {\n    return this._highBoundary;\n  }\n\n  set high(val) {\n    this.setAttributeNS(null, \"high\", String(val));\n  }\n\n  get optimum() {\n    return this._optimumPoint;\n  }\n\n  set optimum(val) {\n    this.setAttributeNS(null, \"optimum\", String(val));\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLMeterElementImpl\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}