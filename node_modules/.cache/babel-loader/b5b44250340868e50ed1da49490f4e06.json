{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst {\n  asciiLowercase,\n  parseNonNegativeInteger\n} = require(\"../helpers/strings\");\n\nconst {\n  closest\n} = require(\"../helpers/traversal\");\n\nfunction reflectedAttributeClampedToRange(attrValue, min, max) {\n  let defaultValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (attrValue === null) {\n    return defaultValue;\n  }\n\n  const parsed = parseNonNegativeInteger(attrValue);\n\n  if (parsed === null) {\n    return defaultValue;\n  }\n\n  if (parsed < min) {\n    return min;\n  }\n\n  if (parsed > max) {\n    return max;\n  }\n\n  return parsed;\n}\n\nclass HTMLTableCellElementImpl extends HTMLElementImpl {\n  get colSpan() {\n    return reflectedAttributeClampedToRange(this.getAttributeNS(null, \"colspan\"), 1, 1000, 1);\n  }\n\n  set colSpan(V) {\n    this.setAttributeNS(null, \"colspan\", String(V));\n  }\n\n  get rowSpan() {\n    return reflectedAttributeClampedToRange(this.getAttributeNS(null, \"rowspan\"), 0, 65534, 1);\n  }\n\n  set rowSpan(V) {\n    this.setAttributeNS(null, \"rowspan\", String(V));\n  }\n\n  get cellIndex() {\n    const tr = closest(this, \"tr\");\n\n    if (tr === null) {\n      return -1;\n    }\n\n    return tr.cells.indexOf(this);\n  }\n\n  get scope() {\n    let value = this.getAttributeNS(null, \"scope\");\n\n    if (value === null) {\n      return \"\";\n    } // Enumerated attribute is matched ASCII-case-insensitively.\n\n\n    value = asciiLowercase(value);\n\n    if (value === \"row\" || value === \"col\" || value === \"rowgroup\" || value === \"colgroup\") {\n      return value;\n    }\n\n    return \"\";\n  }\n\n  set scope(V) {\n    this.setAttributeNS(null, \"scope\", V);\n  }\n\n}\n\nmodule.exports = {\n  implementation: HTMLTableCellElementImpl\n};","map":{"version":3,"names":["HTMLElementImpl","require","implementation","asciiLowercase","parseNonNegativeInteger","closest","reflectedAttributeClampedToRange","attrValue","min","max","defaultValue","parsed","HTMLTableCellElementImpl","colSpan","getAttributeNS","V","setAttributeNS","String","rowSpan","cellIndex","tr","cells","indexOf","scope","value","module","exports"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableCellElement-impl.js"],"sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst { asciiLowercase, parseNonNegativeInteger } = require(\"../helpers/strings\");\nconst { closest } = require(\"../helpers/traversal\");\n\nfunction reflectedAttributeClampedToRange(attrValue, min, max, defaultValue = 0) {\n  if (attrValue === null) {\n    return defaultValue;\n  }\n  const parsed = parseNonNegativeInteger(attrValue);\n  if (parsed === null) {\n    return defaultValue;\n  }\n  if (parsed < min) {\n    return min;\n  }\n  if (parsed > max) {\n    return max;\n  }\n  return parsed;\n}\n\nclass HTMLTableCellElementImpl extends HTMLElementImpl {\n  get colSpan() {\n    return reflectedAttributeClampedToRange(this.getAttributeNS(null, \"colspan\"), 1, 1000, 1);\n  }\n\n  set colSpan(V) {\n    this.setAttributeNS(null, \"colspan\", String(V));\n  }\n\n  get rowSpan() {\n    return reflectedAttributeClampedToRange(this.getAttributeNS(null, \"rowspan\"), 0, 65534, 1);\n  }\n\n  set rowSpan(V) {\n    this.setAttributeNS(null, \"rowspan\", String(V));\n  }\n\n  get cellIndex() {\n    const tr = closest(this, \"tr\");\n    if (tr === null) {\n      return -1;\n    }\n\n    return tr.cells.indexOf(this);\n  }\n\n  get scope() {\n    let value = this.getAttributeNS(null, \"scope\");\n    if (value === null) {\n      return \"\";\n    }\n\n    // Enumerated attribute is matched ASCII-case-insensitively.\n    value = asciiLowercase(value);\n    if (value === \"row\" || value === \"col\" || value === \"rowgroup\" || value === \"colgroup\") {\n      return value;\n    }\n\n    return \"\";\n  }\n\n  set scope(V) {\n    this.setAttributeNS(null, \"scope\", V);\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLTableCellElementImpl\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAAP,CAA8BC,cAAtD;;AAEA,MAAM;EAAEC,cAAF;EAAkBC;AAAlB,IAA8CH,OAAO,CAAC,oBAAD,CAA3D;;AACA,MAAM;EAAEI;AAAF,IAAcJ,OAAO,CAAC,sBAAD,CAA3B;;AAEA,SAASK,gCAAT,CAA0CC,SAA1C,EAAqDC,GAArD,EAA0DC,GAA1D,EAAiF;EAAA,IAAlBC,YAAkB,uEAAH,CAAG;;EAC/E,IAAIH,SAAS,KAAK,IAAlB,EAAwB;IACtB,OAAOG,YAAP;EACD;;EACD,MAAMC,MAAM,GAAGP,uBAAuB,CAACG,SAAD,CAAtC;;EACA,IAAII,MAAM,KAAK,IAAf,EAAqB;IACnB,OAAOD,YAAP;EACD;;EACD,IAAIC,MAAM,GAAGH,GAAb,EAAkB;IAChB,OAAOA,GAAP;EACD;;EACD,IAAIG,MAAM,GAAGF,GAAb,EAAkB;IAChB,OAAOA,GAAP;EACD;;EACD,OAAOE,MAAP;AACD;;AAED,MAAMC,wBAAN,SAAuCZ,eAAvC,CAAuD;EAC1C,IAAPa,OAAO,GAAG;IACZ,OAAOP,gCAAgC,CAAC,KAAKQ,cAAL,CAAoB,IAApB,EAA0B,SAA1B,CAAD,EAAuC,CAAvC,EAA0C,IAA1C,EAAgD,CAAhD,CAAvC;EACD;;EAEU,IAAPD,OAAO,CAACE,CAAD,EAAI;IACb,KAAKC,cAAL,CAAoB,IAApB,EAA0B,SAA1B,EAAqCC,MAAM,CAACF,CAAD,CAA3C;EACD;;EAEU,IAAPG,OAAO,GAAG;IACZ,OAAOZ,gCAAgC,CAAC,KAAKQ,cAAL,CAAoB,IAApB,EAA0B,SAA1B,CAAD,EAAuC,CAAvC,EAA0C,KAA1C,EAAiD,CAAjD,CAAvC;EACD;;EAEU,IAAPI,OAAO,CAACH,CAAD,EAAI;IACb,KAAKC,cAAL,CAAoB,IAApB,EAA0B,SAA1B,EAAqCC,MAAM,CAACF,CAAD,CAA3C;EACD;;EAEY,IAATI,SAAS,GAAG;IACd,MAAMC,EAAE,GAAGf,OAAO,CAAC,IAAD,EAAO,IAAP,CAAlB;;IACA,IAAIe,EAAE,KAAK,IAAX,EAAiB;MACf,OAAO,CAAC,CAAR;IACD;;IAED,OAAOA,EAAE,CAACC,KAAH,CAASC,OAAT,CAAiB,IAAjB,CAAP;EACD;;EAEQ,IAALC,KAAK,GAAG;IACV,IAAIC,KAAK,GAAG,KAAKV,cAAL,CAAoB,IAApB,EAA0B,OAA1B,CAAZ;;IACA,IAAIU,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,EAAP;IACD,CAJS,CAMV;;;IACAA,KAAK,GAAGrB,cAAc,CAACqB,KAAD,CAAtB;;IACA,IAAIA,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,KAA7B,IAAsCA,KAAK,KAAK,UAAhD,IAA8DA,KAAK,KAAK,UAA5E,EAAwF;MACtF,OAAOA,KAAP;IACD;;IAED,OAAO,EAAP;EACD;;EAEQ,IAALD,KAAK,CAACR,CAAD,EAAI;IACX,KAAKC,cAAL,CAAoB,IAApB,EAA0B,OAA1B,EAAmCD,CAAnC;EACD;;AA3CoD;;AA8CvDU,MAAM,CAACC,OAAP,GAAiB;EACfxB,cAAc,EAAEU;AADD,CAAjB"},"metadata":{},"sourceType":"script"}