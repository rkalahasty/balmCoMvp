{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst idlUtils = require(\"../generated/utils\");\n\nconst {\n  attach,\n  detach\n} = require(\"../helpers/svg/basic-types\"); // https://svgwg.org/svg2-draft/types.html#ListInterfaces\n// Child classes must implement _reserialize()\n\n\nclass List {\n  _initList(_ref) {\n    let {\n      element,\n      attribute,\n      readOnly = false\n    } = _ref;\n    this._element = element;\n    this._attribute = attribute;\n    this._attributeRegistryEntry = element.constructor.attributeRegistry.get(attribute);\n    this._readOnly = readOnly;\n    this._list = [];\n    this._version = -1;\n  }\n\n  get _needsResync() {\n    return this._version < this._element._version;\n  }\n\n  _synchronize() {\n    if (!this._needsResync) {\n      return;\n    }\n\n    let value = [];\n\n    if (this._element.hasAttributeNS(null, this._attribute)) {\n      value = this._attributeRegistryEntry.getValue(this._element.getAttributeNS(null, this._attribute));\n    }\n\n    if (value.length === 0 && this._attributeRegistryEntry.initialValue !== undefined) {\n      value = this._attributeRegistryEntry.getValue(this._attributeRegistryEntry.initialValue);\n    } // TODO: support non-DOMString lists.\n\n\n    this._list = value;\n    this._version = this._element._version;\n  }\n\n  _reserialize() {\n    const elements = this._list;\n\n    this._element.setAttributeNS(null, this._attribute, this._attributeRegistryEntry.serialize(elements)); // Prevent ping-ponging back and forth between _reserialize() and _synchronize().\n\n\n    this._version = this._element._version;\n  }\n\n  [idlUtils.supportsPropertyIndex](index) {\n    this._synchronize();\n\n    return index >= 0 && index < this.length;\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    this._synchronize();\n\n    return this._list.keys();\n  }\n\n  get length() {\n    this._synchronize();\n\n    return this._list.length;\n  }\n\n  get numberOfItems() {\n    this._synchronize();\n\n    return this._list.length;\n  }\n\n  clear() {\n    this._synchronize();\n\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\"Attempting to modify a read-only list\", \"NoModificationAllowedError\"]);\n    }\n\n    for (const item of this._list) {\n      detach(item);\n    }\n\n    this._list.length = 0;\n\n    this._reserialize();\n  }\n\n  initialize(newItem) {\n    this._synchronize();\n\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\"Attempting to modify a read-only list\", \"NoModificationAllowedError\"]);\n    }\n\n    for (const item of this._list) {\n      detach(item);\n    }\n\n    this._list.length = 0; // TODO: clone non-DOMString list elements.\n\n    attach(newItem, this);\n\n    this._list.push(newItem);\n\n    this._reserialize();\n  }\n\n  getItem(index) {\n    this._synchronize();\n\n    if (index >= this._list.length) {\n      throw DOMException.create(this._globalObject, [`The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`, \"IndexSizeError\"]);\n    }\n\n    return this._list[index];\n  }\n\n  insertItemBefore(newItem, index) {\n    this._synchronize();\n\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\"Attempting to modify a read-only list\", \"NoModificationAllowedError\"]);\n    } // TODO: clone non-DOMString list elements.\n\n\n    if (index > this._list.length) {\n      index = this._list.length;\n    }\n\n    this._list.splice(index, 0, newItem);\n\n    attach(newItem, this);\n\n    this._reserialize();\n\n    return newItem;\n  }\n\n  replaceItem(newItem, index) {\n    this._synchronize();\n\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\"Attempting to modify a read-only list\", \"NoModificationAllowedError\"]);\n    }\n\n    if (index >= this._list.length) {\n      throw DOMException.create(this._globalObject, [`The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`, \"IndexSizeError\"]);\n    } // TODO: clone non-DOMString list elements.\n\n\n    detach(this._list[index]);\n    this._list[index] = newItem;\n    attach(newItem, this);\n\n    this._reserialize();\n\n    return newItem;\n  }\n\n  removeItem(index) {\n    this._synchronize();\n\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\"Attempting to modify a read-only list\", \"NoModificationAllowedError\"]);\n    }\n\n    if (index >= this._list.length) {\n      throw DOMException.create(this._globalObject, [`The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`, \"IndexSizeError\"]);\n    }\n\n    const item = this._list[index];\n    detach(item);\n\n    this._list.splice(index, 1);\n\n    this._reserialize();\n\n    return item;\n  }\n\n  appendItem(newItem) {\n    this._synchronize(); // TODO: clone non-DOMString list elements.\n\n\n    this._list.push(newItem);\n\n    attach(newItem, this);\n\n    this._reserialize();\n\n    return newItem;\n  }\n\n  [idlUtils.indexedSetNew](index, value) {\n    // Note: this will always throw a IndexSizeError.\n    this.replaceItem(value, index);\n  }\n\n  [idlUtils.indexedSetExisting](index, value) {\n    this.replaceItem(value, index);\n  }\n\n}\n\nmodule.exports = List;","map":{"version":3,"names":["DOMException","require","idlUtils","attach","detach","List","_initList","element","attribute","readOnly","_element","_attribute","_attributeRegistryEntry","constructor","attributeRegistry","get","_readOnly","_list","_version","_needsResync","_synchronize","value","hasAttributeNS","getValue","getAttributeNS","length","initialValue","undefined","_reserialize","elements","setAttributeNS","serialize","supportsPropertyIndex","index","supportedPropertyIndices","keys","numberOfItems","clear","create","_globalObject","item","initialize","newItem","push","getItem","insertItemBefore","splice","replaceItem","removeItem","appendItem","indexedSetNew","indexedSetExisting","module","exports"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/svg/SVGListBase.js"],"sourcesContent":["\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst idlUtils = require(\"../generated/utils\");\nconst { attach, detach } = require(\"../helpers/svg/basic-types\");\n\n// https://svgwg.org/svg2-draft/types.html#ListInterfaces\n\n// Child classes must implement _reserialize()\nclass List {\n  _initList({\n    element,\n    attribute,\n    readOnly = false\n  }) {\n    this._element = element;\n    this._attribute = attribute;\n    this._attributeRegistryEntry = element.constructor.attributeRegistry.get(attribute);\n    this._readOnly = readOnly;\n    this._list = [];\n    this._version = -1;\n  }\n\n  get _needsResync() {\n    return this._version < this._element._version;\n  }\n\n  _synchronize() {\n    if (!this._needsResync) {\n      return;\n    }\n    let value = [];\n    if (this._element.hasAttributeNS(null, this._attribute)) {\n      value = this._attributeRegistryEntry.getValue(this._element.getAttributeNS(null, this._attribute));\n    }\n    if (value.length === 0 && this._attributeRegistryEntry.initialValue !== undefined) {\n      value = this._attributeRegistryEntry.getValue(this._attributeRegistryEntry.initialValue);\n    }\n    // TODO: support non-DOMString lists.\n    this._list = value;\n    this._version = this._element._version;\n  }\n\n  _reserialize() {\n    const elements = this._list;\n    this._element.setAttributeNS(null, this._attribute, this._attributeRegistryEntry.serialize(elements));\n    // Prevent ping-ponging back and forth between _reserialize() and _synchronize().\n    this._version = this._element._version;\n  }\n\n  [idlUtils.supportsPropertyIndex](index) {\n    this._synchronize();\n    return index >= 0 && index < this.length;\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    this._synchronize();\n    return this._list.keys();\n  }\n\n  get length() {\n    this._synchronize();\n    return this._list.length;\n  }\n\n  get numberOfItems() {\n    this._synchronize();\n    return this._list.length;\n  }\n\n  clear() {\n    this._synchronize();\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\n        \"Attempting to modify a read-only list\",\n        \"NoModificationAllowedError\"\n      ]);\n    }\n    for (const item of this._list) {\n      detach(item);\n    }\n    this._list.length = 0;\n    this._reserialize();\n  }\n\n  initialize(newItem) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\n        \"Attempting to modify a read-only list\",\n        \"NoModificationAllowedError\"\n      ]);\n    }\n    for (const item of this._list) {\n      detach(item);\n    }\n    this._list.length = 0;\n    // TODO: clone non-DOMString list elements.\n    attach(newItem, this);\n    this._list.push(newItem);\n    this._reserialize();\n  }\n\n  getItem(index) {\n    this._synchronize();\n    if (index >= this._list.length) {\n      throw DOMException.create(this._globalObject, [\n        `The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`,\n        \"IndexSizeError\"\n      ]);\n    }\n    return this._list[index];\n  }\n\n  insertItemBefore(newItem, index) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\n        \"Attempting to modify a read-only list\",\n        \"NoModificationAllowedError\"\n      ]);\n    }\n    // TODO: clone non-DOMString list elements.\n    if (index > this._list.length) {\n      index = this._list.length;\n    }\n    this._list.splice(index, 0, newItem);\n    attach(newItem, this);\n    this._reserialize();\n    return newItem;\n  }\n\n  replaceItem(newItem, index) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\n        \"Attempting to modify a read-only list\",\n        \"NoModificationAllowedError\"\n      ]);\n    }\n    if (index >= this._list.length) {\n      throw DOMException.create(this._globalObject, [\n        `The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`,\n        \"IndexSizeError\"\n      ]);\n    }\n    // TODO: clone non-DOMString list elements.\n    detach(this._list[index]);\n    this._list[index] = newItem;\n    attach(newItem, this);\n    this._reserialize();\n    return newItem;\n  }\n\n  removeItem(index) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw DOMException.create(this._globalObject, [\n        \"Attempting to modify a read-only list\",\n        \"NoModificationAllowedError\"\n      ]);\n    }\n    if (index >= this._list.length) {\n      throw DOMException.create(this._globalObject, [\n        `The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`,\n        \"IndexSizeError\"\n      ]);\n    }\n    const item = this._list[index];\n    detach(item);\n    this._list.splice(index, 1);\n    this._reserialize();\n    return item;\n  }\n\n  appendItem(newItem) {\n    this._synchronize();\n    // TODO: clone non-DOMString list elements.\n    this._list.push(newItem);\n    attach(newItem, this);\n    this._reserialize();\n    return newItem;\n  }\n\n  [idlUtils.indexedSetNew](index, value) {\n    // Note: this will always throw a IndexSizeError.\n    this.replaceItem(value, index);\n  }\n\n  [idlUtils.indexedSetExisting](index, value) {\n    this.replaceItem(value, index);\n  }\n}\n\nmodule.exports = List;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}