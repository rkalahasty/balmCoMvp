{"ast":null,"code":"\"use strict\";\n\nconst {\n  wrapperForImpl\n} = require(\"../generated/utils\"); // If we were to implement the MutationObserver by spec, the MutationObservers will not be collected by the GC because\n// all the MO are kept in a mutation observer list (https://github.com/jsdom/jsdom/pull/2398/files#r238123889). The\n// mutation observer list is primarily used to invoke the mutation observer callback in the same order than the\n// mutation observer creation.\n// In order to get around this issue, we will assign an increasing id for each mutation observer, this way we would be\n// able to invoke the callback in the creation order without having to keep a list of all the mutation observers.\n\n\nlet mutationObserverId = 0; // https://dom.spec.whatwg.org/#mutationobserver\n\nclass MutationObserverImpl {\n  // https://dom.spec.whatwg.org/#dom-mutationobserver-mutationobserver\n  constructor(globalObject, args) {\n    const [callback] = args;\n    this._callback = callback;\n    this._nodeList = [];\n    this._recordQueue = [];\n    this._id = ++mutationObserverId;\n  } // https://dom.spec.whatwg.org/#dom-mutationobserver-observe\n\n\n  observe(target, options) {\n    if ((\"attributeOldValue\" in options || \"attributeFilter\" in options) && !(\"attributes\" in options)) {\n      options.attributes = true;\n    }\n\n    if (\"characterDataOldValue\" in options & !(\"characterData\" in options)) {\n      options.characterData = true;\n    }\n\n    if (!options.childList && !options.attributes && !options.characterData) {\n      throw new TypeError(\"The options object must set at least one of 'attributes', 'characterData', or 'childList' \" + \"to true.\");\n    } else if (options.attributeOldValue && !options.attributes) {\n      throw new TypeError(\"The options object may only set 'attributeOldValue' to true when 'attributes' is true or \" + \"not present.\");\n    } else if (\"attributeFilter\" in options && !options.attributes) {\n      throw new TypeError(\"The options object may only set 'attributeFilter' when 'attributes' is true or not \" + \"present.\");\n    } else if (options.characterDataOldValue && !options.characterData) {\n      throw new TypeError(\"The options object may only set 'characterDataOldValue' to true when 'characterData' is \" + \"true or not present.\");\n    }\n\n    const existingRegisteredObserver = target._registeredObserverList.find(registeredObserver => {\n      return registeredObserver.observer === this;\n    });\n\n    if (existingRegisteredObserver) {\n      for (const node of this._nodeList) {\n        node._registeredObserverList = node._registeredObserverList.filter(registeredObserver => {\n          return registeredObserver.source !== existingRegisteredObserver;\n        });\n      }\n\n      existingRegisteredObserver.options = options;\n    } else {\n      target._registeredObserverList.push({\n        observer: this,\n        options\n      });\n\n      this._nodeList.push(target);\n    }\n  } // https://dom.spec.whatwg.org/#dom-mutationobserver-disconnect\n\n\n  disconnect() {\n    for (const node of this._nodeList) {\n      node._registeredObserverList = node._registeredObserverList.filter(registeredObserver => {\n        return registeredObserver.observer !== this;\n      });\n    }\n\n    this._recordQueue = [];\n  } // https://dom.spec.whatwg.org/#dom-mutationobserver-takerecords\n\n\n  takeRecords() {\n    // TODO: revisit if https://github.com/jsdom/webidl2js/pull/108 gets fixed.\n    const records = this._recordQueue.map(wrapperForImpl);\n\n    this._recordQueue = [];\n    return records;\n  }\n\n}\n\nmodule.exports = {\n  implementation: MutationObserverImpl\n};","map":{"version":3,"names":["wrapperForImpl","require","mutationObserverId","MutationObserverImpl","constructor","globalObject","args","callback","_callback","_nodeList","_recordQueue","_id","observe","target","options","attributes","characterData","childList","TypeError","attributeOldValue","characterDataOldValue","existingRegisteredObserver","_registeredObserverList","find","registeredObserver","observer","node","filter","source","push","disconnect","takeRecords","records","map","module","exports","implementation"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/mutation-observer/MutationObserver-impl.js"],"sourcesContent":["\"use strict\";\n\nconst { wrapperForImpl } = require(\"../generated/utils\");\n\n// If we were to implement the MutationObserver by spec, the MutationObservers will not be collected by the GC because\n// all the MO are kept in a mutation observer list (https://github.com/jsdom/jsdom/pull/2398/files#r238123889). The\n// mutation observer list is primarily used to invoke the mutation observer callback in the same order than the\n// mutation observer creation.\n// In order to get around this issue, we will assign an increasing id for each mutation observer, this way we would be\n// able to invoke the callback in the creation order without having to keep a list of all the mutation observers.\nlet mutationObserverId = 0;\n\n// https://dom.spec.whatwg.org/#mutationobserver\nclass MutationObserverImpl {\n  // https://dom.spec.whatwg.org/#dom-mutationobserver-mutationobserver\n  constructor(globalObject, args) {\n    const [callback] = args;\n\n    this._callback = callback;\n    this._nodeList = [];\n    this._recordQueue = [];\n\n    this._id = ++mutationObserverId;\n  }\n\n  // https://dom.spec.whatwg.org/#dom-mutationobserver-observe\n  observe(target, options) {\n    if ((\"attributeOldValue\" in options || \"attributeFilter\" in options) && !(\"attributes\" in options)) {\n      options.attributes = true;\n    }\n\n    if (\"characterDataOldValue\" in options & !(\"characterData\" in options)) {\n      options.characterData = true;\n    }\n\n    if (!options.childList && !options.attributes && !options.characterData) {\n      throw new TypeError(\"The options object must set at least one of 'attributes', 'characterData', or 'childList' \" +\n        \"to true.\");\n    } else if (options.attributeOldValue && !options.attributes) {\n      throw new TypeError(\"The options object may only set 'attributeOldValue' to true when 'attributes' is true or \" +\n        \"not present.\");\n    } else if ((\"attributeFilter\" in options) && !options.attributes) {\n      throw new TypeError(\"The options object may only set 'attributeFilter' when 'attributes' is true or not \" +\n        \"present.\");\n    } else if (options.characterDataOldValue && !options.characterData) {\n      throw new TypeError(\"The options object may only set 'characterDataOldValue' to true when 'characterData' is \" +\n        \"true or not present.\");\n    }\n\n    const existingRegisteredObserver = target._registeredObserverList.find(registeredObserver => {\n      return registeredObserver.observer === this;\n    });\n\n    if (existingRegisteredObserver) {\n      for (const node of this._nodeList) {\n        node._registeredObserverList = node._registeredObserverList.filter(registeredObserver => {\n          return registeredObserver.source !== existingRegisteredObserver;\n        });\n      }\n\n      existingRegisteredObserver.options = options;\n    } else {\n      target._registeredObserverList.push({\n        observer: this,\n        options\n      });\n\n      this._nodeList.push(target);\n    }\n  }\n\n  // https://dom.spec.whatwg.org/#dom-mutationobserver-disconnect\n  disconnect() {\n    for (const node of this._nodeList) {\n      node._registeredObserverList = node._registeredObserverList.filter(registeredObserver => {\n        return registeredObserver.observer !== this;\n      });\n    }\n\n    this._recordQueue = [];\n  }\n\n  // https://dom.spec.whatwg.org/#dom-mutationobserver-takerecords\n  takeRecords() {\n    // TODO: revisit if https://github.com/jsdom/webidl2js/pull/108 gets fixed.\n    const records = this._recordQueue.map(wrapperForImpl);\n    this._recordQueue = [];\n\n    return records;\n  }\n}\n\nmodule.exports = {\n  implementation: MutationObserverImpl\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}