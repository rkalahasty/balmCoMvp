{"ast":null,"code":"\"use strict\";\n\nconst enumerationValues = new Set([\"text/html\", \"text/xml\", \"application/xml\", \"application/xhtml+xml\", \"image/svg+xml\"]);\nexports.enumerationValues = enumerationValues;\n\nexports.convert = function convert(value) {\n  let {\n    context = \"The provided value\"\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const string = `${value}`;\n\n  if (!enumerationValues.has(string)) {\n    throw new TypeError(`${context} '${string}' is not a valid enumeration value for SupportedType`);\n  }\n\n  return string;\n};","map":{"version":3,"names":["enumerationValues","Set","exports","convert","value","context","string","has","TypeError"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/generated/SupportedType.js"],"sourcesContent":["\"use strict\";\n\nconst enumerationValues = new Set([\n  \"text/html\",\n  \"text/xml\",\n  \"application/xml\",\n  \"application/xhtml+xml\",\n  \"image/svg+xml\"\n]);\nexports.enumerationValues = enumerationValues;\n\nexports.convert = function convert(value, { context = \"The provided value\" } = {}) {\n  const string = `${value}`;\n  if (!enumerationValues.has(string)) {\n    throw new TypeError(`${context} '${string}' is not a valid enumeration value for SupportedType`);\n  }\n  return string;\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,iBAAiB,GAAG,IAAIC,GAAJ,CAAQ,CAChC,WADgC,EAEhC,UAFgC,EAGhC,iBAHgC,EAIhC,uBAJgC,EAKhC,eALgC,CAAR,CAA1B;AAOAC,OAAO,CAACF,iBAAR,GAA4BA,iBAA5B;;AAEAE,OAAO,CAACC,OAAR,GAAkB,SAASA,OAAT,CAAiBC,KAAjB,EAAiE;EAAA,IAAzC;IAAEC,OAAO,GAAG;EAAZ,CAAyC,uEAAJ,EAAI;EACjF,MAAMC,MAAM,GAAI,GAAEF,KAAM,EAAxB;;EACA,IAAI,CAACJ,iBAAiB,CAACO,GAAlB,CAAsBD,MAAtB,CAAL,EAAoC;IAClC,MAAM,IAAIE,SAAJ,CAAe,GAAEH,OAAQ,KAAIC,MAAO,sDAApC,CAAN;EACD;;EACD,OAAOA,MAAP;AACD,CAND"},"metadata":{},"sourceType":"script"}