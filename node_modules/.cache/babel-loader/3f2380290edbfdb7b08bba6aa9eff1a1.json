{"ast":null,"code":"// AST walker module for Mozilla Parser API compatible trees\n// A simple walk is one where you simply specify callbacks to be\n// called on specific nodes. The last two arguments are optional. A\n// simple use would be\n//\n//     walk.simple(myTree, {\n//         Expression: function(node) { ... }\n//     });\n//\n// to do something with all expressions. All Parser API node types\n// can be used to identify node types, as well as Expression and\n// Statement, which denote categories of nodes.\n//\n// The base argument can be used to pass a custom (recursive)\n// walker, and state can be used to give this walked an initial\n// state.\nfunction simple(node, visitors, baseVisitor, state, override) {\n  if (!baseVisitor) {\n    baseVisitor = base;\n  }\n\n  (function c(node, st, override) {\n    var type = override || node.type,\n        found = visitors[type];\n    baseVisitor[type](node, st, c);\n\n    if (found) {\n      found(node, st);\n    }\n  })(node, state, override);\n} // An ancestor walk keeps an array of ancestor nodes (including the\n// current node) and passes them to the callback as third parameter\n// (and also as state parameter when no other state is present).\n\n\nfunction ancestor(node, visitors, baseVisitor, state, override) {\n  var ancestors = [];\n\n  if (!baseVisitor) {\n    baseVisitor = base;\n  }\n\n  (function c(node, st, override) {\n    var type = override || node.type,\n        found = visitors[type];\n    var isNew = node !== ancestors[ancestors.length - 1];\n\n    if (isNew) {\n      ancestors.push(node);\n    }\n\n    baseVisitor[type](node, st, c);\n\n    if (found) {\n      found(node, st || ancestors, ancestors);\n    }\n\n    if (isNew) {\n      ancestors.pop();\n    }\n  })(node, state, override);\n} // A recursive walk is one where your functions override the default\n// walkers. They can modify and replace the state parameter that's\n// threaded through the walk, and can opt how and whether to walk\n// their child nodes (by calling their third argument on these\n// nodes).\n\n\nfunction recursive(node, state, funcs, baseVisitor, override) {\n  var visitor = funcs ? make(funcs, baseVisitor || undefined) : baseVisitor;\n\n  (function c(node, st, override) {\n    visitor[override || node.type](node, st, c);\n  })(node, state, override);\n}\n\nfunction makeTest(test) {\n  if (typeof test === \"string\") {\n    return function (type) {\n      return type === test;\n    };\n  } else if (!test) {\n    return function () {\n      return true;\n    };\n  } else {\n    return test;\n  }\n}\n\nvar Found = function Found(node, state) {\n  this.node = node;\n  this.state = state;\n}; // A full walk triggers the callback on each node\n\n\nfunction full(node, callback, baseVisitor, state, override) {\n  if (!baseVisitor) {\n    baseVisitor = base;\n  }\n\n  (function c(node, st, override) {\n    var type = override || node.type;\n    baseVisitor[type](node, st, c);\n\n    if (!override) {\n      callback(node, st, type);\n    }\n  })(node, state, override);\n} // An fullAncestor walk is like an ancestor walk, but triggers\n// the callback on each node\n\n\nfunction fullAncestor(node, callback, baseVisitor, state) {\n  if (!baseVisitor) {\n    baseVisitor = base;\n  }\n\n  var ancestors = [];\n\n  (function c(node, st, override) {\n    var type = override || node.type;\n    var isNew = node !== ancestors[ancestors.length - 1];\n\n    if (isNew) {\n      ancestors.push(node);\n    }\n\n    baseVisitor[type](node, st, c);\n\n    if (!override) {\n      callback(node, st || ancestors, ancestors, type);\n    }\n\n    if (isNew) {\n      ancestors.pop();\n    }\n  })(node, state);\n} // Find a node with a given start, end, and type (all are optional,\n// null can be used as wildcard). Returns a {node, state} object, or\n// undefined when it doesn't find a matching node.\n\n\nfunction findNodeAt(node, start, end, test, baseVisitor, state) {\n  if (!baseVisitor) {\n    baseVisitor = base;\n  }\n\n  test = makeTest(test);\n\n  try {\n    (function c(node, st, override) {\n      var type = override || node.type;\n\n      if ((start == null || node.start <= start) && (end == null || node.end >= end)) {\n        baseVisitor[type](node, st, c);\n      }\n\n      if ((start == null || node.start === start) && (end == null || node.end === end) && test(type, node)) {\n        throw new Found(node, st);\n      }\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) {\n      return e;\n    }\n\n    throw e;\n  }\n} // Find the innermost node of a given type that contains the given\n// position. Interface similar to findNodeAt.\n\n\nfunction findNodeAround(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n\n  if (!baseVisitor) {\n    baseVisitor = base;\n  }\n\n  try {\n    (function c(node, st, override) {\n      var type = override || node.type;\n\n      if (node.start > pos || node.end < pos) {\n        return;\n      }\n\n      baseVisitor[type](node, st, c);\n\n      if (test(type, node)) {\n        throw new Found(node, st);\n      }\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) {\n      return e;\n    }\n\n    throw e;\n  }\n} // Find the outermost matching node after a given position.\n\n\nfunction findNodeAfter(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n\n  if (!baseVisitor) {\n    baseVisitor = base;\n  }\n\n  try {\n    (function c(node, st, override) {\n      if (node.end < pos) {\n        return;\n      }\n\n      var type = override || node.type;\n\n      if (node.start >= pos && test(type, node)) {\n        throw new Found(node, st);\n      }\n\n      baseVisitor[type](node, st, c);\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) {\n      return e;\n    }\n\n    throw e;\n  }\n} // Find the outermost matching node before a given position.\n\n\nfunction findNodeBefore(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n\n  if (!baseVisitor) {\n    baseVisitor = base;\n  }\n\n  var max;\n\n  (function c(node, st, override) {\n    if (node.start > pos) {\n      return;\n    }\n\n    var type = override || node.type;\n\n    if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node)) {\n      max = new Found(node, st);\n    }\n\n    baseVisitor[type](node, st, c);\n  })(node, state);\n\n  return max;\n} // Fallback to an Object.create polyfill for older environments.\n\n\nvar create = Object.create || function (proto) {\n  function Ctor() {}\n\n  Ctor.prototype = proto;\n  return new Ctor();\n}; // Used to create a custom walker. Will fill in all missing node\n// type properties with the defaults.\n\n\nfunction make(funcs, baseVisitor) {\n  var visitor = create(baseVisitor || base);\n\n  for (var type in funcs) {\n    visitor[type] = funcs[type];\n  }\n\n  return visitor;\n}\n\nfunction skipThrough(node, st, c) {\n  c(node, st);\n}\n\nfunction ignore(_node, _st, _c) {} // Node walkers.\n\n\nvar base = {};\n\nbase.Program = base.BlockStatement = function (node, st, c) {\n  for (var i = 0, list = node.body; i < list.length; i += 1) {\n    var stmt = list[i];\n    c(stmt, st, \"Statement\");\n  }\n};\n\nbase.Statement = skipThrough;\nbase.EmptyStatement = ignore;\n\nbase.ExpressionStatement = base.ParenthesizedExpression = base.ChainExpression = function (node, st, c) {\n  return c(node.expression, st, \"Expression\");\n};\n\nbase.IfStatement = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.consequent, st, \"Statement\");\n\n  if (node.alternate) {\n    c(node.alternate, st, \"Statement\");\n  }\n};\n\nbase.LabeledStatement = function (node, st, c) {\n  return c(node.body, st, \"Statement\");\n};\n\nbase.BreakStatement = base.ContinueStatement = ignore;\n\nbase.WithStatement = function (node, st, c) {\n  c(node.object, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\n\nbase.SwitchStatement = function (node, st, c) {\n  c(node.discriminant, st, \"Expression\");\n\n  for (var i$1 = 0, list$1 = node.cases; i$1 < list$1.length; i$1 += 1) {\n    var cs = list$1[i$1];\n\n    if (cs.test) {\n      c(cs.test, st, \"Expression\");\n    }\n\n    for (var i = 0, list = cs.consequent; i < list.length; i += 1) {\n      var cons = list[i];\n      c(cons, st, \"Statement\");\n    }\n  }\n};\n\nbase.SwitchCase = function (node, st, c) {\n  if (node.test) {\n    c(node.test, st, \"Expression\");\n  }\n\n  for (var i = 0, list = node.consequent; i < list.length; i += 1) {\n    var cons = list[i];\n    c(cons, st, \"Statement\");\n  }\n};\n\nbase.ReturnStatement = base.YieldExpression = base.AwaitExpression = function (node, st, c) {\n  if (node.argument) {\n    c(node.argument, st, \"Expression\");\n  }\n};\n\nbase.ThrowStatement = base.SpreadElement = function (node, st, c) {\n  return c(node.argument, st, \"Expression\");\n};\n\nbase.TryStatement = function (node, st, c) {\n  c(node.block, st, \"Statement\");\n\n  if (node.handler) {\n    c(node.handler, st);\n  }\n\n  if (node.finalizer) {\n    c(node.finalizer, st, \"Statement\");\n  }\n};\n\nbase.CatchClause = function (node, st, c) {\n  if (node.param) {\n    c(node.param, st, \"Pattern\");\n  }\n\n  c(node.body, st, \"Statement\");\n};\n\nbase.WhileStatement = base.DoWhileStatement = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\n\nbase.ForStatement = function (node, st, c) {\n  if (node.init) {\n    c(node.init, st, \"ForInit\");\n  }\n\n  if (node.test) {\n    c(node.test, st, \"Expression\");\n  }\n\n  if (node.update) {\n    c(node.update, st, \"Expression\");\n  }\n\n  c(node.body, st, \"Statement\");\n};\n\nbase.ForInStatement = base.ForOfStatement = function (node, st, c) {\n  c(node.left, st, \"ForInit\");\n  c(node.right, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\n\nbase.ForInit = function (node, st, c) {\n  if (node.type === \"VariableDeclaration\") {\n    c(node, st);\n  } else {\n    c(node, st, \"Expression\");\n  }\n};\n\nbase.DebuggerStatement = ignore;\n\nbase.FunctionDeclaration = function (node, st, c) {\n  return c(node, st, \"Function\");\n};\n\nbase.VariableDeclaration = function (node, st, c) {\n  for (var i = 0, list = node.declarations; i < list.length; i += 1) {\n    var decl = list[i];\n    c(decl, st);\n  }\n};\n\nbase.VariableDeclarator = function (node, st, c) {\n  c(node.id, st, \"Pattern\");\n\n  if (node.init) {\n    c(node.init, st, \"Expression\");\n  }\n};\n\nbase.Function = function (node, st, c) {\n  if (node.id) {\n    c(node.id, st, \"Pattern\");\n  }\n\n  for (var i = 0, list = node.params; i < list.length; i += 1) {\n    var param = list[i];\n    c(param, st, \"Pattern\");\n  }\n\n  c(node.body, st, node.expression ? \"Expression\" : \"Statement\");\n};\n\nbase.Pattern = function (node, st, c) {\n  if (node.type === \"Identifier\") {\n    c(node, st, \"VariablePattern\");\n  } else if (node.type === \"MemberExpression\") {\n    c(node, st, \"MemberPattern\");\n  } else {\n    c(node, st);\n  }\n};\n\nbase.VariablePattern = ignore;\nbase.MemberPattern = skipThrough;\n\nbase.RestElement = function (node, st, c) {\n  return c(node.argument, st, \"Pattern\");\n};\n\nbase.ArrayPattern = function (node, st, c) {\n  for (var i = 0, list = node.elements; i < list.length; i += 1) {\n    var elt = list[i];\n\n    if (elt) {\n      c(elt, st, \"Pattern\");\n    }\n  }\n};\n\nbase.ObjectPattern = function (node, st, c) {\n  for (var i = 0, list = node.properties; i < list.length; i += 1) {\n    var prop = list[i];\n\n    if (prop.type === \"Property\") {\n      if (prop.computed) {\n        c(prop.key, st, \"Expression\");\n      }\n\n      c(prop.value, st, \"Pattern\");\n    } else if (prop.type === \"RestElement\") {\n      c(prop.argument, st, \"Pattern\");\n    }\n  }\n};\n\nbase.Expression = skipThrough;\nbase.ThisExpression = base.Super = base.MetaProperty = ignore;\n\nbase.ArrayExpression = function (node, st, c) {\n  for (var i = 0, list = node.elements; i < list.length; i += 1) {\n    var elt = list[i];\n\n    if (elt) {\n      c(elt, st, \"Expression\");\n    }\n  }\n};\n\nbase.ObjectExpression = function (node, st, c) {\n  for (var i = 0, list = node.properties; i < list.length; i += 1) {\n    var prop = list[i];\n    c(prop, st);\n  }\n};\n\nbase.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration;\n\nbase.SequenceExpression = function (node, st, c) {\n  for (var i = 0, list = node.expressions; i < list.length; i += 1) {\n    var expr = list[i];\n    c(expr, st, \"Expression\");\n  }\n};\n\nbase.TemplateLiteral = function (node, st, c) {\n  for (var i = 0, list = node.quasis; i < list.length; i += 1) {\n    var quasi = list[i];\n    c(quasi, st);\n  }\n\n  for (var i$1 = 0, list$1 = node.expressions; i$1 < list$1.length; i$1 += 1) {\n    var expr = list$1[i$1];\n    c(expr, st, \"Expression\");\n  }\n};\n\nbase.TemplateElement = ignore;\n\nbase.UnaryExpression = base.UpdateExpression = function (node, st, c) {\n  c(node.argument, st, \"Expression\");\n};\n\nbase.BinaryExpression = base.LogicalExpression = function (node, st, c) {\n  c(node.left, st, \"Expression\");\n  c(node.right, st, \"Expression\");\n};\n\nbase.AssignmentExpression = base.AssignmentPattern = function (node, st, c) {\n  c(node.left, st, \"Pattern\");\n  c(node.right, st, \"Expression\");\n};\n\nbase.ConditionalExpression = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.consequent, st, \"Expression\");\n  c(node.alternate, st, \"Expression\");\n};\n\nbase.NewExpression = base.CallExpression = function (node, st, c) {\n  c(node.callee, st, \"Expression\");\n\n  if (node.arguments) {\n    for (var i = 0, list = node.arguments; i < list.length; i += 1) {\n      var arg = list[i];\n      c(arg, st, \"Expression\");\n    }\n  }\n};\n\nbase.MemberExpression = function (node, st, c) {\n  c(node.object, st, \"Expression\");\n\n  if (node.computed) {\n    c(node.property, st, \"Expression\");\n  }\n};\n\nbase.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {\n  if (node.declaration) {\n    c(node.declaration, st, node.type === \"ExportNamedDeclaration\" || node.declaration.id ? \"Statement\" : \"Expression\");\n  }\n\n  if (node.source) {\n    c(node.source, st, \"Expression\");\n  }\n};\n\nbase.ExportAllDeclaration = function (node, st, c) {\n  if (node.exported) {\n    c(node.exported, st);\n  }\n\n  c(node.source, st, \"Expression\");\n};\n\nbase.ImportDeclaration = function (node, st, c) {\n  for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n    var spec = list[i];\n    c(spec, st);\n  }\n\n  c(node.source, st, \"Expression\");\n};\n\nbase.ImportExpression = function (node, st, c) {\n  c(node.source, st, \"Expression\");\n};\n\nbase.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = ignore;\n\nbase.TaggedTemplateExpression = function (node, st, c) {\n  c(node.tag, st, \"Expression\");\n  c(node.quasi, st, \"Expression\");\n};\n\nbase.ClassDeclaration = base.ClassExpression = function (node, st, c) {\n  return c(node, st, \"Class\");\n};\n\nbase.Class = function (node, st, c) {\n  if (node.id) {\n    c(node.id, st, \"Pattern\");\n  }\n\n  if (node.superClass) {\n    c(node.superClass, st, \"Expression\");\n  }\n\n  c(node.body, st);\n};\n\nbase.ClassBody = function (node, st, c) {\n  for (var i = 0, list = node.body; i < list.length; i += 1) {\n    var elt = list[i];\n    c(elt, st);\n  }\n};\n\nbase.MethodDefinition = base.Property = function (node, st, c) {\n  if (node.computed) {\n    c(node.key, st, \"Expression\");\n  }\n\n  c(node.value, st, \"Expression\");\n};\n\nexport { ancestor, base, findNodeAfter, findNodeAround, findNodeAt, findNodeBefore, full, fullAncestor, make, recursive, simple };","map":{"version":3,"names":["simple","node","visitors","baseVisitor","state","override","base","c","st","type","found","ancestor","ancestors","isNew","length","push","pop","recursive","funcs","visitor","make","undefined","makeTest","test","Found","full","callback","fullAncestor","findNodeAt","start","end","e","findNodeAround","pos","findNodeAfter","findNodeBefore","max","create","Object","proto","Ctor","prototype","skipThrough","ignore","_node","_st","_c","Program","BlockStatement","i","list","body","stmt","Statement","EmptyStatement","ExpressionStatement","ParenthesizedExpression","ChainExpression","expression","IfStatement","consequent","alternate","LabeledStatement","BreakStatement","ContinueStatement","WithStatement","object","SwitchStatement","discriminant","i$1","list$1","cases","cs","cons","SwitchCase","ReturnStatement","YieldExpression","AwaitExpression","argument","ThrowStatement","SpreadElement","TryStatement","block","handler","finalizer","CatchClause","param","WhileStatement","DoWhileStatement","ForStatement","init","update","ForInStatement","ForOfStatement","left","right","ForInit","DebuggerStatement","FunctionDeclaration","VariableDeclaration","declarations","decl","VariableDeclarator","id","Function","params","Pattern","VariablePattern","MemberPattern","RestElement","ArrayPattern","elements","elt","ObjectPattern","properties","prop","computed","key","value","Expression","ThisExpression","Super","MetaProperty","ArrayExpression","ObjectExpression","FunctionExpression","ArrowFunctionExpression","SequenceExpression","expressions","expr","TemplateLiteral","quasis","quasi","TemplateElement","UnaryExpression","UpdateExpression","BinaryExpression","LogicalExpression","AssignmentExpression","AssignmentPattern","ConditionalExpression","NewExpression","CallExpression","callee","arguments","arg","MemberExpression","property","ExportNamedDeclaration","ExportDefaultDeclaration","declaration","source","ExportAllDeclaration","exported","ImportDeclaration","specifiers","spec","ImportExpression","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","Identifier","Literal","TaggedTemplateExpression","tag","ClassDeclaration","ClassExpression","Class","superClass","ClassBody","MethodDefinition","Property"],"sources":["C:/Users/17033/balmco/node_modules/acorn-walk/dist/walk.mjs"],"sourcesContent":["// AST walker module for Mozilla Parser API compatible trees\n\n// A simple walk is one where you simply specify callbacks to be\n// called on specific nodes. The last two arguments are optional. A\n// simple use would be\n//\n//     walk.simple(myTree, {\n//         Expression: function(node) { ... }\n//     });\n//\n// to do something with all expressions. All Parser API node types\n// can be used to identify node types, as well as Expression and\n// Statement, which denote categories of nodes.\n//\n// The base argument can be used to pass a custom (recursive)\n// walker, and state can be used to give this walked an initial\n// state.\n\nfunction simple(node, visitors, baseVisitor, state, override) {\n  if (!baseVisitor) { baseVisitor = base\n  ; }(function c(node, st, override) {\n    var type = override || node.type, found = visitors[type];\n    baseVisitor[type](node, st, c);\n    if (found) { found(node, st); }\n  })(node, state, override);\n}\n\n// An ancestor walk keeps an array of ancestor nodes (including the\n// current node) and passes them to the callback as third parameter\n// (and also as state parameter when no other state is present).\nfunction ancestor(node, visitors, baseVisitor, state, override) {\n  var ancestors = [];\n  if (!baseVisitor) { baseVisitor = base\n  ; }(function c(node, st, override) {\n    var type = override || node.type, found = visitors[type];\n    var isNew = node !== ancestors[ancestors.length - 1];\n    if (isNew) { ancestors.push(node); }\n    baseVisitor[type](node, st, c);\n    if (found) { found(node, st || ancestors, ancestors); }\n    if (isNew) { ancestors.pop(); }\n  })(node, state, override);\n}\n\n// A recursive walk is one where your functions override the default\n// walkers. They can modify and replace the state parameter that's\n// threaded through the walk, and can opt how and whether to walk\n// their child nodes (by calling their third argument on these\n// nodes).\nfunction recursive(node, state, funcs, baseVisitor, override) {\n  var visitor = funcs ? make(funcs, baseVisitor || undefined) : baseVisitor\n  ;(function c(node, st, override) {\n    visitor[override || node.type](node, st, c);\n  })(node, state, override);\n}\n\nfunction makeTest(test) {\n  if (typeof test === \"string\")\n    { return function (type) { return type === test; } }\n  else if (!test)\n    { return function () { return true; } }\n  else\n    { return test }\n}\n\nvar Found = function Found(node, state) { this.node = node; this.state = state; };\n\n// A full walk triggers the callback on each node\nfunction full(node, callback, baseVisitor, state, override) {\n  if (!baseVisitor) { baseVisitor = base\n  ; }(function c(node, st, override) {\n    var type = override || node.type;\n    baseVisitor[type](node, st, c);\n    if (!override) { callback(node, st, type); }\n  })(node, state, override);\n}\n\n// An fullAncestor walk is like an ancestor walk, but triggers\n// the callback on each node\nfunction fullAncestor(node, callback, baseVisitor, state) {\n  if (!baseVisitor) { baseVisitor = base; }\n  var ancestors = []\n  ;(function c(node, st, override) {\n    var type = override || node.type;\n    var isNew = node !== ancestors[ancestors.length - 1];\n    if (isNew) { ancestors.push(node); }\n    baseVisitor[type](node, st, c);\n    if (!override) { callback(node, st || ancestors, ancestors, type); }\n    if (isNew) { ancestors.pop(); }\n  })(node, state);\n}\n\n// Find a node with a given start, end, and type (all are optional,\n// null can be used as wildcard). Returns a {node, state} object, or\n// undefined when it doesn't find a matching node.\nfunction findNodeAt(node, start, end, test, baseVisitor, state) {\n  if (!baseVisitor) { baseVisitor = base; }\n  test = makeTest(test);\n  try {\n    (function c(node, st, override) {\n      var type = override || node.type;\n      if ((start == null || node.start <= start) &&\n          (end == null || node.end >= end))\n        { baseVisitor[type](node, st, c); }\n      if ((start == null || node.start === start) &&\n          (end == null || node.end === end) &&\n          test(type, node))\n        { throw new Found(node, st) }\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) { return e }\n    throw e\n  }\n}\n\n// Find the innermost node of a given type that contains the given\n// position. Interface similar to findNodeAt.\nfunction findNodeAround(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n  if (!baseVisitor) { baseVisitor = base; }\n  try {\n    (function c(node, st, override) {\n      var type = override || node.type;\n      if (node.start > pos || node.end < pos) { return }\n      baseVisitor[type](node, st, c);\n      if (test(type, node)) { throw new Found(node, st) }\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) { return e }\n    throw e\n  }\n}\n\n// Find the outermost matching node after a given position.\nfunction findNodeAfter(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n  if (!baseVisitor) { baseVisitor = base; }\n  try {\n    (function c(node, st, override) {\n      if (node.end < pos) { return }\n      var type = override || node.type;\n      if (node.start >= pos && test(type, node)) { throw new Found(node, st) }\n      baseVisitor[type](node, st, c);\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) { return e }\n    throw e\n  }\n}\n\n// Find the outermost matching node before a given position.\nfunction findNodeBefore(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n  if (!baseVisitor) { baseVisitor = base; }\n  var max\n  ;(function c(node, st, override) {\n    if (node.start > pos) { return }\n    var type = override || node.type;\n    if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node))\n      { max = new Found(node, st); }\n    baseVisitor[type](node, st, c);\n  })(node, state);\n  return max\n}\n\n// Fallback to an Object.create polyfill for older environments.\nvar create = Object.create || function(proto) {\n  function Ctor() {}\n  Ctor.prototype = proto;\n  return new Ctor\n};\n\n// Used to create a custom walker. Will fill in all missing node\n// type properties with the defaults.\nfunction make(funcs, baseVisitor) {\n  var visitor = create(baseVisitor || base);\n  for (var type in funcs) { visitor[type] = funcs[type]; }\n  return visitor\n}\n\nfunction skipThrough(node, st, c) { c(node, st); }\nfunction ignore(_node, _st, _c) {}\n\n// Node walkers.\n\nvar base = {};\n\nbase.Program = base.BlockStatement = function (node, st, c) {\n  for (var i = 0, list = node.body; i < list.length; i += 1)\n    {\n    var stmt = list[i];\n\n    c(stmt, st, \"Statement\");\n  }\n};\nbase.Statement = skipThrough;\nbase.EmptyStatement = ignore;\nbase.ExpressionStatement = base.ParenthesizedExpression = base.ChainExpression =\n  function (node, st, c) { return c(node.expression, st, \"Expression\"); };\nbase.IfStatement = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.consequent, st, \"Statement\");\n  if (node.alternate) { c(node.alternate, st, \"Statement\"); }\n};\nbase.LabeledStatement = function (node, st, c) { return c(node.body, st, \"Statement\"); };\nbase.BreakStatement = base.ContinueStatement = ignore;\nbase.WithStatement = function (node, st, c) {\n  c(node.object, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.SwitchStatement = function (node, st, c) {\n  c(node.discriminant, st, \"Expression\");\n  for (var i$1 = 0, list$1 = node.cases; i$1 < list$1.length; i$1 += 1) {\n    var cs = list$1[i$1];\n\n    if (cs.test) { c(cs.test, st, \"Expression\"); }\n    for (var i = 0, list = cs.consequent; i < list.length; i += 1)\n      {\n      var cons = list[i];\n\n      c(cons, st, \"Statement\");\n    }\n  }\n};\nbase.SwitchCase = function (node, st, c) {\n  if (node.test) { c(node.test, st, \"Expression\"); }\n  for (var i = 0, list = node.consequent; i < list.length; i += 1)\n    {\n    var cons = list[i];\n\n    c(cons, st, \"Statement\");\n  }\n};\nbase.ReturnStatement = base.YieldExpression = base.AwaitExpression = function (node, st, c) {\n  if (node.argument) { c(node.argument, st, \"Expression\"); }\n};\nbase.ThrowStatement = base.SpreadElement =\n  function (node, st, c) { return c(node.argument, st, \"Expression\"); };\nbase.TryStatement = function (node, st, c) {\n  c(node.block, st, \"Statement\");\n  if (node.handler) { c(node.handler, st); }\n  if (node.finalizer) { c(node.finalizer, st, \"Statement\"); }\n};\nbase.CatchClause = function (node, st, c) {\n  if (node.param) { c(node.param, st, \"Pattern\"); }\n  c(node.body, st, \"Statement\");\n};\nbase.WhileStatement = base.DoWhileStatement = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.ForStatement = function (node, st, c) {\n  if (node.init) { c(node.init, st, \"ForInit\"); }\n  if (node.test) { c(node.test, st, \"Expression\"); }\n  if (node.update) { c(node.update, st, \"Expression\"); }\n  c(node.body, st, \"Statement\");\n};\nbase.ForInStatement = base.ForOfStatement = function (node, st, c) {\n  c(node.left, st, \"ForInit\");\n  c(node.right, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.ForInit = function (node, st, c) {\n  if (node.type === \"VariableDeclaration\") { c(node, st); }\n  else { c(node, st, \"Expression\"); }\n};\nbase.DebuggerStatement = ignore;\n\nbase.FunctionDeclaration = function (node, st, c) { return c(node, st, \"Function\"); };\nbase.VariableDeclaration = function (node, st, c) {\n  for (var i = 0, list = node.declarations; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    c(decl, st);\n  }\n};\nbase.VariableDeclarator = function (node, st, c) {\n  c(node.id, st, \"Pattern\");\n  if (node.init) { c(node.init, st, \"Expression\"); }\n};\n\nbase.Function = function (node, st, c) {\n  if (node.id) { c(node.id, st, \"Pattern\"); }\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    c(param, st, \"Pattern\");\n  }\n  c(node.body, st, node.expression ? \"Expression\" : \"Statement\");\n};\n\nbase.Pattern = function (node, st, c) {\n  if (node.type === \"Identifier\")\n    { c(node, st, \"VariablePattern\"); }\n  else if (node.type === \"MemberExpression\")\n    { c(node, st, \"MemberPattern\"); }\n  else\n    { c(node, st); }\n};\nbase.VariablePattern = ignore;\nbase.MemberPattern = skipThrough;\nbase.RestElement = function (node, st, c) { return c(node.argument, st, \"Pattern\"); };\nbase.ArrayPattern = function (node, st, c) {\n  for (var i = 0, list = node.elements; i < list.length; i += 1) {\n    var elt = list[i];\n\n    if (elt) { c(elt, st, \"Pattern\"); }\n  }\n};\nbase.ObjectPattern = function (node, st, c) {\n  for (var i = 0, list = node.properties; i < list.length; i += 1) {\n    var prop = list[i];\n\n    if (prop.type === \"Property\") {\n      if (prop.computed) { c(prop.key, st, \"Expression\"); }\n      c(prop.value, st, \"Pattern\");\n    } else if (prop.type === \"RestElement\") {\n      c(prop.argument, st, \"Pattern\");\n    }\n  }\n};\n\nbase.Expression = skipThrough;\nbase.ThisExpression = base.Super = base.MetaProperty = ignore;\nbase.ArrayExpression = function (node, st, c) {\n  for (var i = 0, list = node.elements; i < list.length; i += 1) {\n    var elt = list[i];\n\n    if (elt) { c(elt, st, \"Expression\"); }\n  }\n};\nbase.ObjectExpression = function (node, st, c) {\n  for (var i = 0, list = node.properties; i < list.length; i += 1)\n    {\n    var prop = list[i];\n\n    c(prop, st);\n  }\n};\nbase.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration;\nbase.SequenceExpression = function (node, st, c) {\n  for (var i = 0, list = node.expressions; i < list.length; i += 1)\n    {\n    var expr = list[i];\n\n    c(expr, st, \"Expression\");\n  }\n};\nbase.TemplateLiteral = function (node, st, c) {\n  for (var i = 0, list = node.quasis; i < list.length; i += 1)\n    {\n    var quasi = list[i];\n\n    c(quasi, st);\n  }\n\n  for (var i$1 = 0, list$1 = node.expressions; i$1 < list$1.length; i$1 += 1)\n    {\n    var expr = list$1[i$1];\n\n    c(expr, st, \"Expression\");\n  }\n};\nbase.TemplateElement = ignore;\nbase.UnaryExpression = base.UpdateExpression = function (node, st, c) {\n  c(node.argument, st, \"Expression\");\n};\nbase.BinaryExpression = base.LogicalExpression = function (node, st, c) {\n  c(node.left, st, \"Expression\");\n  c(node.right, st, \"Expression\");\n};\nbase.AssignmentExpression = base.AssignmentPattern = function (node, st, c) {\n  c(node.left, st, \"Pattern\");\n  c(node.right, st, \"Expression\");\n};\nbase.ConditionalExpression = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.consequent, st, \"Expression\");\n  c(node.alternate, st, \"Expression\");\n};\nbase.NewExpression = base.CallExpression = function (node, st, c) {\n  c(node.callee, st, \"Expression\");\n  if (node.arguments)\n    { for (var i = 0, list = node.arguments; i < list.length; i += 1)\n      {\n        var arg = list[i];\n\n        c(arg, st, \"Expression\");\n      } }\n};\nbase.MemberExpression = function (node, st, c) {\n  c(node.object, st, \"Expression\");\n  if (node.computed) { c(node.property, st, \"Expression\"); }\n};\nbase.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {\n  if (node.declaration)\n    { c(node.declaration, st, node.type === \"ExportNamedDeclaration\" || node.declaration.id ? \"Statement\" : \"Expression\"); }\n  if (node.source) { c(node.source, st, \"Expression\"); }\n};\nbase.ExportAllDeclaration = function (node, st, c) {\n  if (node.exported)\n    { c(node.exported, st); }\n  c(node.source, st, \"Expression\");\n};\nbase.ImportDeclaration = function (node, st, c) {\n  for (var i = 0, list = node.specifiers; i < list.length; i += 1)\n    {\n    var spec = list[i];\n\n    c(spec, st);\n  }\n  c(node.source, st, \"Expression\");\n};\nbase.ImportExpression = function (node, st, c) {\n  c(node.source, st, \"Expression\");\n};\nbase.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = ignore;\n\nbase.TaggedTemplateExpression = function (node, st, c) {\n  c(node.tag, st, \"Expression\");\n  c(node.quasi, st, \"Expression\");\n};\nbase.ClassDeclaration = base.ClassExpression = function (node, st, c) { return c(node, st, \"Class\"); };\nbase.Class = function (node, st, c) {\n  if (node.id) { c(node.id, st, \"Pattern\"); }\n  if (node.superClass) { c(node.superClass, st, \"Expression\"); }\n  c(node.body, st);\n};\nbase.ClassBody = function (node, st, c) {\n  for (var i = 0, list = node.body; i < list.length; i += 1)\n    {\n    var elt = list[i];\n\n    c(elt, st);\n  }\n};\nbase.MethodDefinition = base.Property = function (node, st, c) {\n  if (node.computed) { c(node.key, st, \"Expression\"); }\n  c(node.value, st, \"Expression\");\n};\n\nexport { ancestor, base, findNodeAfter, findNodeAround, findNodeAt, findNodeBefore, full, fullAncestor, make, recursive, simple };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}