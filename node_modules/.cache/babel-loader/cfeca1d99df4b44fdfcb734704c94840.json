{"ast":null,"code":"\"use strict\";\n\nconst idlUtils = require(\"../generated/utils.js\");\n\nconst {\n  setAttributeValue,\n  removeAttributeByName\n} = require(\"../attributes\");\n\nconst validateName = require(\"../helpers/validate-names\").name;\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst dataAttrRe = /^data-([^A-Z]*)$/;\n\nfunction attrCamelCase(name) {\n  return name.replace(/-([a-z])/g, (match, alpha) => alpha.toUpperCase());\n}\n\nfunction attrSnakeCase(name) {\n  return name.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`);\n}\n\nexports.implementation = class DOMStringMapImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._element = privateData.element;\n  }\n\n  get [idlUtils.supportedPropertyNames]() {\n    const result = new Set();\n    const {\n      attributes\n    } = this._element;\n\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n\n      if (matches) {\n        result.add(attrCamelCase(matches[1]));\n      }\n    }\n\n    return result;\n  }\n\n  [idlUtils.namedGet](name) {\n    const {\n      attributes\n    } = this._element;\n\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n\n      if (matches && attrCamelCase(matches[1]) === name) {\n        return attr.value;\n      }\n    }\n\n    return undefined;\n  }\n\n  [idlUtils.namedSetNew](name, value) {\n    if (/-[a-z]/.test(name)) {\n      throw DOMException.create(this._globalObject, [`'${name}' is not a valid property name`, \"SyntaxError\"]);\n    }\n\n    name = `data-${attrSnakeCase(name)}`;\n    validateName(this._globalObject, name);\n    setAttributeValue(this._element, name, value);\n  }\n\n  [idlUtils.namedSetExisting](name, value) {\n    this[idlUtils.namedSetNew](name, value);\n  }\n\n  [idlUtils.namedDelete](name) {\n    name = `data-${attrSnakeCase(name)}`;\n    removeAttributeByName(this._element, name);\n  }\n\n};","map":{"version":3,"names":["idlUtils","require","setAttributeValue","removeAttributeByName","validateName","name","DOMException","dataAttrRe","attrCamelCase","replace","match","alpha","toUpperCase","attrSnakeCase","toLowerCase","exports","implementation","DOMStringMapImpl","constructor","globalObject","args","privateData","_globalObject","_element","element","supportedPropertyNames","result","Set","attributes","i","length","attr","item","matches","exec","localName","add","namedGet","value","undefined","namedSetNew","test","create","namedSetExisting","namedDelete"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/nodes/DOMStringMap-impl.js"],"sourcesContent":["\"use strict\";\n\nconst idlUtils = require(\"../generated/utils.js\");\nconst { setAttributeValue, removeAttributeByName } = require(\"../attributes\");\nconst validateName = require(\"../helpers/validate-names\").name;\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst dataAttrRe = /^data-([^A-Z]*)$/;\n\nfunction attrCamelCase(name) {\n  return name.replace(/-([a-z])/g, (match, alpha) => alpha.toUpperCase());\n}\n\nfunction attrSnakeCase(name) {\n  return name.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`);\n}\n\nexports.implementation = class DOMStringMapImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._element = privateData.element;\n  }\n  get [idlUtils.supportedPropertyNames]() {\n    const result = new Set();\n    const { attributes } = this._element;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n      if (matches) {\n        result.add(attrCamelCase(matches[1]));\n      }\n    }\n    return result;\n  }\n  [idlUtils.namedGet](name) {\n    const { attributes } = this._element;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes.item(i);\n      const matches = dataAttrRe.exec(attr.localName);\n      if (matches && attrCamelCase(matches[1]) === name) {\n        return attr.value;\n      }\n    }\n    return undefined;\n  }\n  [idlUtils.namedSetNew](name, value) {\n    if (/-[a-z]/.test(name)) {\n      throw DOMException.create(this._globalObject, [\n        `'${name}' is not a valid property name`,\n        \"SyntaxError\"\n      ]);\n    }\n    name = `data-${attrSnakeCase(name)}`;\n    validateName(this._globalObject, name);\n    setAttributeValue(this._element, name, value);\n  }\n  [idlUtils.namedSetExisting](name, value) {\n    this[idlUtils.namedSetNew](name, value);\n  }\n  [idlUtils.namedDelete](name) {\n    name = `data-${attrSnakeCase(name)}`;\n    removeAttributeByName(this._element, name);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}