{"ast":null,"code":"\"use strict\";\n\nconst whatwgURL = require(\"whatwg-url\");\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst {\n  documentBaseURL,\n  parseURLToResultingURLRecord\n} = require(\"../helpers/document-base-url\");\n\nconst {\n  navigate\n} = require(\"./navigation\"); // Not implemented: use of entry settings object's API base URL in href setter, assign, and replace. Instead we just\n// use the document base URL. The difference matters in the case of cross-frame calls.\n\n\nexports.implementation = class LocationImpl {\n  constructor(globalObject, args, privateData) {\n    this._relevantDocument = privateData.relevantDocument;\n    this.url = null;\n    this._globalObject = globalObject;\n  }\n\n  get _url() {\n    return this._relevantDocument._URL;\n  }\n\n  _locationObjectSetterNavigate(url) {\n    // Not implemented: extra steps here to determine replacement flag.\n    return this._locationObjectNavigate(url);\n  }\n\n  _locationObjectNavigate(url) {\n    let {\n      replacement = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Not implemented: the setup for calling navigate, which doesn't apply to our stub navigate anyway.\n    navigate(this._relevantDocument._defaultView, url, {\n      replacement,\n      exceptionsEnabled: true\n    });\n  }\n\n  toString() {\n    return this.href;\n  }\n\n  get href() {\n    return whatwgURL.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const newURL = whatwgURL.parseURL(v, {\n      baseURL: documentBaseURL(this._relevantDocument)\n    });\n\n    if (newURL === null) {\n      throw new TypeError(`Could not parse \"${v}\" as a URL`);\n    }\n\n    this._locationObjectSetterNavigate(newURL);\n  }\n\n  get origin() {\n    return whatwgURL.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n\n  set protocol(v) {\n    const copyURL = { ...this._url\n    };\n    const possibleFailure = whatwgURL.basicURLParse(v + \":\", {\n      url: copyURL,\n      stateOverride: \"scheme start\"\n    });\n\n    if (possibleFailure === null) {\n      throw new TypeError(`Could not parse the URL after setting the procol to \"${v}\"`);\n    }\n\n    if (copyURL.scheme !== \"http\" && copyURL.scheme !== \"https\") {\n      return;\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return whatwgURL.serializeHost(url.host);\n    }\n\n    return whatwgURL.serializeHost(url.host) + \":\" + whatwgURL.serializeInteger(url.port);\n  }\n\n  set host(v) {\n    const copyURL = { ...this._url\n    };\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, {\n      url: copyURL,\n      stateOverride: \"host\"\n    });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    const copyURL = { ...this._url\n    };\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, {\n      url: copyURL,\n      stateOverride: \"hostname\"\n    });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    const copyURL = { ...this._url\n    };\n\n    if (copyURL.host === null || copyURL.cannotBeABaseURL || copyURL.scheme === \"file\") {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, {\n      url: copyURL,\n      stateOverride: \"port\"\n    });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get pathname() {\n    const url = this._url;\n\n    if (url.cannotBeABaseURL) {\n      return url.path[0];\n    }\n\n    return \"/\" + url.path.join(\"/\");\n  }\n\n  set pathname(v) {\n    const copyURL = { ...this._url\n    };\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    copyURL.path = [];\n    whatwgURL.basicURLParse(v, {\n      url: copyURL,\n      stateOverride: \"path start\"\n    });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return \"?\" + this._url.query;\n  }\n\n  set search(v) {\n    const copyURL = { ...this._url\n    };\n\n    if (v === \"\") {\n      copyURL.query = null;\n    } else {\n      const input = v[0] === \"?\" ? v.substring(1) : v;\n      copyURL.query = \"\";\n      whatwgURL.basicURLParse(input, {\n        url: copyURL,\n        stateOverride: \"query\",\n        encodingOverride: this._relevantDocument.charset\n      });\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return \"#\" + this._url.fragment;\n  }\n\n  set hash(v) {\n    const copyURL = { ...this._url\n    };\n\n    if (copyURL.scheme === \"javascript\") {\n      return;\n    }\n\n    if (v === \"\") {\n      copyURL.fragment = null;\n    } else {\n      const input = v[0] === \"#\" ? v.substring(1) : v;\n      copyURL.fragment = \"\";\n      whatwgURL.basicURLParse(input, {\n        url: copyURL,\n        stateOverride: \"fragment\"\n      });\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  assign(url) {\n    // Should be entry settings object; oh well\n    const parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);\n\n    if (parsedURL === null) {\n      throw DOMException.create(this._globalObject, [`Could not resolve the given string \"${url}\" relative to the base URL \"${this._relevantDocument.URL}\"`, \"SyntaxError\"]);\n    }\n\n    this._locationObjectNavigate(parsedURL);\n  }\n\n  replace(url) {\n    // Should be entry settings object; oh well\n    const parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);\n\n    if (parsedURL === null) {\n      throw DOMException.create(this._globalObject, [`Could not resolve the given string \"${url}\" relative to the base URL \"${this._relevantDocument.URL}\"`, \"SyntaxError\"]);\n    }\n\n    this._locationObjectNavigate(parsedURL, {\n      replacement: true\n    });\n  }\n\n  reload() {\n    const flags = {\n      replace: true,\n      reloadTriggered: true,\n      exceptionsEnabled: true\n    };\n    navigate(this._relevantDocument._defaultView, this._url, flags);\n  }\n\n};","map":{"version":3,"names":["whatwgURL","require","DOMException","documentBaseURL","parseURLToResultingURLRecord","navigate","exports","implementation","LocationImpl","constructor","globalObject","args","privateData","_relevantDocument","relevantDocument","url","_globalObject","_url","_URL","_locationObjectSetterNavigate","_locationObjectNavigate","replacement","_defaultView","exceptionsEnabled","toString","href","serializeURL","v","newURL","parseURL","baseURL","TypeError","origin","serializeURLOrigin","protocol","scheme","copyURL","possibleFailure","basicURLParse","stateOverride","host","port","serializeHost","serializeInteger","cannotBeABaseURL","hostname","pathname","path","join","search","query","input","substring","encodingOverride","charset","hash","fragment","assign","parsedURL","create","URL","replace","reload","flags","reloadTriggered"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/window/Location-impl.js"],"sourcesContent":["\"use strict\";\nconst whatwgURL = require(\"whatwg-url\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\nconst { documentBaseURL, parseURLToResultingURLRecord } = require(\"../helpers/document-base-url\");\nconst { navigate } = require(\"./navigation\");\n\n// Not implemented: use of entry settings object's API base URL in href setter, assign, and replace. Instead we just\n// use the document base URL. The difference matters in the case of cross-frame calls.\n\nexports.implementation = class LocationImpl {\n  constructor(globalObject, args, privateData) {\n    this._relevantDocument = privateData.relevantDocument;\n    this.url = null;\n\n    this._globalObject = globalObject;\n  }\n\n  get _url() {\n    return this._relevantDocument._URL;\n  }\n\n  _locationObjectSetterNavigate(url) {\n    // Not implemented: extra steps here to determine replacement flag.\n\n    return this._locationObjectNavigate(url);\n  }\n\n  _locationObjectNavigate(url, { replacement = false } = {}) {\n    // Not implemented: the setup for calling navigate, which doesn't apply to our stub navigate anyway.\n\n    navigate(this._relevantDocument._defaultView, url, { replacement, exceptionsEnabled: true });\n  }\n\n  toString() {\n    return this.href;\n  }\n\n  get href() {\n    return whatwgURL.serializeURL(this._url);\n  }\n  set href(v) {\n    const newURL = whatwgURL.parseURL(v, { baseURL: documentBaseURL(this._relevantDocument) });\n    if (newURL === null) {\n      throw new TypeError(`Could not parse \"${v}\" as a URL`);\n    }\n\n    this._locationObjectSetterNavigate(newURL);\n  }\n\n  get origin() {\n    return whatwgURL.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n  set protocol(v) {\n    const copyURL = { ...this._url };\n\n    const possibleFailure = whatwgURL.basicURLParse(v + \":\", { url: copyURL, stateOverride: \"scheme start\" });\n    if (possibleFailure === null) {\n      throw new TypeError(`Could not parse the URL after setting the procol to \"${v}\"`);\n    }\n\n    if (copyURL.scheme !== \"http\" && copyURL.scheme !== \"https\") {\n      return;\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n    if (url.port === null) {\n      return whatwgURL.serializeHost(url.host);\n    }\n\n    return whatwgURL.serializeHost(url.host) + \":\" + whatwgURL.serializeInteger(url.port);\n  }\n  set host(v) {\n    const copyURL = { ...this._url };\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, { url: copyURL, stateOverride: \"host\" });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeHost(this._url.host);\n  }\n  set hostname(v) {\n    const copyURL = { ...this._url };\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, { url: copyURL, stateOverride: \"hostname\" });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return whatwgURL.serializeInteger(this._url.port);\n  }\n  set port(v) {\n    const copyURL = { ...this._url };\n\n    if (copyURL.host === null || copyURL.cannotBeABaseURL || copyURL.scheme === \"file\") {\n      return;\n    }\n\n    whatwgURL.basicURLParse(v, { url: copyURL, stateOverride: \"port\" });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get pathname() {\n    const url = this._url;\n\n    if (url.cannotBeABaseURL) {\n      return url.path[0];\n    }\n\n    return \"/\" + url.path.join(\"/\");\n  }\n  set pathname(v) {\n    const copyURL = { ...this._url };\n\n    if (copyURL.cannotBeABaseURL) {\n      return;\n    }\n\n    copyURL.path = [];\n    whatwgURL.basicURLParse(v, { url: copyURL, stateOverride: \"path start\" });\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return \"?\" + this._url.query;\n  }\n  set search(v) {\n    const copyURL = { ...this._url };\n\n    if (v === \"\") {\n      copyURL.query = null;\n    } else {\n      const input = v[0] === \"?\" ? v.substring(1) : v;\n      copyURL.query = \"\";\n      whatwgURL.basicURLParse(input, {\n        url: copyURL,\n        stateOverride: \"query\",\n        encodingOverride: this._relevantDocument.charset\n      });\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return \"#\" + this._url.fragment;\n  }\n  set hash(v) {\n    const copyURL = { ...this._url };\n\n    if (copyURL.scheme === \"javascript\") {\n      return;\n    }\n\n    if (v === \"\") {\n      copyURL.fragment = null;\n    } else {\n      const input = v[0] === \"#\" ? v.substring(1) : v;\n      copyURL.fragment = \"\";\n      whatwgURL.basicURLParse(input, { url: copyURL, stateOverride: \"fragment\" });\n    }\n\n    this._locationObjectSetterNavigate(copyURL);\n  }\n\n  assign(url) {\n    // Should be entry settings object; oh well\n    const parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);\n\n    if (parsedURL === null) {\n      throw DOMException.create(this._globalObject, [\n        `Could not resolve the given string \"${url}\" relative to the base URL \"${this._relevantDocument.URL}\"`,\n        \"SyntaxError\"\n      ]);\n    }\n\n    this._locationObjectNavigate(parsedURL);\n  }\n\n  replace(url) {\n    // Should be entry settings object; oh well\n    const parsedURL = parseURLToResultingURLRecord(url, this._relevantDocument);\n\n    if (parsedURL === null) {\n      throw DOMException.create(this._globalObject, [\n        `Could not resolve the given string \"${url}\" relative to the base URL \"${this._relevantDocument.URL}\"`,\n        \"SyntaxError\"\n      ]);\n    }\n\n    this._locationObjectNavigate(parsedURL, { replacement: true });\n  }\n\n  reload() {\n    const flags = { replace: true, reloadTriggered: true, exceptionsEnabled: true };\n    navigate(this._relevantDocument._defaultView, this._url, flags);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}