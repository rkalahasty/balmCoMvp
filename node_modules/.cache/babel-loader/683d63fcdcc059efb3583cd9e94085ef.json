{"ast":null,"code":"\"use strict\";\n\nconst vm = require(\"vm\");\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst MIMEType = require(\"whatwg-mimetype\");\n\nconst {\n  serializeURL\n} = require(\"whatwg-url\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst reportException = require(\"../helpers/runtime-script-errors\");\n\nconst {\n  domSymbolTree,\n  cloningSteps\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  asciiLowercase\n} = require(\"../helpers/strings\");\n\nconst {\n  childTextContent\n} = require(\"../helpers/text\");\n\nconst {\n  fireAnEvent\n} = require(\"../helpers/events\");\n\nconst {\n  parseURLToResultingURLRecord\n} = require(\"../helpers/document-base-url\");\n\nconst nodeTypes = require(\"../node-type\");\n\nconst jsMIMETypes = new Set([\"application/ecmascript\", \"application/javascript\", \"application/x-ecmascript\", \"application/x-javascript\", \"text/ecmascript\", \"text/javascript\", \"text/javascript1.0\", \"text/javascript1.1\", \"text/javascript1.2\", \"text/javascript1.3\", \"text/javascript1.4\", \"text/javascript1.5\", \"text/jscript\", \"text/livescript\", \"text/x-ecmascript\", \"text/x-javascript\"]);\n\nclass HTMLScriptElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._alreadyStarted = false;\n    this._parserInserted = false; // set by the parser\n  }\n\n  _attach() {\n    super._attach(); // In our current terribly-hacky document.write() implementation, we parse in a div them move elements into the main\n    // document. Thus _eval() will bail early when it gets in _poppedOffStackOfOpenElements(), since we're not attached\n    // then. Instead, we'll let it eval here.\n\n\n    if (!this._parserInserted || this._isMovingDueToDocumentWrite) {\n      this._eval();\n    }\n  }\n\n  _canRunScript() {\n    const document = this._ownerDocument; // Equivalent to the spec's \"scripting is disabled\" check.\n\n    if (!document._defaultView || document._defaultView._runScripts !== \"dangerously\" || document._scriptingDisabled) {\n      return false;\n    }\n\n    return true;\n  }\n\n  _fetchExternalScript() {\n    const document = this._ownerDocument;\n    const resourceLoader = document._resourceLoader;\n\n    const defaultEncoding = whatwgEncoding.labelToName(this.getAttributeNS(null, \"charset\")) || document._encoding;\n\n    let request;\n\n    if (!this._canRunScript()) {\n      return;\n    }\n\n    const src = this.getAttributeNS(null, \"src\");\n    const url = parseURLToResultingURLRecord(src, this._ownerDocument);\n\n    if (url === null) {\n      return;\n    }\n\n    const urlString = serializeURL(url);\n\n    const onLoadExternalScript = data => {\n      const {\n        response\n      } = request;\n      let contentType;\n\n      if (response && response.statusCode !== undefined && response.statusCode >= 400) {\n        throw new Error(\"Status code: \" + response.statusCode);\n      }\n\n      if (response) {\n        contentType = MIMEType.parse(response.headers[\"content-type\"]) || new MIMEType(\"text/plain\");\n      }\n\n      const encoding = whatwgEncoding.getBOMEncoding(data) || contentType && whatwgEncoding.labelToName(contentType.parameters.get(\"charset\")) || defaultEncoding;\n      const script = whatwgEncoding.decode(data, encoding);\n\n      this._innerEval(script, urlString);\n    };\n\n    request = resourceLoader.fetch(urlString, {\n      element: this,\n      onLoad: onLoadExternalScript\n    });\n  }\n\n  _fetchInternalScript() {\n    const document = this._ownerDocument;\n\n    if (!this._canRunScript()) {\n      return;\n    }\n\n    document._queue.push(null, () => {\n      this._innerEval(this.text, document.URL);\n\n      fireAnEvent(\"load\", this);\n    }, null, false, this);\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (this._attached && !this._startedEval && name === \"src\" && oldValue === null && value !== null) {\n      this._fetchExternalScript();\n    }\n  }\n\n  _poppedOffStackOfOpenElements() {\n    // This seems to roughly correspond to\n    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-incdata:prepare-a-script, although we certainly\n    // don't implement the full semantics.\n    this._eval();\n  } // Vaguely similar to https://html.spec.whatwg.org/multipage/scripting.html#prepare-a-script, but we have a long way\n  // to go before it's aligned.\n\n\n  _eval() {\n    if (this._alreadyStarted) {\n      return;\n    } // TODO: this text check doesn't seem completely the same as the spec, which e.g. will try to execute scripts with\n    // child element nodes. Spec bug? https://github.com/whatwg/html/issues/3419\n\n\n    if (!this.hasAttributeNS(null, \"src\") && this.text.length === 0) {\n      return;\n    }\n\n    if (!this._attached) {\n      return;\n    }\n\n    const scriptBlocksTypeString = this._getTypeString();\n\n    const type = getType(scriptBlocksTypeString);\n\n    if (type !== \"classic\") {\n      // TODO: implement modules, and then change the check to `type === null`.\n      return;\n    }\n\n    this._alreadyStarted = true; // TODO: implement nomodule here, **but only after we support modules**.\n    // At this point we completely depart from the spec.\n\n    if (this.hasAttributeNS(null, \"src\")) {\n      this._fetchExternalScript();\n    } else {\n      this._fetchInternalScript();\n    }\n  }\n\n  _innerEval(text, filename) {\n    this._ownerDocument._writeAfterElement = this;\n    processJavaScript(this, text, filename);\n    delete this._ownerDocument._writeAfterElement;\n  }\n\n  _getTypeString() {\n    const typeAttr = this.getAttributeNS(null, \"type\");\n    const langAttr = this.getAttributeNS(null, \"language\");\n\n    if (typeAttr === \"\") {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr === null && langAttr === \"\") {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr === null && langAttr === null) {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr !== null) {\n      return typeAttr.trim();\n    }\n\n    if (langAttr !== null) {\n      return \"text/\" + langAttr;\n    }\n\n    return null;\n  }\n\n  get text() {\n    return childTextContent(this);\n  }\n\n  set text(text) {\n    this.textContent = text;\n  } // https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\n\n\n  [cloningSteps](copy, node) {\n    copy._alreadyStarted = node._alreadyStarted;\n  }\n\n}\n\nfunction processJavaScript(element, code, filename) {\n  const document = element.ownerDocument;\n  const window = document && document._global;\n\n  if (window) {\n    document._currentScript = element;\n    let lineOffset = 0;\n\n    if (!element.hasAttributeNS(null, \"src\")) {\n      for (const child of domSymbolTree.childrenIterator(element)) {\n        if (child.nodeType === nodeTypes.TEXT_NODE) {\n          if (child.sourceCodeLocation) {\n            lineOffset = child.sourceCodeLocation.startLine - 1;\n          }\n\n          break;\n        }\n      }\n    }\n\n    try {\n      vm.runInContext(code, window, {\n        filename,\n        lineOffset,\n        displayErrors: false\n      });\n    } catch (e) {\n      reportException(window, e, filename);\n    } finally {\n      document._currentScript = null;\n    }\n  }\n}\n\nfunction getType(typeString) {\n  const lowercased = asciiLowercase(typeString); // Cannot use whatwg-mimetype parsing because that strips whitespace. The spec demands a strict string comparison.\n  // That is, the type=\"\" attribute is not really related to MIME types at all.\n\n  if (jsMIMETypes.has(lowercased)) {\n    return \"classic\";\n  }\n\n  if (lowercased === \"module\") {\n    return \"module\";\n  }\n\n  return null;\n}\n\nmodule.exports = {\n  implementation: HTMLScriptElementImpl\n};","map":{"version":3,"names":["vm","require","whatwgEncoding","MIMEType","serializeURL","HTMLElementImpl","implementation","reportException","domSymbolTree","cloningSteps","asciiLowercase","childTextContent","fireAnEvent","parseURLToResultingURLRecord","nodeTypes","jsMIMETypes","Set","HTMLScriptElementImpl","constructor","globalObject","args","privateData","_alreadyStarted","_parserInserted","_attach","_isMovingDueToDocumentWrite","_eval","_canRunScript","document","_ownerDocument","_defaultView","_runScripts","_scriptingDisabled","_fetchExternalScript","resourceLoader","_resourceLoader","defaultEncoding","labelToName","getAttributeNS","_encoding","request","src","url","urlString","onLoadExternalScript","data","response","contentType","statusCode","undefined","Error","parse","headers","encoding","getBOMEncoding","parameters","get","script","decode","_innerEval","fetch","element","onLoad","_fetchInternalScript","_queue","push","text","URL","_attrModified","name","value","oldValue","_attached","_startedEval","_poppedOffStackOfOpenElements","hasAttributeNS","length","scriptBlocksTypeString","_getTypeString","type","getType","filename","_writeAfterElement","processJavaScript","typeAttr","langAttr","trim","textContent","copy","node","code","ownerDocument","window","_global","_currentScript","lineOffset","child","childrenIterator","nodeType","TEXT_NODE","sourceCodeLocation","startLine","runInContext","displayErrors","e","typeString","lowercased","has","module","exports"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/nodes/HTMLScriptElement-impl.js"],"sourcesContent":["\"use strict\";\nconst vm = require(\"vm\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst { serializeURL } = require(\"whatwg-url\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst reportException = require(\"../helpers/runtime-script-errors\");\nconst { domSymbolTree, cloningSteps } = require(\"../helpers/internal-constants\");\nconst { asciiLowercase } = require(\"../helpers/strings\");\nconst { childTextContent } = require(\"../helpers/text\");\nconst { fireAnEvent } = require(\"../helpers/events\");\nconst { parseURLToResultingURLRecord } = require(\"../helpers/document-base-url\");\nconst nodeTypes = require(\"../node-type\");\n\nconst jsMIMETypes = new Set([\n  \"application/ecmascript\",\n  \"application/javascript\",\n  \"application/x-ecmascript\",\n  \"application/x-javascript\",\n  \"text/ecmascript\",\n  \"text/javascript\",\n  \"text/javascript1.0\",\n  \"text/javascript1.1\",\n  \"text/javascript1.2\",\n  \"text/javascript1.3\",\n  \"text/javascript1.4\",\n  \"text/javascript1.5\",\n  \"text/jscript\",\n  \"text/livescript\",\n  \"text/x-ecmascript\",\n  \"text/x-javascript\"\n]);\n\nclass HTMLScriptElementImpl extends HTMLElementImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    this._alreadyStarted = false;\n    this._parserInserted = false; // set by the parser\n  }\n\n  _attach() {\n    super._attach();\n\n\n    // In our current terribly-hacky document.write() implementation, we parse in a div them move elements into the main\n    // document. Thus _eval() will bail early when it gets in _poppedOffStackOfOpenElements(), since we're not attached\n    // then. Instead, we'll let it eval here.\n    if (!this._parserInserted || this._isMovingDueToDocumentWrite) {\n      this._eval();\n    }\n  }\n\n  _canRunScript() {\n    const document = this._ownerDocument;\n    // Equivalent to the spec's \"scripting is disabled\" check.\n    if (!document._defaultView || document._defaultView._runScripts !== \"dangerously\" || document._scriptingDisabled) {\n      return false;\n    }\n\n    return true;\n  }\n\n  _fetchExternalScript() {\n    const document = this._ownerDocument;\n    const resourceLoader = document._resourceLoader;\n    const defaultEncoding = whatwgEncoding.labelToName(this.getAttributeNS(null, \"charset\")) || document._encoding;\n    let request;\n\n    if (!this._canRunScript()) {\n      return;\n    }\n\n    const src = this.getAttributeNS(null, \"src\");\n    const url = parseURLToResultingURLRecord(src, this._ownerDocument);\n    if (url === null) {\n      return;\n    }\n    const urlString = serializeURL(url);\n\n    const onLoadExternalScript = data => {\n      const { response } = request;\n      let contentType;\n\n      if (response && response.statusCode !== undefined && response.statusCode >= 400) {\n        throw new Error(\"Status code: \" + response.statusCode);\n      }\n\n      if (response) {\n        contentType = MIMEType.parse(response.headers[\"content-type\"]) || new MIMEType(\"text/plain\");\n      }\n\n      const encoding = whatwgEncoding.getBOMEncoding(data) ||\n        (contentType && whatwgEncoding.labelToName(contentType.parameters.get(\"charset\"))) ||\n        defaultEncoding;\n      const script = whatwgEncoding.decode(data, encoding);\n\n      this._innerEval(script, urlString);\n    };\n\n    request = resourceLoader.fetch(urlString, {\n      element: this,\n      onLoad: onLoadExternalScript\n    });\n  }\n\n  _fetchInternalScript() {\n    const document = this._ownerDocument;\n\n    if (!this._canRunScript()) {\n      return;\n    }\n\n    document._queue.push(null, () => {\n      this._innerEval(this.text, document.URL);\n\n      fireAnEvent(\"load\", this);\n    }, null, false, this);\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (this._attached && !this._startedEval && name === \"src\" && oldValue === null && value !== null) {\n      this._fetchExternalScript();\n    }\n  }\n\n  _poppedOffStackOfOpenElements() {\n    // This seems to roughly correspond to\n    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-incdata:prepare-a-script, although we certainly\n    // don't implement the full semantics.\n    this._eval();\n  }\n\n  // Vaguely similar to https://html.spec.whatwg.org/multipage/scripting.html#prepare-a-script, but we have a long way\n  // to go before it's aligned.\n  _eval() {\n    if (this._alreadyStarted) {\n      return;\n    }\n\n    // TODO: this text check doesn't seem completely the same as the spec, which e.g. will try to execute scripts with\n    // child element nodes. Spec bug? https://github.com/whatwg/html/issues/3419\n    if (!this.hasAttributeNS(null, \"src\") && this.text.length === 0) {\n      return;\n    }\n\n    if (!this._attached) {\n      return;\n    }\n\n    const scriptBlocksTypeString = this._getTypeString();\n    const type = getType(scriptBlocksTypeString);\n\n    if (type !== \"classic\") {\n      // TODO: implement modules, and then change the check to `type === null`.\n      return;\n    }\n\n    this._alreadyStarted = true;\n\n    // TODO: implement nomodule here, **but only after we support modules**.\n\n    // At this point we completely depart from the spec.\n\n    if (this.hasAttributeNS(null, \"src\")) {\n      this._fetchExternalScript();\n    } else {\n      this._fetchInternalScript();\n    }\n  }\n\n  _innerEval(text, filename) {\n    this._ownerDocument._writeAfterElement = this;\n    processJavaScript(this, text, filename);\n    delete this._ownerDocument._writeAfterElement;\n  }\n\n  _getTypeString() {\n    const typeAttr = this.getAttributeNS(null, \"type\");\n    const langAttr = this.getAttributeNS(null, \"language\");\n\n    if (typeAttr === \"\") {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr === null && langAttr === \"\") {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr === null && langAttr === null) {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr !== null) {\n      return typeAttr.trim();\n    }\n\n    if (langAttr !== null) {\n      return \"text/\" + langAttr;\n    }\n\n    return null;\n  }\n\n  get text() {\n    return childTextContent(this);\n  }\n\n  set text(text) {\n    this.textContent = text;\n  }\n\n  // https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\n  [cloningSteps](copy, node) {\n    copy._alreadyStarted = node._alreadyStarted;\n  }\n}\n\nfunction processJavaScript(element, code, filename) {\n  const document = element.ownerDocument;\n  const window = document && document._global;\n\n  if (window) {\n    document._currentScript = element;\n\n    let lineOffset = 0;\n    if (!element.hasAttributeNS(null, \"src\")) {\n      for (const child of domSymbolTree.childrenIterator(element)) {\n        if (child.nodeType === nodeTypes.TEXT_NODE) {\n          if (child.sourceCodeLocation) {\n            lineOffset = child.sourceCodeLocation.startLine - 1;\n          }\n          break;\n        }\n      }\n    }\n\n    try {\n      vm.runInContext(code, window, { filename, lineOffset, displayErrors: false });\n    } catch (e) {\n      reportException(window, e, filename);\n    } finally {\n      document._currentScript = null;\n    }\n  }\n}\n\nfunction getType(typeString) {\n  const lowercased = asciiLowercase(typeString);\n  // Cannot use whatwg-mimetype parsing because that strips whitespace. The spec demands a strict string comparison.\n  // That is, the type=\"\" attribute is not really related to MIME types at all.\n  if (jsMIMETypes.has(lowercased)) {\n    return \"classic\";\n  }\n  if (lowercased === \"module\") {\n    return \"module\";\n  }\n  return null;\n}\n\nmodule.exports = {\n  implementation: HTMLScriptElementImpl\n};\n"],"mappings":"AAAA;;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,iBAAD,CAA9B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAM;EAAEG;AAAF,IAAmBH,OAAO,CAAC,YAAD,CAAhC;;AAEA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,oBAAD,CAAP,CAA8BK,cAAtD;;AACA,MAAMC,eAAe,GAAGN,OAAO,CAAC,kCAAD,CAA/B;;AACA,MAAM;EAAEO,aAAF;EAAiBC;AAAjB,IAAkCR,OAAO,CAAC,+BAAD,CAA/C;;AACA,MAAM;EAAES;AAAF,IAAqBT,OAAO,CAAC,oBAAD,CAAlC;;AACA,MAAM;EAAEU;AAAF,IAAuBV,OAAO,CAAC,iBAAD,CAApC;;AACA,MAAM;EAAEW;AAAF,IAAkBX,OAAO,CAAC,mBAAD,CAA/B;;AACA,MAAM;EAAEY;AAAF,IAAmCZ,OAAO,CAAC,8BAAD,CAAhD;;AACA,MAAMa,SAAS,GAAGb,OAAO,CAAC,cAAD,CAAzB;;AAEA,MAAMc,WAAW,GAAG,IAAIC,GAAJ,CAAQ,CAC1B,wBAD0B,EAE1B,wBAF0B,EAG1B,0BAH0B,EAI1B,0BAJ0B,EAK1B,iBAL0B,EAM1B,iBAN0B,EAO1B,oBAP0B,EAQ1B,oBAR0B,EAS1B,oBAT0B,EAU1B,oBAV0B,EAW1B,oBAX0B,EAY1B,oBAZ0B,EAa1B,cAb0B,EAc1B,iBAd0B,EAe1B,mBAf0B,EAgB1B,mBAhB0B,CAAR,CAApB;;AAmBA,MAAMC,qBAAN,SAAoCZ,eAApC,CAAoD;EAClDa,WAAW,CAACC,YAAD,EAAeC,IAAf,EAAqBC,WAArB,EAAkC;IAC3C,MAAMF,YAAN,EAAoBC,IAApB,EAA0BC,WAA1B;IACA,KAAKC,eAAL,GAAuB,KAAvB;IACA,KAAKC,eAAL,GAAuB,KAAvB,CAH2C,CAGb;EAC/B;;EAEDC,OAAO,GAAG;IACR,MAAMA,OAAN,GADQ,CAIR;IACA;IACA;;;IACA,IAAI,CAAC,KAAKD,eAAN,IAAyB,KAAKE,2BAAlC,EAA+D;MAC7D,KAAKC,KAAL;IACD;EACF;;EAEDC,aAAa,GAAG;IACd,MAAMC,QAAQ,GAAG,KAAKC,cAAtB,CADc,CAEd;;IACA,IAAI,CAACD,QAAQ,CAACE,YAAV,IAA0BF,QAAQ,CAACE,YAAT,CAAsBC,WAAtB,KAAsC,aAAhE,IAAiFH,QAAQ,CAACI,kBAA9F,EAAkH;MAChH,OAAO,KAAP;IACD;;IAED,OAAO,IAAP;EACD;;EAEDC,oBAAoB,GAAG;IACrB,MAAML,QAAQ,GAAG,KAAKC,cAAtB;IACA,MAAMK,cAAc,GAAGN,QAAQ,CAACO,eAAhC;;IACA,MAAMC,eAAe,GAAGlC,cAAc,CAACmC,WAAf,CAA2B,KAAKC,cAAL,CAAoB,IAApB,EAA0B,SAA1B,CAA3B,KAAoEV,QAAQ,CAACW,SAArG;;IACA,IAAIC,OAAJ;;IAEA,IAAI,CAAC,KAAKb,aAAL,EAAL,EAA2B;MACzB;IACD;;IAED,MAAMc,GAAG,GAAG,KAAKH,cAAL,CAAoB,IAApB,EAA0B,KAA1B,CAAZ;IACA,MAAMI,GAAG,GAAG7B,4BAA4B,CAAC4B,GAAD,EAAM,KAAKZ,cAAX,CAAxC;;IACA,IAAIa,GAAG,KAAK,IAAZ,EAAkB;MAChB;IACD;;IACD,MAAMC,SAAS,GAAGvC,YAAY,CAACsC,GAAD,CAA9B;;IAEA,MAAME,oBAAoB,GAAGC,IAAI,IAAI;MACnC,MAAM;QAAEC;MAAF,IAAeN,OAArB;MACA,IAAIO,WAAJ;;MAEA,IAAID,QAAQ,IAAIA,QAAQ,CAACE,UAAT,KAAwBC,SAApC,IAAiDH,QAAQ,CAACE,UAAT,IAAuB,GAA5E,EAAiF;QAC/E,MAAM,IAAIE,KAAJ,CAAU,kBAAkBJ,QAAQ,CAACE,UAArC,CAAN;MACD;;MAED,IAAIF,QAAJ,EAAc;QACZC,WAAW,GAAG5C,QAAQ,CAACgD,KAAT,CAAeL,QAAQ,CAACM,OAAT,CAAiB,cAAjB,CAAf,KAAoD,IAAIjD,QAAJ,CAAa,YAAb,CAAlE;MACD;;MAED,MAAMkD,QAAQ,GAAGnD,cAAc,CAACoD,cAAf,CAA8BT,IAA9B,KACdE,WAAW,IAAI7C,cAAc,CAACmC,WAAf,CAA2BU,WAAW,CAACQ,UAAZ,CAAuBC,GAAvB,CAA2B,SAA3B,CAA3B,CADD,IAEfpB,eAFF;MAGA,MAAMqB,MAAM,GAAGvD,cAAc,CAACwD,MAAf,CAAsBb,IAAtB,EAA4BQ,QAA5B,CAAf;;MAEA,KAAKM,UAAL,CAAgBF,MAAhB,EAAwBd,SAAxB;IACD,CAlBD;;IAoBAH,OAAO,GAAGN,cAAc,CAAC0B,KAAf,CAAqBjB,SAArB,EAAgC;MACxCkB,OAAO,EAAE,IAD+B;MAExCC,MAAM,EAAElB;IAFgC,CAAhC,CAAV;EAID;;EAEDmB,oBAAoB,GAAG;IACrB,MAAMnC,QAAQ,GAAG,KAAKC,cAAtB;;IAEA,IAAI,CAAC,KAAKF,aAAL,EAAL,EAA2B;MACzB;IACD;;IAEDC,QAAQ,CAACoC,MAAT,CAAgBC,IAAhB,CAAqB,IAArB,EAA2B,MAAM;MAC/B,KAAKN,UAAL,CAAgB,KAAKO,IAArB,EAA2BtC,QAAQ,CAACuC,GAApC;;MAEAvD,WAAW,CAAC,MAAD,EAAS,IAAT,CAAX;IACD,CAJD,EAIG,IAJH,EAIS,KAJT,EAIgB,IAJhB;EAKD;;EAEDwD,aAAa,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,EAAwB;IACnC,MAAMH,aAAN,CAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,QAAjC;;IAEA,IAAI,KAAKC,SAAL,IAAkB,CAAC,KAAKC,YAAxB,IAAwCJ,IAAI,KAAK,KAAjD,IAA0DE,QAAQ,KAAK,IAAvE,IAA+ED,KAAK,KAAK,IAA7F,EAAmG;MACjG,KAAKrC,oBAAL;IACD;EACF;;EAEDyC,6BAA6B,GAAG;IAC9B;IACA;IACA;IACA,KAAKhD,KAAL;EACD,CAnGiD,CAqGlD;EACA;;;EACAA,KAAK,GAAG;IACN,IAAI,KAAKJ,eAAT,EAA0B;MACxB;IACD,CAHK,CAKN;IACA;;;IACA,IAAI,CAAC,KAAKqD,cAAL,CAAoB,IAApB,EAA0B,KAA1B,CAAD,IAAqC,KAAKT,IAAL,CAAUU,MAAV,KAAqB,CAA9D,EAAiE;MAC/D;IACD;;IAED,IAAI,CAAC,KAAKJ,SAAV,EAAqB;MACnB;IACD;;IAED,MAAMK,sBAAsB,GAAG,KAAKC,cAAL,EAA/B;;IACA,MAAMC,IAAI,GAAGC,OAAO,CAACH,sBAAD,CAApB;;IAEA,IAAIE,IAAI,KAAK,SAAb,EAAwB;MACtB;MACA;IACD;;IAED,KAAKzD,eAAL,GAAuB,IAAvB,CAvBM,CAyBN;IAEA;;IAEA,IAAI,KAAKqD,cAAL,CAAoB,IAApB,EAA0B,KAA1B,CAAJ,EAAsC;MACpC,KAAK1C,oBAAL;IACD,CAFD,MAEO;MACL,KAAK8B,oBAAL;IACD;EACF;;EAEDJ,UAAU,CAACO,IAAD,EAAOe,QAAP,EAAiB;IACzB,KAAKpD,cAAL,CAAoBqD,kBAApB,GAAyC,IAAzC;IACAC,iBAAiB,CAAC,IAAD,EAAOjB,IAAP,EAAae,QAAb,CAAjB;IACA,OAAO,KAAKpD,cAAL,CAAoBqD,kBAA3B;EACD;;EAEDJ,cAAc,GAAG;IACf,MAAMM,QAAQ,GAAG,KAAK9C,cAAL,CAAoB,IAApB,EAA0B,MAA1B,CAAjB;IACA,MAAM+C,QAAQ,GAAG,KAAK/C,cAAL,CAAoB,IAApB,EAA0B,UAA1B,CAAjB;;IAEA,IAAI8C,QAAQ,KAAK,EAAjB,EAAqB;MACnB,OAAO,iBAAP;IACD;;IAED,IAAIA,QAAQ,KAAK,IAAb,IAAqBC,QAAQ,KAAK,EAAtC,EAA0C;MACxC,OAAO,iBAAP;IACD;;IAED,IAAID,QAAQ,KAAK,IAAb,IAAqBC,QAAQ,KAAK,IAAtC,EAA4C;MAC1C,OAAO,iBAAP;IACD;;IAED,IAAID,QAAQ,KAAK,IAAjB,EAAuB;MACrB,OAAOA,QAAQ,CAACE,IAAT,EAAP;IACD;;IAED,IAAID,QAAQ,KAAK,IAAjB,EAAuB;MACrB,OAAO,UAAUA,QAAjB;IACD;;IAED,OAAO,IAAP;EACD;;EAEO,IAAJnB,IAAI,GAAG;IACT,OAAOvD,gBAAgB,CAAC,IAAD,CAAvB;EACD;;EAEO,IAAJuD,IAAI,CAACA,IAAD,EAAO;IACb,KAAKqB,WAAL,GAAmBrB,IAAnB;EACD,CAlLiD,CAoLlD;;;EACa,CAAZzD,YAAY,EAAE+E,IAAF,EAAQC,IAAR,EAAc;IACzBD,IAAI,CAAClE,eAAL,GAAuBmE,IAAI,CAACnE,eAA5B;EACD;;AAvLiD;;AA0LpD,SAAS6D,iBAAT,CAA2BtB,OAA3B,EAAoC6B,IAApC,EAA0CT,QAA1C,EAAoD;EAClD,MAAMrD,QAAQ,GAAGiC,OAAO,CAAC8B,aAAzB;EACA,MAAMC,MAAM,GAAGhE,QAAQ,IAAIA,QAAQ,CAACiE,OAApC;;EAEA,IAAID,MAAJ,EAAY;IACVhE,QAAQ,CAACkE,cAAT,GAA0BjC,OAA1B;IAEA,IAAIkC,UAAU,GAAG,CAAjB;;IACA,IAAI,CAAClC,OAAO,CAACc,cAAR,CAAuB,IAAvB,EAA6B,KAA7B,CAAL,EAA0C;MACxC,KAAK,MAAMqB,KAAX,IAAoBxF,aAAa,CAACyF,gBAAd,CAA+BpC,OAA/B,CAApB,EAA6D;QAC3D,IAAImC,KAAK,CAACE,QAAN,KAAmBpF,SAAS,CAACqF,SAAjC,EAA4C;UAC1C,IAAIH,KAAK,CAACI,kBAAV,EAA8B;YAC5BL,UAAU,GAAGC,KAAK,CAACI,kBAAN,CAAyBC,SAAzB,GAAqC,CAAlD;UACD;;UACD;QACD;MACF;IACF;;IAED,IAAI;MACFrG,EAAE,CAACsG,YAAH,CAAgBZ,IAAhB,EAAsBE,MAAtB,EAA8B;QAAEX,QAAF;QAAYc,UAAZ;QAAwBQ,aAAa,EAAE;MAAvC,CAA9B;IACD,CAFD,CAEE,OAAOC,CAAP,EAAU;MACVjG,eAAe,CAACqF,MAAD,EAASY,CAAT,EAAYvB,QAAZ,CAAf;IACD,CAJD,SAIU;MACRrD,QAAQ,CAACkE,cAAT,GAA0B,IAA1B;IACD;EACF;AACF;;AAED,SAASd,OAAT,CAAiByB,UAAjB,EAA6B;EAC3B,MAAMC,UAAU,GAAGhG,cAAc,CAAC+F,UAAD,CAAjC,CAD2B,CAE3B;EACA;;EACA,IAAI1F,WAAW,CAAC4F,GAAZ,CAAgBD,UAAhB,CAAJ,EAAiC;IAC/B,OAAO,SAAP;EACD;;EACD,IAAIA,UAAU,KAAK,QAAnB,EAA6B;IAC3B,OAAO,QAAP;EACD;;EACD,OAAO,IAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiB;EACfvG,cAAc,EAAEW;AADD,CAAjB"},"metadata":{},"sourceType":"script"}