{"ast":null,"code":"\"use strict\";\n\nconst whatwgURL = require(\"whatwg-url\");\n\nconst {\n  implForWrapper\n} = require(\"../generated/utils\");\n\nexports.documentBaseURL = document => {\n  // https://html.spec.whatwg.org/multipage/infrastructure.html#document-base-url\n  const firstBase = document.querySelector(\"base[href]\");\n  const fallbackBaseURL = exports.fallbackBaseURL(document);\n\n  if (firstBase === null) {\n    return fallbackBaseURL;\n  }\n\n  return frozenBaseURL(firstBase, fallbackBaseURL);\n};\n\nexports.documentBaseURLSerialized = document => {\n  return whatwgURL.serializeURL(exports.documentBaseURL(document));\n};\n\nexports.fallbackBaseURL = document => {\n  // https://html.spec.whatwg.org/multipage/infrastructure.html#fallback-base-url\n  // Unimplemented: <iframe srcdoc>\n  if (document.URL === \"about:blank\" && document._defaultView && document._defaultView._parent !== document._defaultView) {\n    const parentDocument = implForWrapper(document._defaultView._parent._document);\n    return exports.documentBaseURL(parentDocument);\n  }\n\n  return document._URL;\n};\n\nexports.parseURLToResultingURLRecord = (url, document) => {\n  // https://html.spec.whatwg.org/#resolve-a-url\n  // Encoding stuff ignored; always UTF-8 for us, for now.\n  const baseURL = exports.documentBaseURL(document);\n  return whatwgURL.parseURL(url, {\n    baseURL\n  }); // This returns the resulting URL record; to get the resulting URL string, just serialize it.\n};\n\nfunction frozenBaseURL(baseElement, fallbackBaseURL) {\n  // https://html.spec.whatwg.org/multipage/semantics.html#frozen-base-url\n  // The spec is eager (setting the frozen base URL when things change); we are lazy (getting it when we need to)\n  const baseHrefAttribute = baseElement.getAttributeNS(null, \"href\");\n  const result = whatwgURL.parseURL(baseHrefAttribute, {\n    baseURL: fallbackBaseURL\n  });\n  return result === null ? fallbackBaseURL : result;\n}","map":{"version":3,"names":["whatwgURL","require","implForWrapper","exports","documentBaseURL","document","firstBase","querySelector","fallbackBaseURL","frozenBaseURL","documentBaseURLSerialized","serializeURL","URL","_defaultView","_parent","parentDocument","_document","_URL","parseURLToResultingURLRecord","url","baseURL","parseURL","baseElement","baseHrefAttribute","getAttributeNS","result"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/living/helpers/document-base-url.js"],"sourcesContent":["\"use strict\";\nconst whatwgURL = require(\"whatwg-url\");\nconst { implForWrapper } = require(\"../generated/utils\");\n\nexports.documentBaseURL = document => {\n  // https://html.spec.whatwg.org/multipage/infrastructure.html#document-base-url\n\n  const firstBase = document.querySelector(\"base[href]\");\n  const fallbackBaseURL = exports.fallbackBaseURL(document);\n\n  if (firstBase === null) {\n    return fallbackBaseURL;\n  }\n\n  return frozenBaseURL(firstBase, fallbackBaseURL);\n};\n\nexports.documentBaseURLSerialized = document => {\n  return whatwgURL.serializeURL(exports.documentBaseURL(document));\n};\n\nexports.fallbackBaseURL = document => {\n  // https://html.spec.whatwg.org/multipage/infrastructure.html#fallback-base-url\n\n  // Unimplemented: <iframe srcdoc>\n\n  if (document.URL === \"about:blank\" && document._defaultView &&\n      document._defaultView._parent !== document._defaultView) {\n    const parentDocument = implForWrapper(document._defaultView._parent._document);\n    return exports.documentBaseURL(parentDocument);\n  }\n\n  return document._URL;\n};\n\nexports.parseURLToResultingURLRecord = (url, document) => {\n  // https://html.spec.whatwg.org/#resolve-a-url\n\n  // Encoding stuff ignored; always UTF-8 for us, for now.\n\n  const baseURL = exports.documentBaseURL(document);\n\n  return whatwgURL.parseURL(url, { baseURL });\n  // This returns the resulting URL record; to get the resulting URL string, just serialize it.\n};\n\nfunction frozenBaseURL(baseElement, fallbackBaseURL) {\n  // https://html.spec.whatwg.org/multipage/semantics.html#frozen-base-url\n  // The spec is eager (setting the frozen base URL when things change); we are lazy (getting it when we need to)\n\n  const baseHrefAttribute = baseElement.getAttributeNS(null, \"href\");\n  const result = whatwgURL.parseURL(baseHrefAttribute, { baseURL: fallbackBaseURL });\n  return result === null ? fallbackBaseURL : result;\n}\n"],"mappings":"AAAA;;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAM;EAAEC;AAAF,IAAqBD,OAAO,CAAC,oBAAD,CAAlC;;AAEAE,OAAO,CAACC,eAAR,GAA0BC,QAAQ,IAAI;EACpC;EAEA,MAAMC,SAAS,GAAGD,QAAQ,CAACE,aAAT,CAAuB,YAAvB,CAAlB;EACA,MAAMC,eAAe,GAAGL,OAAO,CAACK,eAAR,CAAwBH,QAAxB,CAAxB;;EAEA,IAAIC,SAAS,KAAK,IAAlB,EAAwB;IACtB,OAAOE,eAAP;EACD;;EAED,OAAOC,aAAa,CAACH,SAAD,EAAYE,eAAZ,CAApB;AACD,CAXD;;AAaAL,OAAO,CAACO,yBAAR,GAAoCL,QAAQ,IAAI;EAC9C,OAAOL,SAAS,CAACW,YAAV,CAAuBR,OAAO,CAACC,eAAR,CAAwBC,QAAxB,CAAvB,CAAP;AACD,CAFD;;AAIAF,OAAO,CAACK,eAAR,GAA0BH,QAAQ,IAAI;EACpC;EAEA;EAEA,IAAIA,QAAQ,CAACO,GAAT,KAAiB,aAAjB,IAAkCP,QAAQ,CAACQ,YAA3C,IACAR,QAAQ,CAACQ,YAAT,CAAsBC,OAAtB,KAAkCT,QAAQ,CAACQ,YAD/C,EAC6D;IAC3D,MAAME,cAAc,GAAGb,cAAc,CAACG,QAAQ,CAACQ,YAAT,CAAsBC,OAAtB,CAA8BE,SAA/B,CAArC;IACA,OAAOb,OAAO,CAACC,eAAR,CAAwBW,cAAxB,CAAP;EACD;;EAED,OAAOV,QAAQ,CAACY,IAAhB;AACD,CAZD;;AAcAd,OAAO,CAACe,4BAAR,GAAuC,CAACC,GAAD,EAAMd,QAAN,KAAmB;EACxD;EAEA;EAEA,MAAMe,OAAO,GAAGjB,OAAO,CAACC,eAAR,CAAwBC,QAAxB,CAAhB;EAEA,OAAOL,SAAS,CAACqB,QAAV,CAAmBF,GAAnB,EAAwB;IAAEC;EAAF,CAAxB,CAAP,CAPwD,CAQxD;AACD,CATD;;AAWA,SAASX,aAAT,CAAuBa,WAAvB,EAAoCd,eAApC,EAAqD;EACnD;EACA;EAEA,MAAMe,iBAAiB,GAAGD,WAAW,CAACE,cAAZ,CAA2B,IAA3B,EAAiC,MAAjC,CAA1B;EACA,MAAMC,MAAM,GAAGzB,SAAS,CAACqB,QAAV,CAAmBE,iBAAnB,EAAsC;IAAEH,OAAO,EAAEZ;EAAX,CAAtC,CAAf;EACA,OAAOiB,MAAM,KAAK,IAAX,GAAkBjB,eAAlB,GAAoCiB,MAA3C;AACD"},"metadata":{},"sourceType":"script"}