{"ast":null,"code":"\"use strict\";\n\nconst xmlParser = require(\"./xml\");\n\nconst htmlParser = require(\"./html\"); // https://w3c.github.io/DOM-Parsing/#dfn-fragment-parsing-algorithm\n\n\nfunction parseFragment(markup, contextElement) {\n  const {\n    _parsingMode\n  } = contextElement._ownerDocument;\n  let parseAlgorithm;\n\n  if (_parsingMode === \"html\") {\n    parseAlgorithm = htmlParser.parseFragment;\n  } else if (_parsingMode === \"xml\") {\n    parseAlgorithm = xmlParser.parseFragment;\n  } // Note: HTML and XML fragment parsing algorithm already return a document fragments; no need to do steps 3 and 4\n\n\n  return parseAlgorithm(markup, contextElement);\n}\n\nfunction parseIntoDocument(markup, ownerDocument) {\n  const {\n    _parsingMode\n  } = ownerDocument;\n  let parseAlgorithm;\n\n  if (_parsingMode === \"html\") {\n    parseAlgorithm = htmlParser.parseIntoDocument;\n  } else if (_parsingMode === \"xml\") {\n    parseAlgorithm = xmlParser.parseIntoDocument;\n  }\n\n  return parseAlgorithm(markup, ownerDocument);\n}\n\nmodule.exports = {\n  parseFragment,\n  parseIntoDocument\n};","map":{"version":3,"names":["xmlParser","require","htmlParser","parseFragment","markup","contextElement","_parsingMode","_ownerDocument","parseAlgorithm","parseIntoDocument","ownerDocument","module","exports"],"sources":["C:/Users/17033/balmco/node_modules/jsdom/lib/jsdom/browser/parser/index.js"],"sourcesContent":["\"use strict\";\n\nconst xmlParser = require(\"./xml\");\nconst htmlParser = require(\"./html\");\n\n// https://w3c.github.io/DOM-Parsing/#dfn-fragment-parsing-algorithm\nfunction parseFragment(markup, contextElement) {\n  const { _parsingMode } = contextElement._ownerDocument;\n\n  let parseAlgorithm;\n  if (_parsingMode === \"html\") {\n    parseAlgorithm = htmlParser.parseFragment;\n  } else if (_parsingMode === \"xml\") {\n    parseAlgorithm = xmlParser.parseFragment;\n  }\n\n  // Note: HTML and XML fragment parsing algorithm already return a document fragments; no need to do steps 3 and 4\n  return parseAlgorithm(markup, contextElement);\n}\n\nfunction parseIntoDocument(markup, ownerDocument) {\n  const { _parsingMode } = ownerDocument;\n\n  let parseAlgorithm;\n  if (_parsingMode === \"html\") {\n    parseAlgorithm = htmlParser.parseIntoDocument;\n  } else if (_parsingMode === \"xml\") {\n    parseAlgorithm = xmlParser.parseIntoDocument;\n  }\n\n  return parseAlgorithm(markup, ownerDocument);\n}\n\nmodule.exports = {\n  parseFragment,\n  parseIntoDocument\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,OAAD,CAAzB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,QAAD,CAA1B,C,CAEA;;;AACA,SAASE,aAAT,CAAuBC,MAAvB,EAA+BC,cAA/B,EAA+C;EAC7C,MAAM;IAAEC;EAAF,IAAmBD,cAAc,CAACE,cAAxC;EAEA,IAAIC,cAAJ;;EACA,IAAIF,YAAY,KAAK,MAArB,EAA6B;IAC3BE,cAAc,GAAGN,UAAU,CAACC,aAA5B;EACD,CAFD,MAEO,IAAIG,YAAY,KAAK,KAArB,EAA4B;IACjCE,cAAc,GAAGR,SAAS,CAACG,aAA3B;EACD,CAR4C,CAU7C;;;EACA,OAAOK,cAAc,CAACJ,MAAD,EAASC,cAAT,CAArB;AACD;;AAED,SAASI,iBAAT,CAA2BL,MAA3B,EAAmCM,aAAnC,EAAkD;EAChD,MAAM;IAAEJ;EAAF,IAAmBI,aAAzB;EAEA,IAAIF,cAAJ;;EACA,IAAIF,YAAY,KAAK,MAArB,EAA6B;IAC3BE,cAAc,GAAGN,UAAU,CAACO,iBAA5B;EACD,CAFD,MAEO,IAAIH,YAAY,KAAK,KAArB,EAA4B;IACjCE,cAAc,GAAGR,SAAS,CAACS,iBAA3B;EACD;;EAED,OAAOD,cAAc,CAACJ,MAAD,EAASM,aAAT,CAArB;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;EACfT,aADe;EAEfM;AAFe,CAAjB"},"metadata":{},"sourceType":"script"}