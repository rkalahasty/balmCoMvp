{"ast":null,"code":"\"use strict\";\n\nconst MIMEType = require(\"whatwg-mimetype\");\n\nconst {\n  parseURL,\n  serializeURL\n} = require(\"whatwg-url\");\n\nconst {\n  stripLeadingAndTrailingASCIIWhitespace,\n  stringPercentDecode,\n  isomorphicDecode,\n  forgivingBase64Decode\n} = require(\"./utils.js\");\n\nmodule.exports = stringInput => {\n  const urlRecord = parseURL(stringInput);\n\n  if (urlRecord === null) {\n    return null;\n  }\n\n  return module.exports.fromURLRecord(urlRecord);\n};\n\nmodule.exports.fromURLRecord = urlRecord => {\n  if (urlRecord.scheme !== \"data\") {\n    return null;\n  }\n\n  const input = serializeURL(urlRecord, true).substring(\"data:\".length);\n  let position = 0;\n  let mimeType = \"\";\n\n  while (position < input.length && input[position] !== \",\") {\n    mimeType += input[position];\n    ++position;\n  }\n\n  mimeType = stripLeadingAndTrailingASCIIWhitespace(mimeType);\n\n  if (position === input.length) {\n    return null;\n  }\n\n  ++position;\n  const encodedBody = input.substring(position);\n  let body = stringPercentDecode(encodedBody); // Can't use /i regexp flag because it isn't restricted to ASCII.\n\n  const mimeTypeBase64MatchResult = /(.*); *[Bb][Aa][Ss][Ee]64$/.exec(mimeType);\n\n  if (mimeTypeBase64MatchResult) {\n    const stringBody = isomorphicDecode(body);\n    body = forgivingBase64Decode(stringBody);\n\n    if (body === null) {\n      return null;\n    }\n\n    mimeType = mimeTypeBase64MatchResult[1];\n  }\n\n  if (mimeType.startsWith(\";\")) {\n    mimeType = \"text/plain\" + mimeType;\n  }\n\n  let mimeTypeRecord;\n\n  try {\n    mimeTypeRecord = new MIMEType(mimeType);\n  } catch (e) {\n    mimeTypeRecord = new MIMEType(\"text/plain;charset=US-ASCII\");\n  }\n\n  return {\n    mimeType: mimeTypeRecord,\n    body\n  };\n};","map":{"version":3,"names":["MIMEType","require","parseURL","serializeURL","stripLeadingAndTrailingASCIIWhitespace","stringPercentDecode","isomorphicDecode","forgivingBase64Decode","module","exports","stringInput","urlRecord","fromURLRecord","scheme","input","substring","length","position","mimeType","encodedBody","body","mimeTypeBase64MatchResult","exec","stringBody","startsWith","mimeTypeRecord","e"],"sources":["C:/Users/17033/balmco/node_modules/data-urls/lib/parser.js"],"sourcesContent":["\"use strict\";\nconst MIMEType = require(\"whatwg-mimetype\");\nconst { parseURL, serializeURL } = require(\"whatwg-url\");\nconst {\n  stripLeadingAndTrailingASCIIWhitespace,\n  stringPercentDecode,\n  isomorphicDecode,\n  forgivingBase64Decode\n} = require(\"./utils.js\");\n\nmodule.exports = stringInput => {\n  const urlRecord = parseURL(stringInput);\n\n  if (urlRecord === null) {\n    return null;\n  }\n\n  return module.exports.fromURLRecord(urlRecord);\n};\n\nmodule.exports.fromURLRecord = urlRecord => {\n  if (urlRecord.scheme !== \"data\") {\n    return null;\n  }\n\n  const input = serializeURL(urlRecord, true).substring(\"data:\".length);\n\n  let position = 0;\n\n  let mimeType = \"\";\n  while (position < input.length && input[position] !== \",\") {\n    mimeType += input[position];\n    ++position;\n  }\n  mimeType = stripLeadingAndTrailingASCIIWhitespace(mimeType);\n\n  if (position === input.length) {\n    return null;\n  }\n\n  ++position;\n\n  const encodedBody = input.substring(position);\n\n  let body = stringPercentDecode(encodedBody);\n\n  // Can't use /i regexp flag because it isn't restricted to ASCII.\n  const mimeTypeBase64MatchResult = /(.*); *[Bb][Aa][Ss][Ee]64$/.exec(mimeType);\n  if (mimeTypeBase64MatchResult) {\n    const stringBody = isomorphicDecode(body);\n    body = forgivingBase64Decode(stringBody);\n\n    if (body === null) {\n      return null;\n    }\n    mimeType = mimeTypeBase64MatchResult[1];\n  }\n\n  if (mimeType.startsWith(\";\")) {\n    mimeType = \"text/plain\" + mimeType;\n  }\n\n  let mimeTypeRecord;\n  try {\n    mimeTypeRecord = new MIMEType(mimeType);\n  } catch (e) {\n    mimeTypeRecord = new MIMEType(\"text/plain;charset=US-ASCII\");\n  }\n\n  return {\n    mimeType: mimeTypeRecord,\n    body\n  };\n};\n"],"mappings":"AAAA;;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAM;EAAEC,QAAF;EAAYC;AAAZ,IAA6BF,OAAO,CAAC,YAAD,CAA1C;;AACA,MAAM;EACJG,sCADI;EAEJC,mBAFI;EAGJC,gBAHI;EAIJC;AAJI,IAKFN,OAAO,CAAC,YAAD,CALX;;AAOAO,MAAM,CAACC,OAAP,GAAiBC,WAAW,IAAI;EAC9B,MAAMC,SAAS,GAAGT,QAAQ,CAACQ,WAAD,CAA1B;;EAEA,IAAIC,SAAS,KAAK,IAAlB,EAAwB;IACtB,OAAO,IAAP;EACD;;EAED,OAAOH,MAAM,CAACC,OAAP,CAAeG,aAAf,CAA6BD,SAA7B,CAAP;AACD,CARD;;AAUAH,MAAM,CAACC,OAAP,CAAeG,aAAf,GAA+BD,SAAS,IAAI;EAC1C,IAAIA,SAAS,CAACE,MAAV,KAAqB,MAAzB,EAAiC;IAC/B,OAAO,IAAP;EACD;;EAED,MAAMC,KAAK,GAAGX,YAAY,CAACQ,SAAD,EAAY,IAAZ,CAAZ,CAA8BI,SAA9B,CAAwC,QAAQC,MAAhD,CAAd;EAEA,IAAIC,QAAQ,GAAG,CAAf;EAEA,IAAIC,QAAQ,GAAG,EAAf;;EACA,OAAOD,QAAQ,GAAGH,KAAK,CAACE,MAAjB,IAA2BF,KAAK,CAACG,QAAD,CAAL,KAAoB,GAAtD,EAA2D;IACzDC,QAAQ,IAAIJ,KAAK,CAACG,QAAD,CAAjB;IACA,EAAEA,QAAF;EACD;;EACDC,QAAQ,GAAGd,sCAAsC,CAACc,QAAD,CAAjD;;EAEA,IAAID,QAAQ,KAAKH,KAAK,CAACE,MAAvB,EAA+B;IAC7B,OAAO,IAAP;EACD;;EAED,EAAEC,QAAF;EAEA,MAAME,WAAW,GAAGL,KAAK,CAACC,SAAN,CAAgBE,QAAhB,CAApB;EAEA,IAAIG,IAAI,GAAGf,mBAAmB,CAACc,WAAD,CAA9B,CAxB0C,CA0B1C;;EACA,MAAME,yBAAyB,GAAG,6BAA6BC,IAA7B,CAAkCJ,QAAlC,CAAlC;;EACA,IAAIG,yBAAJ,EAA+B;IAC7B,MAAME,UAAU,GAAGjB,gBAAgB,CAACc,IAAD,CAAnC;IACAA,IAAI,GAAGb,qBAAqB,CAACgB,UAAD,CAA5B;;IAEA,IAAIH,IAAI,KAAK,IAAb,EAAmB;MACjB,OAAO,IAAP;IACD;;IACDF,QAAQ,GAAGG,yBAAyB,CAAC,CAAD,CAApC;EACD;;EAED,IAAIH,QAAQ,CAACM,UAAT,CAAoB,GAApB,CAAJ,EAA8B;IAC5BN,QAAQ,GAAG,eAAeA,QAA1B;EACD;;EAED,IAAIO,cAAJ;;EACA,IAAI;IACFA,cAAc,GAAG,IAAIzB,QAAJ,CAAakB,QAAb,CAAjB;EACD,CAFD,CAEE,OAAOQ,CAAP,EAAU;IACVD,cAAc,GAAG,IAAIzB,QAAJ,CAAa,6BAAb,CAAjB;EACD;;EAED,OAAO;IACLkB,QAAQ,EAAEO,cADL;IAELL;EAFK,CAAP;AAID,CArDD"},"metadata":{},"sourceType":"script"}